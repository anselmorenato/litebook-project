#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#
#This is the source file of LiteBook Windows version 2
#require following 3rd party module:
# - liteview
# - keygrid
# - chardet
# - rarfile
# - unrar2
# - wxpython 2.8.10.1 or later

# generated by wxGlade 0.6.3 on Tue May 05 22:48:24 2009


import liteview
import keygrid
import platform
import webbrowser
import imp
import math
import wx
import wx.grid as  gridlib
import types
import wx.lib.mixins.listctrl
import wx.lib.newevent
import sqlite3
import struct
import zlib
import os
import sys
import ConfigParser
import time
from datetime import datetime
import re
import zipfile
import rarfile
import codecs
from chardet.universaldetector import UniversalDetector
import UnRAR2
import thread
import hashlib
import win32api
import urllib
import urllib2
import HTMLParser
import htmlentitydefs
import glob
import threading
try:
    from agw import hyperlink as hl
except ImportError: # if it's not there locally, try the wxPython lib.
    import wx.lib.agw.hyperlink as hl

# begin wxGlade: extracode
# end wxGlade

#following event are custom events for threads
(UpdateStatusBarEvent, EVT_UPDATE_STATUSBAR) = wx.lib.newevent.NewEvent()
(ReadTimeAlert,EVT_ReadTimeAlert)=wx.lib.newevent.NewEvent()
(ScrollDownPage,EVT_ScrollDownPage)=wx.lib.newevent.NewEvent()
(GetPosEvent,EVT_GetPos)=wx.lib.newevent.NewEvent()
(VerCheckEvent,EVT_VerCheck)=wx.lib.newevent.NewEvent()
(DownloadFinishedAlert,EVT_DFA)=wx.lib.newevent.NewEvent()
(DownloadUpdateAlert,EVT_DUA)=wx.lib.newevent.NewEvent()


#dict used for convertion between Chinese-Simplified and Chinese-Tradition
zh_dict={
   '气':'氣',
   '铺':'鋪',
   '锌':'鋅',
   '谰':'讕',
   '锋':'鋒',
   '锈':'鏽',
   '铲':'鏟',
   '锄':'鋤',
   '锅':'鍋',
   '银':'銀',
   '销':'銷',
   '锁':'鎖',
   '铸':'鑄',
   '锚':'錨',
   '铭':'銘',
   '错':'錯',
   '铣':'銑',
   '锗':'鍺',
   '铡':'鍘',
   '谴':'譴',
   '圆':'圓',
   '锐':'銳',
   '锑':'銻',
   '键':'鍵',
   '锯':'鋸',
   '歼':'殲',
   '锭':'錠',
   '衬':'襯',
   '麦':'麥',
   '铜':'銅',
   '锦':'錦',
   '残':'殘',
   '锤':'錘',
   '锥':'錐',
   '锣':'鑼',
   '瘪':'癟',
   '锡':'錫',
   '双':'雙',
   '卖':'賣',
   '锻':'鍛',
   '锹':'鍬',
   '铃':'鈴',
   '圣':'聖',
   '铁':'鐵',
   '药':'藥',
   '誉':'譽',
   '铱':'銥',
   '锰':'錳',
   '誊':'謄',
   '聪':'聰',
   '铰':'鉸',
   '动':'動',
   '捻':'撚',
   '写':'寫',
   '争':'爭',
   '饮':'飲',
   '衅':'釁',
   '务':'務',
   '亏':'虧',
   '于':'於',
   '云':'雲',
   '赖':'賴',
   '蜕':'蛻',
   '势':'勢',
   '隶':'隸',
   '卜':'蔔',
   '诀':'訣',
   '农':'農',
   '亚':'亞',
   '换':'換',
   '捣':'搗',
   '劲':'勁',
   '捡':'撿',
   '捞':'撈',
   '损':'損',
   '聋':'聾',
   '职':'職',
   '当':'當',
   '产':'產',
   '线':'線',
   '亩':'畝',
   '聂':'聶',
   '获':'獲',
   '随':'隨',
   '检':'檢',
   '劝':'勸',
   '办':'辦',
   '亲':'親',
   '讨':'討',
   '骤':'驟',
   '窥':'窺',
   '联':'聯',
   '讫':'訖',
   '亿':'億',
   '飞':'飛',
   '强':'強',
   '现':'現',
   '洒':'灑',
   '踊':'踴',
   '铬':'鉻',
   '赐':'賜',
   '踌':'躊',
   '洁':'潔',
   '纶':'綸',
   '弯':'彎',
   '项':'項',
   '张':'張',
   '议':'議',
   '鸭':'鴨',
   '环':'環',
   '鲤':'鯉',
   '冈':'岡',
   '确':'確',
   '踪':'蹤',
   '娱':'娛',
   '洼':'窪',
   '桥':'橋',
   '坝':'壩',
   '讲':'講',
   '愿':'願',
   '异':'異',
   '弃':'棄',
   '开':'開',
   '瓮':'甕',
   '坟':'墳',
   '闲':'閑',
   '场':'場',
   '啮':'齧',
   '鳞':'鱗',
   '协':'協',
   '壮':'壯',
   '讶':'訝',
   '鳖':'鼈',
   '牺':'犧',
   '壶':'壺',
   '舰':'艦',
   '壳':'殼',
   '啸':'嘯',
   '声':'聲',
   '柜':'櫃',
   '珐':'琺',
   '众':'眾',
   '启':'啓',
   '支':'隻',
   '灿':'燦',
   '灾':'災',
   '攒':'攢',
   '柠':'檸',
   '锨':'鍁',
   '绸':'綢',
   '婴':'嬰',
   '灶':'竈',
   '系':'係',
   '军':'軍',
   '与':'與',
   '讼':'訟',
   '灯':'燈',
   '灭':'滅',
   '萨':'薩',
   '葱':'蔥',
   '腊':'臘',
   '泻':'瀉',
   '设':'設',
   '骚':'騷',
   '矿':'礦',
   '矾':'礬',
   '焕':'煥',
   '龋':'齲',
   '龄':'齡',
   '视':'視',
   '内':'內',
   '补':'補',
   '妈':'媽',
   '狞':'獰',
   '龟':'龜',
   '龙':'龍',
   '龚':'龔',
   '嘱':'囑',
   '瘫':'癱',
   '坏':'壞',
   '妆':'妝',
   '妇':'婦',
   '摊':'攤',
   '摈':'擯',
   '莲':'蓮',
   '绵':'綿',
   '属':'屬',
   '摆':'擺',
   '摇':'搖',
   '摄':'攝',
   '维':'維',
   '厨':'廚',
   '茧':'繭',
   '馒':'饅',
   '绷':'繃',
   '芜':'蕪',
   '愤':'憤',
   '抡':'掄',
   '嘘':'噓',
   '苹':'蘋',
   '冻':'凍',
   '疮':'瘡',
   '疯':'瘋',
   '冲':'沖',
   '疡':'瘍',
   '况':'況',
   '腻':'膩',
   '俩':'倆',
   '盘':'盤',
   '冯':'馮',
   '绍':'紹',
   '践':'踐',
   '孙':'孫',
   '樱':'櫻',
   '计':'計',
   '屉':'屜',
   '讣':'訃',
   '学':'學',
   '讥':'譏',
   '认':'認',
   '槛':'檻',
   '闯':'闖',
   '问':'問',
   '闭':'閉',
   '绎':'繹',
   '训':'訓',
   '闪':'閃',
   '讯':'訊',
   '门':'門',
   '闷':'悶',
   '记':'記',
   '讳':'諱',
   '间':'間',
   '册':'冊',
   '疟':'瘧',
   '闰':'閏',
   '讹':'訛',
   '许':'許',
   '闽':'閩',
   '论':'論',
   '闻':'聞',
   '闺':'閨',
   '闹':'鬧',
   '闸':'閘',
   '欲':'慾',
   '狰':'猙',
   '犹':'猶',
   '状':'狀',
   '渔':'漁',
   '渗':'滲',
   '节':'節',
   '礼':'禮',
   '渐':'漸',
   '报':'報',
   '护':'護',
   '筛':'篩',
   '孪':'孿',
   '华':'華',
   '渊':'淵',
   '筑':'築',
   '层':'層',
   '游':'遊',
   '屿':'嶼',
   '赏':'賞',
   '祷':'禱',
   '抚':'撫',
   '筹':'籌',
   '芦':'蘆',
   '犊':'犢',
   '签':'簽',
   '须':'須',
   '顺':'順',
   '屡':'屢',
   '顷':'頃',
   '窜':'竄',
   '烫':'燙',
   '络':'絡',
   '昼':'晝',
   '汉':'漢',
   '翘':'翹',
   '獭':'獺',
   '币':'幣',
   '遥':'遙',
   '郧':'鄖',
   '铝':'鋁',
   '伟':'偉',
   '汇':'彙',
   '师':'師',
   '烬':'燼',
   '忧':'憂',
   '帐':'帳',
   '皋':'臯',
   '惊':'驚',
   '窑':'窯',
   '蓟':'薊',
   '帘':'簾',
   '蓝':'藍',
   '带':'帶',
   '据':'據',
   '呛':'嗆',
   '卢':'盧',
   '呜':'嗚',
   '评':'評',
   '帮':'幫',
   '污':'汙',
   '翱':'翺',
   '汤':'湯',
   '汹':'洶',
   '忆':'憶',
   '惧':'懼',
   '惨':'慘',
   '惩':'懲',
   '遗':'遺',
   '惫':'憊',
   '惭':'慚',
   '惮':'憚',
   '惯':'慣',
   '俭':'儉',
   '鲜':'鮮',
   '数':'數',
   '沉':'沈',
   '虫':'蟲',
   '离':'離',
   '衔':'銜',
   '独':'獨',
   '涌':'湧',
   '鲍':'鮑',
   '唤':'喚',
   '鲁':'魯',
   '沟':'溝',
   '虽':'雖',
   '虾':'蝦',
   '鲸':'鯨',
   '顽':'頑',
   '没':'沒',
   '札':'劄',
   '韩':'韓',
   '术':'術',
   '沤':'漚',
   '监':'監',
   '沪':'滬',
   '订':'訂',
   '敛':'斂',
   '励':'勵',
   '虑':'慮',
   '粤':'粵',
   '机':'機',
   '难':'難',
   '怜':'憐',
   '粮':'糧',
   '温':'溫',
   '虚':'虛',
   '劳':'勞',
   '粪':'糞',
   '朴':'樸',
   '鹅':'鵝',
   '哗':'嘩',
   '钻':'鑽',
   '痈':'癰',
   '盏':'盞',
   '袄':'襖',
   '鹏':'鵬',
   '钳':'鉗',
   '钵':'缽',
   '鹊':'鵲',
   '咏':'詠',
   '袜':'襪',
   '撵':'攆',
   '钠':'鈉',
   '钡':'鋇',
   '钢':'鋼',
   '痪':'瘓',
   '钥':'鑰',
   '钦':'欽',
   '盖':'蓋',
   '袭':'襲',
   '鹤':'鶴',
   '国':'國',
   '顶':'頂',
   '哑':'啞',
   '钞':'鈔',
   '钟':'鐘',
   '钒':'釩',
   '围':'圍',
   '号':'號',
   '听':'聽',
   '囱':'囪',
   '嚣':'囂',
   '钉':'釘',

   '撑':'撐',
   '鹰':'鷹',
   '钎':'釺',
   '涛':'濤',
   '皱':'皺',
   '团':'團',
   '掷':'擲',
   '谚':'諺',
   '砾':'礫',
   '掳':'擄',
   '侣':'侶',
   '谜':'謎',
   '谓':'謂',
   '鸯':'鴦',
   '谐':'諧',
   '谗':'讒',
   '掺':'摻',
   '卫':'衛',
   '掸':'撣',
   '谋':'謀',
   '谊':'誼',
   '钙':'鈣',
   '帅':'帥',
   '畴':'疇',
   '谎':'謊',
   '谍':'諜',
   '莹':'瑩',
   '玛':'瑪',
   '谁':'誰',
   '馆':'館',
   '谆':'諄',
   '谅':'諒',
   '赡':'贍',
   '穷':'窮',
   '隐':'隱',
   '饺':'餃',
   '抬':'擡',
   '饼':'餅',
   '饿':'餓',
   '饱':'飽',
   '饰':'飾',
   '砖':'磚',
   '饲':'飼',
   '饵':'餌',
   '枢':'樞',
   '饶':'饒',
   '单':'單',
   '谩':'謾',
   '谨':'謹',
   '饭':'飯',
   '饯':'餞',
   '谬':'謬',
   '谣':'謠',
   '谢':'謝',
   '运':'運',
   '饥':'饑',
   '码':'碼',
   '谤':'謗',
   '绩':'績',
   '宠':'寵',
   '牵':'牽',
   '绪':'緒',
   '续':'續',
   '浓':'濃',
   '酿':'釀',
   '浑':'渾',
   '酱':'醬',
   '绣':'繡',
   '绢':'絹',
   '绥':'綏',
   '蝎':'蠍',
   '懒':'懶',
   '绦':'縧',
   '浆':'漿',
   '浇':'澆',
   '浅':'淺',
   '绽':'綻',
   '综':'綜',
   '绿':'綠',
   '暂':'暫',
   '济':'濟',
   '绰':'綽',
   '绳':'繩',
   '浊':'濁',
   '测':'測',
   '营':'營',
   '萤':'螢',
   '抢':'搶',
   '终':'終',
   '阳':'陽',
   '绊':'絆',
   '酝':'醞',
   '涩':'澀',
   '经':'經',
   '让':'讓',
   '练':'練',
   '戏':'戲',
   '绅':'紳',
   '组':'組',
   '织':'織',
   '细':'細',
   '给':'給',
   '绘':'繪',
   '绚':'絢',
   '绝':'絕',
   '烟':'煙',
   '统':'統',
   '绞':'絞',
   '绑':'綁',
   '结':'結',
   '绒':'絨',
   '绕':'繞',
   '宪':'憲',
   '蹿':'躥',
   '赶':'趕',
   '识':'識',
   '猪':'豬',
   '羡':'羨',
   '构':'構',
   '献':'獻',
   '举':'舉',
   '逻':'邏',
   '吴':'吳',
   '涂':'塗',
   '吗':'嗎',
   '枫':'楓',
   '涟':'漣',
   '御':'禦',
   '涝':'澇',
   '弹':'彈',
   '态':'態',
   '怀':'懷',
   '吨':'噸',
   '怂':'慫',
   '抠':'摳',
   '帜':'幟',
   '递':'遞',
   '适':'適',
   '巩':'鞏',
   '画':'畫',
   '蝉':'蟬',
   '丽':'麗',
   '涨':'漲',
   '涧':'澗',
   '润':'潤',
   '涤':'滌',
   '涣':'渙',
   '吓':'嚇',
   '涡':'渦',
   '蔷':'薔',
   '员':'員',
   '径':'徑',
   '阴':'陰',
   '页':'頁',
   '逊':'遜',
   '债':'債',
   '选':'選',
   '吁':'籲',
   '爷':'爺',
   '齐':'齊',
   '断':'斷',
   '词':'詞',
   '萝':'蘿',
   '斩':'斬',
   '帧':'幀',
   '辈':'輩',
   '晋':'晉',
   '纫':'紉',
   '奖':'獎',
   '专':'專',
   '兰':'蘭',
   '晒':'曬',
   '晓':'曉',
   '体':'體',
   '诈':'詐',
   '奋':'奮',
   '晕':'暈',
   '贫':'貧',
   '阎':'閻',
   '树':'樹',
   '硷':'鹼',
   '蔼':'藹',
   '斋':'齋',
   '医':'醫',
   '横':'橫',
   '齿':'齒',
   '颁':'頒',
   '赌':'賭',
   '类':'類',
   '宾':'賓',
   '奥':'奧',
   '爱':'愛',
   '赎':'贖',
   '毁':'毀',
   '货':'貨',
   '账':'賬',
   '样':'樣',
   '仅':'僅',
   '责':'責',
   '财':'財',
   '时':'時',
   '从':'從',
   '贮':'貯',
   '购':'購',
   '贬':'貶',
   '险':'險',
   '贪':'貪',
   '贩':'販',
   '质':'質',
   '贷':'貸',
   '丧':'喪',
   '肿':'腫',
   '肾':'腎',
   '剥':'剝',
   '仓':'倉',
   '剧':'劇',
   '贰':'貳',
   '贿':'賄',
   '伪':'僞',
   '贼':'賊',
   '贺':'賀',
   '费':'費',
   '贸':'貿',
   '剑':'劍',
   '剐':'剮',
   '陇':'隴',
   '栖':'棲',
   '旷':'曠',
   '荚':'莢',
   '畅':'暢',
   '缅':'緬',
   '会':'會',
   '伙':'夥',
   '优':'優',
   '仪':'儀',
   '陈':'陳',
   '肃':'肅',
   '顿':'頓',
   '陕':'陝',
   '价':'價',
   '标':'標',
   '剂':'劑',
   '猎':'獵',
   '厩':'廄',
   '蜡':'蠟',
   '灵':'靈',
   '栏':'欄',
   '弥':'彌',
   '栈':'棧',
   '栋':'棟',
   '拨':'撥',
   '择':'擇',
   '笋':'筍',
   '称':'稱',
   '尘':'塵',
   '呕':'嘔',
   '尔':'爾',
   '拣':'揀',
   '拥':'擁',
   '拦':'攔',
   '拧':'擰',
   '蜗':'蝸',
   '沧':'滄',
   '顾':'顧',
   '苏':'蘇',
   '苍':'蒼',
   '将':'將',
   '丛':'叢',
   '积':'積',
   '笔':'筆',
   '湿':'濕',
   '业':'業',
   '转':'轉',
   '轮':'輪',
   '软':'軟',
   '轨':'軌',
   '轩':'軒',
   '尸':'屍',
   '过':'過',
   '陨':'隕',
   '吕':'呂',
   '车':'車',
   '轧':'軋',
   '担':'擔',
   '载':'載',
   '笺':'箋',
   '轿':'轎',
   '笼':'籠',
   '赚':'賺',
   '秃':'禿',
   '轻':'輕',
   '种':'種',
   '尧':'堯',
   '赛':'賽',
   '轰':'轟',
   '馁':'餒',
   '邹':'鄒',
   '纯':'純',
   '纬':'緯',
   '瞩':'矚',
   '纪':'紀',
   '风':'風',
   '箩':'籮',
   '约':'約',
   '级':'級',
   '纤':'纖',
   '红':'紅',
   '纠':'糾',
   '骡':'騾',
   '总':'總',
   '纽':'紐',
   '纺':'紡',
   '舆':'輿',
   '纸':'紙',
   '纹':'紋',
   '溃':'潰',
   '纷':'紛',
   '纵':'縱',
   '纲':'綱',
   '纳':'納',
   '溅':'濺',
   '纱':'紗',
   '骑':'騎',
   '舱':'艙',
   '废':'廢',
   '庙':'廟',
   '骗':'騙',
   '应':'應',
   '躯':'軀',
   '庐':'廬',
   '库':'庫',
   '峦':'巒',
   '骂':'罵',
   '骄':'驕',
   '扬':'揚',
   '峡':'峽',
   '骇':'駭',
   '庄':'莊',
   '诲':'誨',
   '庆':'慶',
   '骋':'騁',
   '验':'驗',
   '骏':'駿',
   '罚':'罰',
   '丑':'醜',
   '垦':'墾',
   '烧':'燒',
   '烦':'煩',
   '烩':'燴',
   '网':'網',
   '罗':'羅',
   '权':'權',
   '杀':'殺',
   '万':'萬',
   '郸':'鄲',
   '庞':'龐',
   '竖':'豎',
   '泞':'濘',
   '烁':'爍',
   '鱼':'魚',
   '烃':'烴',
   '烂':'爛',
   '蚁':'蟻',
   '蚀':'蝕',
   '杨':'楊',
   '蚂':'螞',
   '哟':'喲',
   '泪':'淚',
   '来':'來',
   '坞':'塢',
   '条':'條',
   '蚕':'蠶',
   '渍':'漬',
   '铂':'鉑',
   '罢':'罷',
   '烛':'燭',
   '骆':'駱',
   '泼':'潑',
   '泽':'澤',
   '杰':'傑',
   '后':'後',
   '兽':'獸',
   '毕':'畢',
   '垒':'壘',
   '诅':'詛',
   '兹':'茲',
   '为':'為',
   '养':'養',
   '证':'證',
   '兴':'興',
   '诌':'謅',
   '临':'臨',
   '诊':'診',
   '毙':'斃',
   '关':'關',
   '诉':'訴',
   '瞒':'瞞',
   '诗':'詩',
   '试':'試',
   '垄':'壟',

   '个':'個',
   '译':'譯',
   '诞':'誕',
   '瑶':'瑤',
   '严':'嚴',
   '话':'話',
   '诚':'誠',
   '诛':'誅',
   '详':'詳',
   '诧':'詫',
   '窝':'窩',
   '该':'該',
   '询':'詢',
   '诣':'詣',
   '党':'黨',
   '静':'靜',
   '误':'誤',
   '诬':'誣',
   '语':'語',
   '兑':'兌',
   '诫':'誡',
   '额':'額',
   '挤':'擠',
   '请':'請',
   '说':'說',
   '诵':'誦',
   '调':'調',
   '毡':'氈',
   '三':'叁',
   '诱':'誘',
   '课':'課',
   '诽':'誹',
   '诺':'諾',
   '读':'讀',
   '诸':'諸',
   '钱':'錢',
   '钝':'鈍',
   '揽':'攬',
   '头':'頭',
   '斗':'鬥',
   '跃':'躍',
   '挝':'撾',
   '税':'稅',
   '沦':'淪',
   '区':'區',
   '潍':'濰',
   '沥':'瀝',
   '稳':'穩',
   '匀':'勻',
   '垫':'墊',
   '椭':'橢',
   '铆':'鉚',
   '谭':'譚',
   '潜':'潛',
   '响':'響',
   '猫':'貓',
   '础':'礎',
   '丰':'豐',
   '辑':'輯',
   '辐':'輻',
   '输':'輸',
   '叠':'疊',
   '辕':'轅',
   '辗':'輾',
   '辖':'轄',
   '辙':'轍',
   '咨':'諮',
   '铅':'鉛',
   '败':'敗',
   '崭':'嶄',
   '辞':'辭',
   '鳃':'鰓',
   '较':'較',
   '贤':'賢',
   '辅':'輔',
   '叶':'葉',
   '辆':'輛',
   '辉':'輝',
   '刘':'劉',
   '叹':'歎',
   '虏':'虜',
   '范':'範',
   '篓':'簍',
   '参':'參',
   '叁':'三',
   '篮':'籃',
   '侨':'僑',
   '贡':'貢',
   '边':'邊',
   '辽':'遼',
   '达':'達',
   '丢':'丟',
   '贯':'貫',
   '发':'發',
   '战':'戰',
   '诡':'詭',
   '肤':'膚',
   '辩':'辯',
   '辫':'辮',
   '变':'變',
   '篱':'籬',
   '禄':'祿',
   '咸':'鹹',
   '淀':'澱',
   '彻':'徹',
   '肠':'腸',
   '热':'熱',
   '恋':'戀',
   '彦':'彥',
   '访':'訪',
   '钩':'鈎',
   '郑':'鄭',
   '敌':'敵',
   '录':'錄',
   '颓':'頹',
   '萧':'蕭',
   '恼':'惱',
   '归':'歸',
   '彝':'彜',
   '恳':'懇',
   '恶':'惡',
   '贵':'貴',
   '墙':'牆',
   '蕴':'蘊',
   '传':'傳',
   '阅':'閱',
   '里':'裡',
   '释':'釋',
   '讽':'諷',
   '疗':'療',
   '贱':'賤',
   '滞':'滯',
   '伤':'傷',
   '颊':'頰',
   '娇':'嬌',
   '娄':'婁',
   '岗':'崗',
   '鸟':'鳥',
   '装':'裝',
   '对':'對',
   '蛰':'蟄',
   '霉':'黴',
   '炽':'熾',
   '鹃':'鵑',
   '紧':'緊',
   '鸣':'鳴',
   '鸡':'雞',
   '鸦':'鴉',
   '鸥':'鷗',
   '馋':'饞',
   '鸿':'鴻',
   '裤':'褲',
   '鸽':'鴿',
   '鸳':'鴛',
   '睁':'睜',
   '着':'著',
   '擞':'擻',
   '鸵':'鴕',
   '继':'繼',
   '际':'際',
   '驾':'駕',
   '胶':'膠',
   '赠':'贈',
   '赢':'贏',
   '赣':'贛',
   '预':'預',
   '刽':'劊',
   '你':'妳',
   '赵':'趙',
   '桨':'槳',
   '佣':'傭',
   '仑':'侖',
   '领':'領',
   '删':'刪',
   '档':'檔',
   '颇':'頗',
   '阶':'階',
   '别':'別',
   '寝':'寢',
   '阵':'陣',
   '资':'資',
   '钨':'鎢',
   '谦':'謙',
   '阉':'閹',
   '划':'劃',
   '赁':'賃',
   '赂':'賂',
   '赃':'贓',
   '阂':'閡',
   '阀':'閥',
   '阁':'閣',
   '刚':'剛',
   '创':'創',
   '胜':'勝',
   '则':'則',
   '赔':'賠',
   '胀':'脹',
   '胁':'脅',
   '胆':'膽',
   '队':'隊',
   '偿':'償',
   '寻':'尋',
   '狭':'狹',
   '赞':'讚',
   '阑':'闌',
   '寿':'壽',
   '们':'們',
   '阔':'闊',
   '导':'導',
   '钮':'鈕',
   '竞':'競',
   '储':'儲',
   '狮':'獅',
   '伞':'傘',
   '耻':'恥',
   '颐':'頤',
   '耸':'聳',
   '两':'兩',
   '梦':'夢',
   '频':'頻',
   '挡':'擋',
   '挠':'撓',
   '挣':'掙',
   '挥':'揮',
   '雾':'霧',
   '坛':'壇',
   '栅':'柵',
   '挛':'攣',
   '挚':'摯',
   '勋':'勳',
   '显':'顯',
   '挟':'挾',
   '挞':'撻',
   '雏':'雛',
   '干':'乾',
   '盗':'盜',
   '荧':'熒',
   '杂':'雜',
   '楼':'樓',
   '钧':'鈞',
   '儿':'兒',
   '坚':'堅',
   '颈':'頸',
   '驴':'驢',
   '滚':'滾',
   '驶':'駛',
   '驱':'驅',
   '驰':'馳',
   '驳':'駁',
   '图':'圖',
   '狱':'獄',
   '驼':'駝',
   '颂':'頌',
   '碍':'礙',
   '驹':'駒',
   '颅':'顱',
   '驻':'駐',
   '岛':'島',
   '题':'題',
   '负':'負',
   '颜':'顔',
   '岁':'歲',
   '岂':'豈',
   '贞':'貞',
   '驭':'馭',
   '马':'馬',
   '驯':'馴',
   '驮':'馱',
   '链':'鏈',
   '贝':'貝',
   '颖':'穎',
   '颗':'顆',
   '艰':'艱',
   '艳':'豔',
   '岳':'嶽',
   '颠':'顛',
   '艺':'藝',
   '岿':'巋',
   '颤':'顫',
   '颧':'顴',
   '滨':'濱',
   '滩':'灘',
   '癣':'癬',
   '蒋':'蔣',
   '碱':'堿',
   '祸':'禍',
   '满':'滿',
   '堑':'塹',
   '滤':'濾',
   '陆':'陸',
   '滦':'灤',
   '窍':'竅',
   '钓':'釣',
   '矫':'矯',
   '极':'極',
   '赘':'贅',
   '旧':'舊',
   '无':'無',
   '堕':'墮',
   '尝':'嘗',
   '皑':'皚',
   '览':'覽',
   '觉':'覺',
   '夺':'奪',
   '澜':'瀾',
   '规':'規',
   '夹':'夾',
   '观':'觀',
   '户':'戶',
   '见':'見',
   '针':'針',
   '辊':'輥',
   '枣':'棗',
   '备':'備',
   '处':'處',
   '狈':'狽',
   '蝇':'蠅',
   '茎':'莖',
   '园':'園',
   '复':'複',
   '秽':'穢',
   '义':'義',
   '触':'觸',
   '够':'夠',
   '阐':'闡',
   '块':'塊',
   '镊':'鑷',
   '镍':'鎳',
   '黄':'黃',
   '镁':'鎂',
   '镀':'鍍',
   '铀':'鈾',
   '慑':'懾',
   '买':'買',
   '乱':'亂',
   '镇':'鎮',
   '秸':'稭',
   '琼':'瓊',
   '镜':'鏡',
   '岭':'嶺',
   '镑':'鎊',
   '镐':'鎬',
   '书':'書',
   '习':'習',
   '乡':'鄉',
   '飘':'飄',
   '镭':'鐳',
   '拢':'攏',
   '丝':'絲',
   '乔':'喬',
   '镣':'鐐',
   '婶':'嬸',
   '乐':'樂',
   '桩':'樁',
   '滥':'濫',
   '乌':'烏',
   '么':'麼',
   '坠':'墜',
   '长':'長',
   '镰':'鐮',
   '欢':'歡',
   '琐':'瑣',
   '欧':'歐',
   '镶':'鑲',
   '击':'擊',
   '宁':'甯',
   '凿':'鑿',
   '东':'東',
   '脱':'脫',
   '卤':'鹵',
   '韧':'韌',
   '韦':'韋',
   '卧':'臥',
   '脸':'臉',
   '侥':'僥',
   '痴':'癡',
   '侧':'側',
   '侦':'偵',
   '凯':'凱',
   '侠':'俠',
   '凭':'憑',
   '伦':'倫',
   '韵':'韻',
   '几':'幾',
   '侩':'儈',
   '宝':'寶',
   '实':'實',
   '凤':'鳳',
   '凛':'凜',
   '审':'審',
   '趋':'趨',
   '橱':'櫥',
   '脓':'膿',
   '脑':'腦',
   '脐':'臍',
   '湾':'灣',
   '凑':'湊',
   '宫':'宮',
   '痉':'痙',
   '脚':'腳',

   '苇':'葦',
   '倾':'傾',
   '凉':'涼',
   '减':'減',
   '凌':'淩',
   '脏':'髒',
   '净':'淨',
   '宽':'寬',
   '脉':'脈',
   '凄':'淒',
   '厢':'廂',
   '扰':'擾',
   '厦':'廈',
   '连':'連',
   '迟':'遲',
   '简':'簡',
   '制':'製',
   '还':'還',
   '电':'電',
   '这':'這',
   '悬':'懸',
   '准':'準',
   '机':'機',
   '广':'廣',
   '炉':'爐',
   '尽':'盡',
   '厅':'廳',
   '，':'，',
   '。':'。',
   '？':'？',
   '、':'、',
   '《':'《',
   '》':'》',
   '：':'：',
   '；':'；',
   '‘':'‘',
   '”':'”',
   '『':'『',

}

def GetPint():
    p=platform.architecture()
    if p[0]=='32bit': return 'L'
    else:
        return 'I'


def readPlugin():
    global PluginList
    PluginList={}
    flist=glob.glob(os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\plugin\\*.py")
    i=0
    for f in flist:
        bname=os.path.basename(AnyToUnicode(f))
        fpath=os.path.dirname(AnyToUnicode(sys.argv[0]))+u'\\plugin\\'+bname
        fpath=fpath.encode('gbk')
        try:
            PluginList[bname]=imp.load_source(unicode(i),fpath)
        except:
            return False
        i+=1

def isfull(l):
    xx=0
    n=len(l)
    count=0
    while xx<n:
        if l[xx]==-1: count+=1
        xx+=1

    if count==0: return True
    else:
        return int((float(n-count)/float(n))*100)

def JtoF(data):
   #简体到繁体
   max=zh_dict.__len__()
   dlg = wx.ProgressDialog(u"简体－>繁体", u'    正在转换中...   ',max,None,wx.PD_SMOOTH|wx.PD_AUTO_HIDE)
   i=0
   for s in zh_dict:
       i+=1
       dlg.Update(i)
       data = data.replace(s,zh_dict[s])
   dlg.Destroy()
   return data

def FtoJ(data):
   #繁体到简体
   max=zh_dict.__len__()
   dlg = wx.ProgressDialog(u"繁体 -> 简体", u'    正在转换中...    ',max,None,wx.PD_SMOOTH|wx.PD_AUTO_HIDE)
   i=0
   for s in zh_dict:
       i+=1
       dlg.Update(i)
       data = data.replace(zh_dict[s],s)
   dlg.Destroy()
   return data




#some global var
PluginList={}
OnDirectSeenPage=False
GlobalConfig={}
KeyConfigList=[]
KeyMenuList={}
OpenedFileList=[]
current_file=''
load_zip=False
current_file_list=[]
current_zip_file=''
OnScreenFileList=[]
CurOnScreenFileIndex=0
BookMarkList=[]
ThemeList=[]
BookDB=[]
Ticking=True
SupportedFileTypes=['.zip','.txt','.rar','.umd','.jar','.epub']
Version=u'2.0 final'
I_Version=2.07  # this is used to check updated version
SqlCon=None
linestyle={u'虚线':wx.DOT,u'实线':wx.SOLID,u'长虚线':wx.LONG_DASH,u'点虚线':wx.DOT_DASH}
rlinestyle={wx.DOT:u'虚线',wx.SOLID:u'实线',wx.LONG_DASH:u'长虚线',wx.DOT_DASH:u'点虚线'}

def DetectFileCoding(filepath,type='txt',zipfilepath=''):
    """Return a file's encoding, need import chardet """
    if type=='txt':
        try:
            input_file=open(filepath,'r')
        except:
            dlg = wx.MessageDialog(None, filepath+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return "error"
    else:
        if type=='zip':
            try:
                #zipfilepath=zipfilepath.encode('gbk')
                #filepath=filepath.encode('gbk')
                zfile=zipfile.ZipFile(zipfilepath)
                #print zfile.namelist()
                if isinstance(filepath, unicode):
                    filepath=filepath.encode('gbk')
                input_file=zfile.open(filepath,'rU')
            except Exception as inst:
                #print inst
                dlg = wx.MessageDialog(None, zipfilepath+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                return "error"
    if type=='rar':
        try:
            rfile=UnRAR2.RarFile(zipfilepath)
            buff=rfile.read_files(filepath)
        except Exception as inst:
            dlg = wx.MessageDialog(None, zipfilepath+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return "error"
        lines=buff[0][1].splitlines()
        detector = UniversalDetector()
        line_count=0
        for line in lines:
            line=line[:100] # decrease this number to improve speed
            detector.feed(line)
            if detector.done or line_count==50: break# decrease this number to improve speed
            line_count+=1
        detector.close()
        if detector.result['encoding']<>None:
            return detector.result['encoding'].lower()
        else:
            return None
    detector = UniversalDetector()
    line_count=0
    while line_count<50: # decrease this number to improve speed
        line=input_file.readline(100) # decrease this number to improve speed
        detector.feed(line)
        if detector.done: break
        line_count+=1
    detector.close()
    input_file.close()
    if detector.result['encoding']<>None:
        return detector.result['encoding'].lower()
    else:
        return None





def AnyToUnicode(input_str,coding=None):
    """Convert any coding str into unicode str. this function should used with function DetectFileCoding"""
    if isinstance(input_str,unicode): return input_str
    if coding<>None:
        if coding <> 'utf-8':
            if coding.lower()=='gb2312':
                coding='GBK'
            coding=coding.upper()
            output_str=unicode(input_str,coding,errors='replace')
        else:
            output_str=input_str.decode('utf-8',"replace")
    else:
        output_str=unicode(input_str,'gbk',errors='replace')
    return output_str



def readKeyConfig():
    global KeyConfigList,KeyMenuList
    config=MyConfig()
    try:
        ffp=codecs.open(os.environ['APPDATA'].decode('gbk')+u"\\litebook_key.ini",encoding='utf-8',mode='r')
        GlobalConfig['ConfigDir']=os.environ['APPDATA'].decode('gbk')
        config.readfp(ffp)
    except:
        kconfig=[]
        kconfig.append(('last'))
        kconfig.append((u'向上翻行',"----+WXK_UP"))
        kconfig.append((u'向下翻行',"----+WXK_DOWN"))
        kconfig.append((u'向上翻页',"----+WXK_PAGEUP"))
        kconfig.append((u'向上翻页',"----+WXK_LEFT"))
        kconfig.append((u'向上翻页',"----+WXK_UP"))
        kconfig.append((u'向下翻页',"----+WXK_DOWN"))
        kconfig.append((u'向下翻页',"----+WXK_PAGEDOWN"))
        kconfig.append((u'向下翻页',"----+WXK_RIGHT"))
        kconfig.append((u'向下翻页',"----+WXK_SPACE"))
        kconfig.append((u'跳到首页',"----+WXK_HOME"))
        kconfig.append((u'跳到结尾',"----+WXK_END"))
        kconfig.append((u'文件列表','C---+"O"'))
        kconfig.append((u'打开文件','C---+"P"'))
        kconfig.append((u'另存为','C---+"S"'))
        kconfig.append((u'关闭','C---+"Z"'))
        kconfig.append((u'上一个文件','C---+"["'))
        kconfig.append((u'下一个文件','C---+"]"'))
        kconfig.append((u'搜索小说网站','-A--+"C"'))
        kconfig.append((u'重新载入插件','C---+"R"'))
        kconfig.append((u'选项','-A--+"O"'))
        kconfig.append((u'退出','-A--+"X"'))
        kconfig.append((u'拷贝','C---+"C"'))
        kconfig.append((u'查找','C---+"F"'))
        kconfig.append((u'查找下一个','----+WXK_F3'))
        kconfig.append((u'查找上一个','----+WXK_F4'))
        kconfig.append((u'纸张显示模式','-A--+"M"'))
        kconfig.append((u'书本显示模式','-A--+"B"'))
        kconfig.append((u'竖排书本显示模式','-A--+"N"'))
        kconfig.append((u'显示工具栏','C---+"T"'))
        kconfig.append((u'全屏显示','C---+"I"'))
        kconfig.append((u'显示文件侧边栏','-A--+"D"'))
        kconfig.append((u'自动翻页','----+WXK_RETURN'))
        kconfig.append((u'智能分段','-A--+"P"'))
        kconfig.append((u'添加到收藏夹','C---+"D"'))
        kconfig.append((u'整理收藏夹','C---+"M"'))
        kconfig.append((u'简明帮助','----+WXK_F1'))
        kconfig.append((u'版本更新内容','----+WXK_F2'))
        kconfig.append((u'检查更新','----+WXK_F5'))
        kconfig.append((u'关于','----+WXK_F6'))
        kconfig.append((u'过滤HTML标记','----+WXK_F9'))
        kconfig.append((u'切换为简体字','----+WXK_F7'))
        kconfig.append((u'切换为繁体字','----+WXK_F8'))
        kconfig.append((u'显示进度条','----+"Z"'))
        KeyConfigList.append(kconfig)
        i=1
        tl=len(kconfig)
        while i<tl:
            KeyMenuList[kconfig[i][0]]=keygrid.str2menu(kconfig[i][1])
            i+=1
        return
    if not config.has_section('last'):
        kconfig=[]
        kconfig.append(('last'))
        kconfig.append((u'向上翻行',"----+WXK_UP"))
        kconfig.append((u'向下翻行',"----+WXK_DOWN"))
        kconfig.append((u'向上翻页',"----+WXK_PAGEUP"))
        kconfig.append((u'向上翻页',"----+WXK_LEFT"))
        kconfig.append((u'向下翻页',"----+WXK_PAGEDOWN"))
        kconfig.append((u'向下翻页',"----+WXK_RIGHT"))
        kconfig.append((u'向下翻页',"----+WXK_SPACE"))
        kconfig.append((u'向上翻页',"----+WXK_UP"))
        kconfig.append((u'向下翻页',"----+WXK_DOWN"))
        kconfig.append((u'跳到首页',"----+WXK_HOME"))
        kconfig.append((u'跳到结尾',"----+WXK_END"))
        kconfig.append((u'文件列表','C---+"O"'))
        kconfig.append((u'打开文件','C---+"P"'))
        kconfig.append((u'另存为','C---+"S"'))
        kconfig.append((u'关闭','C---+"Z"'))
        kconfig.append((u'上一个文件','C---+"["'))
        kconfig.append((u'下一个文件','C---+"]"'))
        kconfig.append((u'搜索小说网站','-A--+"C"'))
        kconfig.append((u'重新载入插件','C---+"R"'))
        kconfig.append((u'选项','-A--+"O"'))
        kconfig.append((u'退出','-A--+"X"'))
        kconfig.append((u'拷贝','C---+"C"'))
        kconfig.append((u'查找','C---+"F"'))
        kconfig.append((u'查找下一个','----+WXK_F3'))
        kconfig.append((u'查找上一个','----+WXK_F4'))
        kconfig.append((u'纸张显示模式','-A--+"M"'))
        kconfig.append((u'书本显示模式','-A--+"B"'))
        kconfig.append((u'竖排书本显示模式','-A--+"N"'))
        kconfig.append((u'显示工具栏','C---+"T"'))
        kconfig.append((u'全屏显示','C---+"I"'))
        kconfig.append((u'显示文件侧边栏','-A--+"D"'))
        kconfig.append((u'自动翻页','----+WXK_RETURN'))
        kconfig.append((u'智能分段','-A--+"P"'))
        kconfig.append((u'添加到收藏夹','C---+"D"'))
        kconfig.append((u'整理收藏夹','C---+"M"'))
        kconfig.append((u'简明帮助','----+WXK_F1'))
        kconfig.append((u'版本更新内容','----+WXK_F2'))
        kconfig.append((u'检查更新','----+WXK_F5'))
        kconfig.append((u'关于','----+WXK_F6'))
        kconfig.append((u'过滤HTML标记','----+WXK_F9'))
        kconfig.append((u'切换为简体字','----+WXK_F7'))
        kconfig.append((u'切换为繁体字','----+WXK_F8'))
        kconfig.append((u'显示进度条','----+"Z"'))
        KeyConfigList.append(kconfig)
    else:
        kconfig=[]
        kconfig.append(('last'))

        try:
            cstr=config.get('last',u'向上翻行')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'向上翻行',cs))
        except:
            kconfig.append((u'向上翻行',"----+WXK_UP"))

        try:
            cstr=config.get('last',u'向下翻行')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'向下翻行',cs))
        except:
            kconfig.append((u'向下翻行',"----+WXK_DOWN"))


        try:
            cstr=config.get('last',u'向上翻页')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'向上翻页',cs))
        except:
            kconfig.append((u'向上翻页',"----+WXK_PAGEUP"))

        try:
            cstr=config.get('last',u'跳到结尾')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'跳到结尾',cs))
        except:
            kconfig.append((u'跳到结尾',"----+WXK_END"))

        try:
            cstr=config.get('last',u'切换为繁体字')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'切换为繁体字',cs))
        except:
            kconfig.append((u'切换为繁体字',"----+WXK_F8"))

        try:
            cstr=config.get('last',u'另存为')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'另存为',cs))
        except:
            kconfig.append((u'另存为','C---+"S"'))

        try:
            cstr=config.get('last',u'向下翻页')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'向下翻页',cs))
        except:
            kconfig.append((u'向下翻页','----+WXK_PAGEDOWN'))

        try:
            cstr=config.get('last',u'智能分段')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'智能分段',cs))
        except:
            kconfig.append((u'智能分段','-A--+"P"'))

        try:
            cstr=config.get('last',u'查找')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'查找',cs))
        except:
            kconfig.append((u'查找','C---+"F"'))

        try:
            cstr=config.get('last',u'关于')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'关于',cs))
        except:
            kconfig.append((u'关于','----+WXK_F6'))

        try:
            cstr=config.get('last',u'查找下一个')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'查找下一个',cs))
        except:
            kconfig.append((u'查找下一个','----+WXK_F3'))

        try:
            cstr=config.get('last',u'自动翻页')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'自动翻页',cs))
        except:
            kconfig.append((u'自动翻页','----+WXK_RETURN'))


        try:
            cstr=config.get('last',u'重新载入插件')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'重新载入插件',cs))
        except:
            kconfig.append((u'重新载入插件','C---+"R"'))

        try:
            cstr=config.get('last',u'选项')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'选项',cs))
        except:
            kconfig.append((u'选项','-A--+"O"'))

        try:
            cstr=config.get('last',u'简明帮助')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'简明帮助',cs))
        except:
            kconfig.append((u'简明帮助','----+WXK_F1'))

        try:
            cstr=config.get('last',u'纸张显示模式')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'纸张显示模式',cs))
        except:
            kconfig.append((u'纸张显示模式','-A--+"M"'))

        try:
            cstr=config.get('last',u'下一个文件')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'下一个文件',cs))
        except:
            kconfig.append((u'下一个文件','C---+"]"'))

        try:
            cstr=config.get('last',u'添加到收藏夹')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'添加到收藏夹',cs))
        except:
            kconfig.append((u'添加到收藏夹','C---+"D"'))

        try:
            cstr=config.get('last',u'搜索小说网站')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'搜索小说网站',cs))
        except:
            kconfig.append((u'搜索小说网站','-A--+"C"'))

        try:
            cstr=config.get('last',u'全屏显示')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'全屏显示',cs))
        except:
            kconfig.append((u'全屏显示','C---+"I"'))

        try:
            cstr=config.get('last',u'跳到首页')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'跳到首页',cs))
        except:
            kconfig.append((u'跳到首页','----+WXK_HOME'))

        try:
            cstr=config.get('last',u'拷贝')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'拷贝',cs))
        except:
            kconfig.append((u'拷贝','C---+"C"'))

        try:
            cstr=config.get('last',u'竖排书本显示模式')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'竖排书本显示模式',cs))
        except:
            kconfig.append((u'竖排书本显示模式','-A--+"N"'))

        try:
            cstr=config.get('last',u'显示工具栏')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'显示工具栏',cs))
        except:
            kconfig.append((u'显示工具栏','C---+"T"'))

        try:
            cstr=config.get('last',u'打开文件')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'打开文件',cs))
        except:
            kconfig.append((u'打开文件','C---+"P"'))

        try:
            cstr=config.get('last',u'整理收藏夹')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'整理收藏夹',cs))
        except:
            kconfig.append((u'整理收藏夹','C---+"M"'))

        try:
            cstr=config.get('last',u'文件列表')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'文件列表',cs))
        except:
            kconfig.append((u'文件列表','C---+"O"'))

        try:
            cstr=config.get('last',u'切换为简体字')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'切换为简体字',cs))
        except:
            kconfig.append((u'切换为简体字','----+WXK_F7'))


        try:
            cstr=config.get('last',u'过滤HTML标记')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'过滤HTML标记',cs))
        except:
            kconfig.append((u'过滤HTML标记','----+WXK_F9'))


        try:
            cstr=config.get('last',u'书本显示模式')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'书本显示模式',cs))
        except:
            kconfig.append((u'书本显示模式','-A--+"B"'))

        try:
            cstr=config.get('last',u'检查更新')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'检查更新',cs))
        except:
            kconfig.append((u'检查更新','----+WXK_F5'))

        try:
            cstr=config.get('last',u'版本更新内容')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'版本更新内容',cs))
        except:
            kconfig.append((u'版本更新内容','----+WXK_F2'))


        try:
            cstr=config.get('last',u'查找上一个')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'查找上一个',cs))
        except:
            kconfig.append((u'查找上一个','----+WXK_F4'))

        try:
            cstr=config.get('last',u'显示文件侧边栏')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'显示文件侧边栏',cs))
        except:
            kconfig.append((u'显示文件侧边栏','-A--+"D"'))

        try:
            cstr=config.get('last',u'关闭')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'关闭',cs))
        except:
            kconfig.append((u'关闭','C---+"Z"'))

        try:
            cstr=config.get('last',u'退出')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'退出',cs))
        except:
            kconfig.append((u'退出','-A--+"X"'))

        try:
            cstr=config.get('last',u'上一个文件')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'上一个文件',cs))
        except:
            kconfig.append((u'上一个文件','C---+"["'))

        try:
            cstr=config.get('last',u'显示进度条')
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((u'显示进度条',cs))
        except:
            kconfig.append((u'显示进度条','----+"Z"'))
        KeyConfigList.append(kconfig)

    secs=config.sections()
    secs.remove('last')
    for sec in secs:
        kconfig=[]
        kconfig.append((sec))
        opts=config.options(sec)
        for opt in opts:
            cstr=config.get(sec,opt)
            cstr_list=cstr.split('&&')
            for cs in cstr_list:
                kconfig.append((opt,cs))
        KeyConfigList.append(kconfig)


    for kconfig in KeyConfigList:
        if kconfig[0]=='last':
            break
    i=1
    tl=len(kconfig)
    while i<tl:
        KeyMenuList[kconfig[i][0]]=keygrid.str2menu(kconfig[i][1])
        i+=1







def writeKeyConfig():
    global KeyConfigList
    config=MyConfig()
    for kconfig in KeyConfigList:
        config.add_section(kconfig[0])
        i=1
        kl=len(kconfig)
        cstr={}
        while i<kl:
            if kconfig[i][0] not in cstr:
                cstr[kconfig[i][0]]=kconfig[i][1]
            else:
                cstr[kconfig[i][0]]+="&&"+kconfig[i][1]
            i+=1
        for key,val in cstr.items():
            config.set(kconfig[0],unicode(key),val)

    try:
        ConfigFile=codecs.open(os.environ['APPDATA'].decode('gbk')+u'\\litebook_key.ini',encoding='utf-8',mode='w')
        config.write(ConfigFile)
        ConfigFile.close()
    except:
        dlg = wx.MessageDialog(None, u'写入按键配置文件错误！',u"错误！",wx.OK|wx.ICON_ERROR)
        dlg.ShowModal()
        dlg.Destroy()
        return False




def readConfigFile():
    """This function will read config from litebook.ini to a global dict var: GlobalConfig"""
    global GlobalConfig,OpenedFileList,BookMarkList,ThemeList,BookDB,linestyle
    config = MyConfig()
    try:
        ffp=codecs.open(os.environ['APPDATA'].decode('gbk')+u"\\litebook.ini",encoding='utf-8',mode='r')
        GlobalConfig['ConfigDir']=os.environ['APPDATA'].decode('gbk')
        config.readfp(ffp)
    except:
        try:
            ffp=codecs.open(os.path.dirname(sys.argv[0].decode('gbk'))+u"\\litebook.ini",encoding='utf-8',mode='r')
            GlobalConfig['ConfigDir']=os.path.dirname(sys.argv[0]).decode('gbk')
            config.readfp(ffp)
        except:
            #default value are here
            GlobalConfig['ConfigDir']=''
            GlobalConfig['LastDir']=os.path.dirname(AnyToUnicode(sys.argv[0]))
            GlobalConfig['IconDir']=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\icon"
            #GlobalConfig['BackgroundDir']=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\background"
            OpenedFileList=[]
            GlobalConfig['LastFile']=''
            GlobalConfig['LastZipFile']=''
            GlobalConfig['LastPos']=0
            BookMarkList=[]
            GlobalConfig['CurFont']=wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "")
            GlobalConfig['CurFColor']=(0,0,0,0)
            GlobalConfig['CurBColor']='LIGHT BLUE'
            GlobalConfig['LoadLastFile']=True
            #GlobalConfig['ShowFullScr']=False
            GlobalConfig['AutoScrollInterval']=12000
            GlobalConfig['MaxBookDB']=50
            GlobalConfig['MaxOpenedFiles']=5
            GlobalConfig['RemindInterval']=60
            GlobalConfig['EnableESC']=False
            GlobalConfig['EnableSidebarPreview']=True
            GlobalConfig['VerCheckOnStartup']=True
            GlobalConfig['HashTitle']=False
            GlobalConfig['ShowAllFileInSidebar']=True
            GlobalConfig['HideToolbar']=False
            GlobalConfig['useproxy']=False
            GlobalConfig['proxyserver']=''
            GlobalConfig['proxyport']=0
            GlobalConfig['proxyuser']=''
            GlobalConfig['proxypass']=''
            GlobalConfig['DAUDF']=0
            GlobalConfig['lastwebsearchkeyword']=''
            GlobalConfig['defaultsavedir']=GlobalConfig['LastDir']
            GlobalConfig['numberofthreads']=10
            GlobalConfig['lastweb']=''
            GlobalConfig['backgroundimg']=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\background"+"\\default.jpg"
            GlobalConfig['backgroundimglayout']='tile'
            GlobalConfig['showmode']='paper'
            GlobalConfig['underline']=True
            GlobalConfig['underlinecolor']='LIGHTGREY'
            GlobalConfig['underlinestyle']=wx.DOT
            GlobalConfig['pagemargin']=50
            GlobalConfig['bookmargin']=50
            GlobalConfig['vbookmargin']=50
            GlobalConfig['centralmargin']=20
            GlobalConfig['linespace']=5
            GlobalConfig['vlinespace']=15
            return

##    try:
##        GlobalConfig['pagemargin']=config.getint('Appearance','pagemargin')
##    except:
##        GlobalConfig['pagemargin']=50
##
##    try:
##        GlobalConfig['bookmargin']=config.getint('Appearance','bookmargin')
##    except:
##        GlobalConfig['bookmargin']=50
##
##    try:
##        GlobalConfig['vbookmargin']=config.getint('Appearance','vbookmargin')
##    except:
##        GlobalConfig['vbookmargin']=50
##
##    try:
##        GlobalConfig['centralmargin']=config.getint('Appearance','centralmargin')
##    except:
##        GlobalConfig['centralmargin']=20
##
##
##    try:
##        GlobalConfig['linespace']=config.getint('Appearance','linespace')
##    except:
##        GlobalConfig['linespace']=5
##
##
##    try:
##        GlobalConfig['vlinespace']=config.getint('Appearance','vlinespace')
##    except:
##        GlobalConfig['vlinespace']=15
##
##
##    try:
##        GlobalConfig['underline']=config.getboolean('Appearance','underline')
##    except:
##        GlobalConfig['underline']=True
##
##
##    try:
##        GlobalConfig['underlinecolor']=config.get('Appearance','underlinecolor')
##    except:
##        GlobalConfig['underlinecolor']='LIGHTGREY'
##
##
##    try:
##        GlobalConfig['underlinestyle']=linestyle[config.get('Appearance','underlinestyle')]
##    except:
##        GlobalConfig['underlinestyle']=wx.DOT
##
##
##
##    try:
##        GlobalConfig['backgroundimg']=config.get('Appearance','backgroundimg')
##    except:
##        GlobalConfig['backgroundimg']=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\background"+"\\default.jpg"
##
##    try:
##        GlobalConfig['showmode']=config.get('Appearance','showmode')
##    except:
##        GlobalConfig['showmode']='paper'
##
##    try:
##        GlobalConfig['backgroundimglayout']=config.get('Appearance','backgroundimglayout')
##    except:
##        GlobalConfig['backgroundimglayout']='tile'


    try:
        GlobalConfig['lastweb']=config.get('settings','lastweb')
    except:
        GlobalConfig['lastweb']=''

    try:
        GlobalConfig['lastwebsearchkeyword']=config.get('settings','LastWebSearchKeyword')
    except:
        GlobalConfig['lastwebsearchkeyword']=''

    try:
        GlobalConfig['DAUDF']=config.getint('settings','DefaultActionUponDownloadFinished')
    except:
        GlobalConfig['DAUDF']=0



    try:
        GlobalConfig['useproxy']=config.getboolean('settings','UseProxy')
    except:
        GlobalConfig['useproxy']=False


    try:
        GlobalConfig['proxyserver']=config.get('settings','ProxyServer')
    except:
        GlobalConfig['proxyserver']=''

    try:
        GlobalConfig['proxyport']=config.getint('settings','ProxyPort')
    except:
        GlobalConfig['proxyport']=0
    try:
        GlobalConfig['proxyuser']=config.get('settings','ProxyUser')
    except:
        GlobalConfig['proxyuser']=''
    try:
        GlobalConfig['proxypass']=config.get('settings','ProxyPass')
    except:
        GlobalConfig['proxypass']=''



    try:
        GlobalConfig['LastDir']=config.get('settings','LastDir')
    except:
        GlobalConfig['LastDir']=os.path.dirname(AnyToUnicode(sys.argv[0]))

    if GlobalConfig['LastDir'].strip()=='' or os.path.isdir(GlobalConfig['LastDir'])==False:
        GlobalConfig['LastDir']=os.path.dirname(sys.argv[0])

    GlobalConfig['IconDir']=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\icon"

    try:
        GlobalConfig['defaultsavedir']=config.get('settings','defaultsavedir')
    except:
        GlobalConfig['defaultsavedir']=GlobalConfig['LastDir']
    try:
        GlobalConfig['numberofthreads']=config.getint('settings','numberofthreads')
    except:
        GlobalConfig['numberofthreads']=10



    try:
        GlobalConfig['LoadLastFile']=config.getboolean('settings','LoadLastFile')
    except:
        GlobalConfig['LoadLastFile']=True

#    try:
#        GlobalConfig['ShowFullScr']=config.getboolean('settings','ShowFullScreen')
#    except:
#        GlobalConfig['ShowFullScr']=False

    try:
        GlobalConfig['AutoScrollInterval']=config.getfloat('settings','AutoScrollInterval')
    except:
        GlobalConfig['AutoScrollInterval']=12000

    try:
        GlobalConfig['MaxBookDB']=config.getint('settings','MaxBookDB')
    except:
        GlobalConfig['MaxBookDB']=50
    try:
        GlobalConfig['HideToolbar']=config.getboolean('settings','HideToolbar')
    except:
        GlobalConfig['HideToolbar']=False

    try:
        GlobalConfig['MaxOpenedFiles']=config.getint('settings','MaxOpenedFiles')
    except:
        GlobalConfig['MaxOpenedFiles']=5

    try:
        GlobalConfig['RemindInterval']=config.getint('settings','RemindInterval')
    except:
        GlobalConfig['RemindInterval']=60

    try:
        GlobalConfig['EnableESC']=config.getboolean('settings','EnableESC')
    except:
        GlobalConfig['EnableESC']=False

    try:
        GlobalConfig['EnableSidebarPreview']=config.getboolean('settings','EnableSidebarPreview')
    except:
        GlobalConfig['EnableSidebarPreview']=True

    try:
        GlobalConfig['VerCheckOnStartup']=config.getboolean('settings','VerCheckOnStartup')
    except:
        GlobalConfig['VerCheckOnStartup']=True

    try:
        GlobalConfig['HashTitle']=config.getboolean('settings','HashTitle')
    except:
        GlobalConfig['HashTitle']=False

    try:
        GlobalConfig['ShowAllFileInSidebar']=config.getboolean('settings','ShowAllFileInSidebar')
    except:
        GlobalConfig['ShowAllFileInSidebar']=True

    try:
        flist=(config.items('LastOpenedFiles'))
        i=1
        for f in flist:
            if i>GlobalConfig['MaxOpenedFiles']: break
            else:
                i+=1
            if f[1].find(u'|')==-1:OpenedFileList.append({'file':f[1],'type':'normal','zfile':''})
            else:
                (zfile,filename)=f[1].split('|',2)
                OpenedFileList.append({'file':filename,'type':'zip','zfile':zfile})
    except:
        OpenedFileList=[]


    try:
        GlobalConfig['LastPos']=config.getint('LastPosition','pos')
        filename=config.get('LastPosition','lastfile')
        if filename.find(u"*")==-1:
            if filename.find(u"|")<>-1:
                GlobalConfig['LastZipFile']=filename.split(u"|")[0]
                GlobalConfig['LastFile']=filename.split(u"|")[1]
            else:
                GlobalConfig['LastFile']=filename
                GlobalConfig['LastZipFile']=''
        else:
             GlobalConfig['LastFile']=filename
             GlobalConfig['LastZipFile']=''
    except:
        GlobalConfig['LastFile']=''
        GlobalConfig['LastZipFile']=''
        GlobalConfig['LastPos']=0


    try:
        blist=(config.items('BookMark'))
        bookmark={}
        for bk in blist:
            bk_info=bk[1].split(u'?',2)
            BookMarkList.append({'filename':bk_info[0],'pos':int(bk_info[1]),'line':bk_info[2]})
    except:
        BookMarkList=[]


    #Read Font and Color
    try:
        ft_list=(config.items('Appearance'))
        gen_last=False
        for ft in ft_list:
            name=ft[0]
            f=ft[1].split('|')
            if name=='last':
                GlobalConfig['CurFont']=wx.Font(int(f[0]),int(f[1]),int(f[2]),int(f[3]),eval(f[4]),f[5],int(f[6]))
                GlobalConfig['CurFColor']=eval(f[7])
                GlobalConfig['CurBColor']=eval(f[8])
                if len(f)>9:
                    if f[9]<>'None':
                        GlobalConfig['backgroundimg']=f[9]
                    else:
                        GlobalConfig['backgroundimg']=None
                    GlobalConfig['showmode']=f[10]
                    GlobalConfig['backgroundimglayout']=f[11]
                    GlobalConfig['underline']=eval(f[12])
                    GlobalConfig['underlinestyle']=int(f[13])
                    GlobalConfig['underlinecolor']=f[14]
                    GlobalConfig['pagemargin']=int(f[15])
                    GlobalConfig['bookmargin']=int(f[16])
                    GlobalConfig['vbookmargin']=int(f[17])
                    GlobalConfig['centralmargin']=int(f[18])
                    GlobalConfig['linespace']=int(f[19])
                    GlobalConfig['vlinespace']=int(f[20])
                gen_last=True
            else:
                l={}
                l['font']=wx.Font(int(f[0]),int(f[1]),int(f[2]),int(f[3]),eval(f[4]),f[5],int(f[6]))
                l['fcolor']=eval(f[7])
                l['bcolor']=eval(f[8])
                if len(f)>9:
                    if f[9]<>'None':
                        l['backgroundimg']=f[9]
                    else:
                        l['backgroundimg']=None
                    l['showmode']=f[10]
                    l['backgroundimglayout']=f[11]
                    l['underline']=eval(f[12])
                    l['underlinestyle']=int(f[13])
                    l['underlinecolor']=f[14]
                    l['pagemargin']=int(f[15])
                    l['bookmargin']=int(f[16])
                    l['vbookmargin']=int(f[17])
                    l['centralmargin']=int(f[18])
                    l['linespace']=int(f[19])
                    l['vlinespace']=int(f[20])
                    l['name']=name
                    l['config']=ft[1]
                ThemeList.append(l)

    except:

        GlobalConfig['CurFont']=wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "")
        GlobalConfig['CurFColor']=(0,0,0,0)
        GlobalConfig['CurBColor']='LIGHT BLUE'
        GlobalConfig['backgroundimg']=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\background"+"\\default.jpg"
        GlobalConfig['backgroundimglayout']='tile'
        GlobalConfig['showmode']='paper'
        GlobalConfig['underline']=True
        GlobalConfig['underlinecolor']='LIGHTGREY'
        GlobalConfig['underlinestyle']=wx.DOT
        GlobalConfig['pagemargin']=50
        GlobalConfig['bookmargin']=50
        GlobalConfig['vbookmargin']=50
        GlobalConfig['centralmargin']=20
        GlobalConfig['linespace']=5
        GlobalConfig['vlinespace']=15



    if gen_last==False:

        GlobalConfig['CurFont']=wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "")
        GlobalConfig['CurFColor']=(0,0,0,0)
        GlobalConfig['CurBColor']='LIGHT BLUE'
        GlobalConfig['backgroundimg']=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\background"+"\\default.jpg"
        GlobalConfig['backgroundimglayout']='tile'
        GlobalConfig['showmode']='paper'
        GlobalConfig['underline']=True
        GlobalConfig['underlinecolor']='LIGHTGREY'
        GlobalConfig['underlinestyle']=wx.DOT
        GlobalConfig['pagemargin']=50
        GlobalConfig['bookmargin']=50
        GlobalConfig['vbookmargin']=50
        GlobalConfig['centralmargin']=20
        GlobalConfig['linespace']=5
        GlobalConfig['vlinespace']=15



    #Read BookDB
    try:
        bk_list=(config.items('BookDB'))
        for bk in bk_list:
            BookDB.append({'key':bk[0],'pos':int(bk[1])})
    except:
        BookDB=[]



    for key,val in GlobalConfig.items():
        if isinstance(val,str):
            GlobalConfig[key]=AnyToUnicode(val)



def writeConfigFile(lastpos):
    """write config to config.ini in the app data dir"""

    global GlobalConfig,OpenedFileList,load_zip,current_file,current_zip_file,OnScreenFileList,BookMarkList,ThemeList,BookDB,rlinestyle
    # save settings
    config = MyConfig()
    config.add_section('settings')
    config.set('settings','LastDir',GlobalConfig['LastDir'])
    config.set('settings','LoadLastFile',unicode(GlobalConfig['LoadLastFile']))
    #config.set('settings','ShowFullScreen',unicode(GlobalConfig['ShowFullScr']))
    config.set('settings','AutoScrollInterval',unicode(GlobalConfig['AutoScrollInterval']))
    config.set('settings','MaxOpenedFiles',unicode(GlobalConfig['MaxOpenedFiles']))
    config.set('settings','MaxBookDB',unicode(GlobalConfig['MaxBookDB']))
    config.set('settings','RemindInterval',unicode(GlobalConfig['RemindInterval']))
    config.set('settings','EnableESC',unicode(GlobalConfig['EnableESC']))
    config.set('settings','EnableSidebarPreview',unicode(GlobalConfig['EnableSidebarPreview']))
    config.set('settings','VerCheckOnStartup',unicode(GlobalConfig['VerCheckOnStartup']))
    config.set('settings','HashTitle',unicode(True))
    config.set('settings','ShowAllFileInSidebar',unicode(GlobalConfig['ShowAllFileInSidebar']))
    config.set('settings','HideToolbar',unicode(GlobalConfig['HideToolbar']))
    config.set('settings','ProxyServer',unicode(GlobalConfig['proxyserver']))
    config.set('settings','ProxyPort',unicode(GlobalConfig['proxyport']))
    config.set('settings','ProxyUser',unicode(GlobalConfig['proxyuser']))
    config.set('settings','ProxyPass',unicode(GlobalConfig['proxypass']))
    config.set('settings','UseProxy',unicode(GlobalConfig['useproxy']))
    config.set('settings','DefaultActionUponDownloadFinished',unicode(GlobalConfig['DAUDF']))
    config.set('settings','LastWebSearchKeyword',unicode(GlobalConfig['lastwebsearchkeyword']))
    config.set('settings','defaultsavedir',unicode(GlobalConfig['defaultsavedir']))
    config.set('settings','numberofthreads',unicode(GlobalConfig['numberofthreads']))
    config.set('settings','lastweb',unicode(GlobalConfig['lastweb']))

    # save opened files
    config.add_section('LastOpenedFiles')
    i=0
    for f in OpenedFileList:
        if f['type']=='normal':config.set('LastOpenedFiles',unicode(i),f['file'])
        else:
            config.set('LastOpenedFiles',unicode(i),f['zfile']+u"|"+f['file'])
        i+=1
    # save last open files and postion
    config.add_section('LastPosition')
    config.set('LastPosition','pos',unicode(lastpos))
    if OnScreenFileList.__len__()==1: #if there are multiple files opening, then last postition can not be remembered
        if not load_zip or current_zip_file=='':
            config.set('LastPosition','lastfile',current_file)
        else:
            config.set('LastPosition','lastfile',current_zip_file+u"|"+current_file)
    else:
        tstr=u''
        for onscrfile in OnScreenFileList:
            tstr+=onscrfile[0]+u'*'
        tstr=tstr[:-1]
        config.set('LastPosition','lastfile',tstr)

    # save bookmarks
    config.add_section('BookMark')
    bookmark={}
    i=0
    for bookmark in BookMarkList:
        config.set('BookMark',unicode(i),bookmark['filename']+u'?'+unicode(bookmark['pos'])+u'?'+bookmark['line'])
        i+=1

    # Save font and color
    config.add_section('Appearance')
    ft=GlobalConfig['CurFont']
    save_str=unicode(ft.GetPointSize())+u'|'+unicode(ft.GetFamily())+u'|'+unicode(ft.GetStyle())+u'|'+unicode(ft.GetWeight())+u'|'+unicode(ft.GetUnderlined())+u'|'+ft.GetFaceName()+u'|'+unicode(ft.GetDefaultEncoding())+u'|'+unicode(GlobalConfig['CurFColor'])+u'|'+unicode(GlobalConfig['CurBColor'])
    save_str+=u'|'+unicode(GlobalConfig['backgroundimg'])
    save_str+=u'|'+unicode(GlobalConfig['showmode'])
    save_str+=u'|'+unicode(GlobalConfig['backgroundimglayout'])
    save_str+=u'|'+unicode(GlobalConfig['underline'])
    save_str+=u'|'+unicode(GlobalConfig['underlinestyle'])
    save_str+=u'|'+unicode(GlobalConfig['underlinecolor'])
    save_str+=u'|'+unicode(GlobalConfig['pagemargin'])
    save_str+=u'|'+unicode(GlobalConfig['bookmargin'])
    save_str+=u'|'+unicode(GlobalConfig['vbookmargin'])
    save_str+=u'|'+unicode(GlobalConfig['centralmargin'])
    save_str+=u'|'+unicode(GlobalConfig['linespace'])
    save_str+=u'|'+unicode(GlobalConfig['vlinespace'])

    config.set('Appearance','last',save_str)

##    config.set('Appearance','backgroundimg',unicode(GlobalConfig['backgroundimg']))
##    config.set('Appearance','showmode',unicode(GlobalConfig['showmode']))
##    config.set('Appearance','backgroundimglayout',unicode(GlobalConfig['backgroundimglayout']))
##    config.set('Appearance','underline',unicode(GlobalConfig['underline']))
##    config.set('Appearance','underlinestyle',unicode(rlinestyle[GlobalConfig['underlinestyle']]))
##    config.set('Appearance','underlinecolor',unicode(GlobalConfig['underlinecolor']))
##    config.set('Appearance','pagemargin',unicode(GlobalConfig['pagemargin']))
##    config.set('Appearance','bookmargin',unicode(GlobalConfig['bookmargin']))
##    config.set('Appearance','vbookmargin',unicode(GlobalConfig['vbookmargin']))
##    config.set('Appearance','centralmargin',unicode(GlobalConfig['centralmargin']))
##    config.set('Appearance','linespace',unicode(GlobalConfig['linespace']))
##    config.set('Appearance','vlinespace',unicode(GlobalConfig['vlinespace']))
    # Save Theme List
    for t in ThemeList:
        config.set('Appearance',t['name'],t['config'])


    # Save Book DB
    config.add_section('BookDB')
    for bk in BookDB:
        config.set('BookDB',unicode(bk['key']),unicode(bk['pos']))


    #write into litebook.ini
    if GlobalConfig['ConfigDir']=='':
        try:
            ConfigFile=codecs.open(os.environ['APPDATA'].decode('gbk')+u'\\litebook.ini',encoding='utf-8',mode='w')
            config.write(ConfigFile)
            ConfigFile.close()
        except:
            dlg = wx.MessageDialog(None, u'写入配置文件错误！',u"错误！",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return False
    else:
        try:
            ConfigFile=codecs.open(GlobalConfig['ConfigDir']+u'\\litebook.ini',encoding='utf-8',mode='w')
            config.write(ConfigFile)
            ConfigFile.close()
        except:
            dlg = wx.MessageDialog(None, u'写入配置文件错误！',u"错误！",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return False
    return True






def UpdateOpenedFileList(filename,ftype,zfile=''):
    global OpenedFileList,GlobalConfig,SqlCon
    fi={}
    fi['type']=ftype
    fi['file']=filename
    fi['zfile']=zfile
    sqlstr="insert into book_history values ('"+unicode(filename)+"','"+ftype+"','"+unicode(zfile)+"',"+str(time.time())+");"
    try:
        SqlCon.execute(sqlstr)
        SqlCon.commit()
    except:
        return
    for x in OpenedFileList:
        if x['file']==filename:
            if x['type']=='normal':
                OpenedFileList.remove(x)
                OpenedFileList.insert(0,x)
                return
            else:
                if x['zfile']==zfile:
                    OpenedFileList.remove(x)
                    OpenedFileList.insert(0,x)
                    return
    OpenedFileList.insert(0,fi)
    if OpenedFileList.__len__()>GlobalConfig['MaxOpenedFiles']:
        i=0
        delta=OpenedFileList.__len__()-GlobalConfig['MaxOpenedFiles']
        while i<delta:
            OpenedFileList.pop()
            i+=1


def VersionCheck(os):
    try:
        f=urllib.urlopen("http://code.google.com/p/litebook-project/wiki/UrlChecking")
    except:
        return False
    for line in f:
        if line.find('litebookwin')<>-1:
            line=line.strip()
            p=re.compile('<.*?>',re.S)
            line=p.sub('',line)
            info=line.split(' ')
            found_1=False
            found_2=False
            for word in info:
                if word.find('litebook'+os+'latestversion')<>-1:
                    latest_ver=word.split('----')[1]
                    found_1=True
                if word.find('litebook'+os+'downloadurl')<>-1 :
                    download_url=word.split('----')[1]
                    found_2=True
            if found_1==False or found_2==False:
                f.close()
                return False
            else:
                f.close()
                return (latest_ver,'http://'+download_url)





def htmname2uni(htm):
    if htm[1]=='#':
        try:
            uc=unichr(int(htm[2:-1]))
            return uc
        except:
            return htm
    else:
        try:
            uc=unichr(htmlentitydefs.name2codepoint[htm[1:-1]])
            return uc
        except:
            return htm

def htm2txt(inf):
    """ filter out all html tags/JS script in input string, return a clean string"""
    f_str=inf
    #conver <p> to "\n"
    p=re.compile('<\s*p\s*>',re.I)
    f_str=p.sub('\n',f_str)


    #conver <br> to "\n"
    p=re.compile('<br.*?>',re.I)
    f_str=p.sub('\n',f_str)

    #conver "\n\r" to "\n"
    p=re.compile('\n\r',re.S)
    f_str=p.sub('\n',f_str)

    #this is used to remove protection of http://www.jjwxc.net
    p=re.compile('<font color=.*?>.*?</font>',re.I|re.S)
    f_str=p.sub('',f_str)

    #this is used to remove protection of HJSM
    p=re.compile("<\s*span\s*class='transparent'\s*>.*?<\s*/span\s*>",re.I|re.S)
    f_str=p.sub('',f_str)

    #remove <script xxxx>xxxx</script>
    p=re.compile('<script.*?>.*?</script>',re.I|re.S)
    f_str=p.sub('',f_str)

    #remove <style></style>
    p=re.compile('<style>.*?</style>',re.I|re.S)
    f_str=p.sub('',f_str)

    #remove <option>
    p=re.compile('<option.*?>.*?</option>',re.I|re.S)
    f_str=p.sub('',f_str)

    #remove <xxx>
    p=re.compile('<.*?>',re.S)
    f_str=p.sub('',f_str)

    #remove <!-- -->
    p=re.compile('<!--.*?-->',re.S)
    f_str=p.sub('',f_str)

    #conver &nbsp; into space
    p=re.compile('&nbsp;',re.I)
    f_str=p.sub(' ',f_str)

    #convert html codename like "&quot;" into real character
    p=re.compile("&#?\w{1,9};")
    str_list=p.findall(f_str)
    e_list=[]
    for x in str_list:
        if x not in e_list:
            e_list.append(x)
    for x in e_list:
        f_str=f_str.replace(x,htmname2uni(x))

    #convert more than 5 newline in a row into one newline
    f_str=f_str.replace("\r\n","\n")
    p=re.compile('\n{5,}?')
    f_str=p.sub('-----',f_str)


    return f_str

def jarfile_decode(infile):
    #decode jar file,return unicode
    if not zipfile.is_zipfile(infile):return False
    zfile=zipfile.ZipFile(infile)
    i=1
    content=u''
    while True:
        try:
            fp=zfile.open(str(i),'r')
        except: break
        txt=fp.read()
        content+=txt.decode('utf-16','ignore')
        i+=1
    return content

def epubfile_decode(infile):
    #decode epub file,return unicode
    if not zipfile.is_zipfile(infile):return False
    zfile=zipfile.ZipFile(infile)
    i=1
    content=u''
    clist=[]
    for fname in zfile.namelist():
        fext=os.path.splitext(fname)[1].lower()
        if fext==".xml" or fext==".html" or fext==".htm":
            if fname<>'META-INF/container.xml':
                clist.append(fname)
    clist=sorted(clist)
    for fname in clist:
        try:
            fp=zfile.open(fname,"r")
        except:break
        txt=fp.read()
        try:
            content+=txt.decode('utf-8','ignore')
        except:
            content+=txt.decode('utf-16','ignor')
    return htm2txt(content)

import struct
import zlib
import sys
def umd_field_decode(fp,pos):
    """" This function is to decode each field inside umd file"""
    fp.seek(pos)
    field_type_list={2:'title',3:'author',4:'year',5:'month',6:'day',7:'gender',8:'publisher',9:'vendor'}
    dtype=struct.unpack('H',fp.read(2))
    if dtype[0]<>11:
        field_type=field_type_list[dtype[0]]
        field_value=u''
        i=pos+3
        fp.seek(i,0)
        field_len=int(ord(fp.read(1)))
        field_len=field_len-5
        i+=1
        fp.seek(i,0)
        m=i
        while m<i+field_len:
            onechar=unichr(struct.unpack('H',fp.read(2))[0])
            field_value+=onechar
            m+=2
            fp.seek(m)
    else:
        field_type='content'
        pos+=4
        fp.seek(pos,0)
        field_len=struct.unpack('I',fp.read(4))[0]
        pos+=5
        fp.seek(pos,0)
##        print field_len
        chapter_type=struct.unpack('H',fp.read(2))[0]
##        print hex(chapter_type)

        pos+=4
        fp.seek(pos,0)
        r1=struct.unpack('I',fp.read(4))[0]
##        print "random-1 is "+str(hex(r1))

        pos+=5
        fp.seek(pos,0)
        r2=struct.unpack('I',fp.read(4))[0]
##        print "random-2 is "+str(hex(r2))

        pos+=4
        fp.seek(pos,0)
        offset_len=struct.unpack('I',fp.read(4))[0]-9
##        print "offset_len is "+str(offset_len)

        i=0
        pos+=4
        fp.seek(pos,0)
        chapter_offset=[]
        while i<offset_len:
            chapter_offset.append(struct.unpack('I',fp.read(4))[0])
            i+=4
            fp.seek(pos+i,0)
##        print "chapter offsets are:"
##        print chapter_offset

        pos+=offset_len+1
        fp.seek(pos,0)
        ch_t_type=struct.unpack('H',fp.read(2))[0]
##        print "ch_title_type is "+str(hex(ch_t_type))

        pos+=4
        fp.seek(pos,0)
        r3=struct.unpack('I',fp.read(4))[0]
##        print "random-3 is "+str(hex(r3))

        pos+=5
        fp.seek(pos,0)
        r4=struct.unpack('I',fp.read(4))[0]
##        print "random-4 is "+str(hex(r4))

        pos+=4
        fp.seek(pos,0)
        ch_title_len=struct.unpack('I',fp.read(4))[0]-9
        m=0
        pos+=4
        fp.seek(pos,0)
        while m<ch_title_len:
            t_len=ord(struct.unpack('c',fp.read(1))[0])
            pos+=1
            fp.seek(pos,0)
            n=pos
            t_val=u''
            while n<pos+t_len:
                onechar=unichr(struct.unpack('H',fp.read(2))[0])
                t_val+=onechar
                n+=2
                fp.seek(n)
##            print t_val.encode('gbk',"replace")
            m+=1+t_len
            pos+=t_len
            fp.seek(pos,0)
##        print "chapter title len is "+str(ch_title_len)

        fp.seek(pos,0)
        t_tag=fp.read(1)
        content=u''
        while t_tag=='$':
            pos+=5
            fp.seek(pos,0)
            content_len=struct.unpack(GetPint(),fp.read(4))[0]-9
##            print "content_len is:"+str(content_len)
            #content_len=192450

            pos+=4
            fp.seek(pos,0)
            x=content_len/65535
            y=content_len%65535
            n=0
            zstr=''
            while n<x:
                xx=fp.read(65535)
                zstr+=xx
                pos+=65535
                fp.seek(pos,0)
                n+=1
            zstr+=fp.read(y)
            pos+=y
            z_len=zstr.__len__()
##            print "z_len is "+str(z_len)
            ystr=zlib.decompress(zstr)
            y_len=ystr.__len__()
##            print "y_len is "+str(y_len)
            ystr=ystr.replace('\x29\x20','\n\x00')
            content+=ystr.decode('utf-16','ignore')
##            sys.exit()
##            n=0
##            while n<y_len:
##                onechar=unichr(struct.unpack('H',ystr[n:n+2])[0])
##                if onechar==u'\u2029':
##                    onechar=u'\n'
##                content+=onechar
##                n+=2
            #print content.encode('GBK','replace')
            fp.seek(pos,0)
            t_tag=fp.read(1)
##            print t_tag
        #print content.encode('GBK','ignore')

        fp.seek(pos,0)
        if fp.read(1)=='#':
            pos+=1
            fp.seek(pos,0)
            m_tag=struct.unpack('H',fp.read(2))[0]
        else:
            m_tag=0

        while m_tag<>0xc:
            if m_tag==0xf1:
                pos+=20
            else:
                if m_tag==0xa:
                    pos+=4
                    fp.seek(pos,0)
                    R1=struct.unpack('I',fp.read(4))[0]
##                    print "Random-1 is "+str(hex(R1))
                    pos+=4
                else:
                    if m_tag==0x81:
                        pos+=8
                        fp.seek(pos,0)
##                        print fp.read(1)
                        pos+=5
                        fp.seek(pos,0)
                        page_count=struct.unpack('I',fp.read(4))[0]-9
                        pos+=page_count+4

                    else:
                        if m_tag==0x87:
                            pos+=15
                            fp.seek(pos,0)
                            offset_len=struct.unpack('I',fp.read(4))[0]-9
##                            print "offset_len is "+str(offset_len)
##                            i=0
                            pos+=4+offset_len
##                            fp.seek(pos,0)
##                            chapter_offset=[]
##                            while i<offset_len:
##                                chapter_offset.append(struct.unpack('I',fp.read(4))[0])
##                                i+=4
##                                fp.seek(pos+i,0)
##                            print "chapter offsets are:"
##                            print chapter_offset

                        else:
                            if m_tag==0x82:
                                pos+=14
                                fp.seek(pos,0)
                                cover_len=struct.unpack(GetPint(),fp.read(4))[0]-9
                                pos+=cover_len+4
                            else:
                                if m_tag==0xb:
                                    pos+=8
                                else:
                                    fp.seek(pos,0)
                                    t_tag=fp.read(1)
                                    while t_tag=='$':
                                         pos+=5
                                         fp.seek(pos,0)
                                         content_len=struct.unpack(GetPint(),fp.read(4))[0]-9
        ##                                 print "content_len is:"+str(content_len)
                                         pos+=4
                                         fp.seek(pos,0)
                                         x=content_len/65535
                                         y=content_len%65535
                                         n=0
                                         zstr=''
                                         while n<x:
                                             xx=fp.read(65535)
                                             zstr+=xx
                                             pos+=65535
                                             fp.seek(pos,0)
                                             n+=1
                                         zstr+=fp.read(y)
                                         pos+=y
                                         z_len=zstr.__len__()
        ##                                 print "z_len is "+str(z_len)
                                         ystr=zlib.decompress(zstr)
                                         y_len=ystr.__len__()
        ##                                 print "y_len is "+str(y_len)
                                         ystr=ystr.replace('\x29\x20','\n\x00')
                                         content+=ystr.decode('utf-16','ignore')
                                         fp.seek(pos,0)
                                         t_tag=fp.read(1)
        ##                                 print t_tag

                    #print content.encode('GBK','ignore')
            fp.seek(pos,0)
            xxx=fp.read(1)
            if xxx=='#':
                pos+=1
                fp.seek(pos,0)
                m_tag=struct.unpack('H',fp.read(2))[0]
            else:
                m_tag=0
##        print type(content)
        return ('Content',content,pos,True)

    return (field_type,field_value,m,False)





def umd_decode(infile):
    """This function will decode a umd file, and return a dict include all the fields"""
    umdinfo={}
    f=open(infile,'rb')
    bytes=f.read(4)
    tag=struct.unpack('cccc',bytes)
    if tag<>('\x89', '\x9b', '\x9a', '\xde'): return False # check if the file is the umd file
    f.seek(9)
    ftype=ord(f.read(1))
    if ftype<>0x1: return False #0x1 means txt,0x2 mean picture
    (u_type,u_value,pos,end)=umd_field_decode(f,13)
    umdinfo[u_type]=u_value
    i=1
    end=False
    while end<>True:
        (u_type,u_value,pos,end)=umd_field_decode(f,pos+1)
        umdinfo[u_type]=u_value

    return umdinfo


def HumanSize(fsize):
    """convert int to human readable file size"""
    if fsize>=1000000000:
        r=float(fsize)/1000000000.0
        return "{0:.2f}".format(r)+' GB'
    else:
        if fsize>=1000000:
            r=float(fsize)/1000000.0
            return "{0:.2f}".format(r)+' MB'
        else:
            if fsize>=1000:
                r=float(fsize)/1000.0
                return "{0:.2f}".format(r)+' KB'
            else:
                return '< 1KB'


def ch2num(ch):
    if not isinstance(ch,unicode):
        ch=ch.decode("gbk")
    chnum_str=u'(零|一|二|三|四|五|六|七|八|九|十|百|千|万|0|1|2|3|4|5|6|7|8|9)'
    ch_ten_str=u'(十|百|千|万)'
    ch_ten_dict={u'十':u'0',u'百':u'00',u'千':u'000',u'万':u'0000',}
    ch_dict={u'零':u'0',u'一':u'1',u'二':u'2',u'三':u'3',u'四':u'4',u'五':u'5',u'六':u'6',u'七':u'7',u'八':u'8',u'九':u'9',}
    p=re.compile(u'第'+chnum_str+u'+(章|节|部|卷)',re.L|re.U)
    m_list=p.finditer(ch)
#    mid_str=m.string[m.start():m.end()]
    rr=[]
    #print m_list
    for pr in m_list:
        mid_str=pr.string[pr.start():pr.end()]
        mid_str=mid_str[1:-1]
        if mid_str[0]==u'十':
            if len(mid_str)<>1:
                mid_str=mid_str.replace(u'十',u'1',1)
            else:
                rr.append(10)
                break
        if mid_str[-1:]==u'万':
            try:
                mid_str+=ch_ten_dict[mid_str[-2:-1]]+u'0000'
            except Exception as inst:
                mid_str+=u'0000'
        else:
            try:
                mid_str+=ch_ten_dict[mid_str[-1:]]
            except:
                pass
        p=re.compile(ch_ten_str,re.L|re.U)
        mid_str=p.sub('',mid_str)
        for key,val in ch_dict.items():
            mid_str=mid_str.replace(key,val)
        rr.append(long(mid_str))
    i=0
    x=0
    while i<len(rr):
       x+=rr[i]*math.pow(10,5*(3-i))
       i+=1
    return long(x)


class ZipFileDialog(wx.Dialog):
    """ZIP/RAR file list dialog, using TreeCtrl"""
    selected_files=[]
    openmethod='load'
    def __init__(self,parent,zipfilename):
        #begin wxGlade: ZipFileDialog.__init__
        #kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        self.file_icon_list={}
        self.selected_files=[]
        wx.Dialog.__init__(self, parent,-1,'')
        self.tree_ctrl_1 = wx.TreeCtrl(self, -1, style=wx.TR_HAS_BUTTONS|wx.TR_LINES_AT_ROOT|wx.TR_MULTIPLE|wx.TR_MULTIPLE|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.button_2 = wx.Button(self, -1, u"打开")
        self.button_3 = wx.Button(self, -1, u"取消")
        self.button_4 = wx.Button(self, -1, u"添加")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnOpen, self.tree_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.OnOpen, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnCancell, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OnAppend, self.button_4)
        # end wxGlade
        self.tree_ctrl_1.Bind(wx.EVT_CHAR,self.OnKey)
        self.Bind(wx.EVT_ACTIVATE,self.OnWinActive)
        root=self.tree_ctrl_1.AddRoot(zipfilename)
        self.tree_ctrl_1.SetItemImage(root,0,wx.TreeItemIcon_Normal)
        if os.path.splitext(zipfilename)[1].lower()== ".zip":
            zfile=zipfile.ZipFile(zipfilename)
            for zz in zfile.namelist():
                self.AddLeaf(zz,self.tree_ctrl_1)
            #self.AddTreeNodes(root,zfile.namelist())
        else:
            rfile=rarfile.RarFile(zipfilename)
            rarfile_list=[]
            for line in rfile.namelist():
                if rfile.getinfo(line).isdir():
                    line=line.decode('GBK')
                    line+=u"\\"
                rarfile_list.append(line.replace("\\","/"))
            #self.AddTreeNodes(root,rarfile_list)
            for rr in rarfile_list:
                self.AddLeaf(rr,self.tree_ctrl_1)
        self.image_list=wx.ImageList(16,16,mask=False,initialCount=5)
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\ClosedFolder.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["closedfolder"]=0
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\OpenFolder.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["openfolder"]=1
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\file.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["file"]=2
        self.tree_ctrl_1.SetImageList(self.image_list)





    def __set_properties(self):
        # begin wxGlade: ZipFileDialog.__set_properties
        self.SetTitle(u"打开压缩包中的文件")
        self.SetSize((400, 400))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ZipFileDialog.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
        sizer_6.Add((20, 20), 1, 0, 0)
        sizer_6.Add(self.button_4, 0, 0, 0)
        sizer_6.Add((20, 20), 1, 0, 0)
        sizer_6.Add(self.button_2, 0, 0, 0)
        sizer_6.Add((20, 20), 1, 0, 0)
        sizer_6.Add(self.button_3, 0, 0, 0)
        sizer_6.Add((20, 20), 1, 0, 0)
        sizer_5.Add(sizer_6, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        self.Layout()
        # end wxGlade


    def OnOpen(self, event): # wxGlade: ZipFileDialog.<event_handler>
        item_selected=self.tree_ctrl_1.GetSelections()
        for item in item_selected:
            if self.tree_ctrl_1.GetChildrenCount(item)==0:
                self.selected_files.append(self.tree_ctrl_1.GetPyData(item))
        if self.selected_files==[]:
            event.Skip()
            return False
        else:
            self.Destroy()


    def OnCancell(self, event): # wxGlade: ZipFileDialog.<event_handler>
        self.Destroy()

    def OnAppend(self, event): # wxGlade: ZipFileDialog.<event_handler>
        item_selected=self.tree_ctrl_1.GetSelections()
        for item in item_selected:
            full_name=''
            while item<>self.tree_ctrl_1.GetRootItem():
                full_name=self.tree_ctrl_1.GetItemText(item)+full_name
                item=self.tree_ctrl_1.GetItemParent(item)
                self.selected_files.append(full_name)
        self.openmethod='append'
        self.Destroy()



# end of class ZipFileDialog
#采用递归方式把每个条目加入树形控制
    def AddLeaf(self,tree_item,tree):
        try:
            tree_item=tree_item.decode("gbk")
        except:
            pass
        i_list=tree_item.split(u"/")
        field_count=len(i_list)
        m=1
        if i_list[len(i_list)-1]=='':
            i_list=i_list[:-1]
        rt=tree.GetRootItem()
        for i in i_list:
            item,cookie=tree.GetFirstChild(rt)
            found_r=False
            while item:
                if tree.GetItemText(item)==i:
                    rt=item
                    found_r=True
                    break
                else:
                    item,cookie=tree.GetNextChild(rt,cookie)
            if not found_r:
                child_id=tree.AppendItem(rt,i)
                if m<>field_count:
                    tree.SetItemImage(child_id,1,wx.TreeItemIcon_Normal)
                else:
                    tree.SetItemImage(child_id,2,wx.TreeItemIcon_Normal)
                    tree.SetPyData(child_id,tree_item)

                rt=child_id
            m+=1
        return



#AddTreeNodes has been replace by AddLeaf
##    def AddTreeNodes(self,parentItem,items):
##        mylist=[]
##        for item in items:
##            if item.find('/') == -1:
##                t_item=self.tree_ctrl_1.AppendItem(parentItem, item)
##                self.tree_ctrl_1.SetItemImage(t_item,2,wx.TreeItemIcon_Normal)
##                x=parentItem
##                ss=item
##                while x<>self.tree_ctrl_1.GetRootItem():
##                    ss=self.tree_ctrl_1.GetItemText(x)+ss
##                    x=self.tree_ctrl_1.GetItemParent(x)
##                self.tree_ctrl_1.SetPyData(t_item,ss)
##            else:
##                if item.count('/')==1 and item.rfind('/')+1==item.__len__():
##                    newItem = self.tree_ctrl_1.AppendItem(parentItem, item)
##                    self.tree_ctrl_1.SetItemImage(newItem,0,wx.TreeItemIcon_Normal)
##                    self.tree_ctrl_1.SetItemImage(newItem,1,wx.TreeItemIcon_Normal)
##                    for x in items:
##                        if str(type(x))=="<type 'str'>":
##                            x=x.decode('gbk')
##                        if str(type(item))=="<type 'str'>":
##                            item=item.decode('gbk')
##                        if x<>item and x.find(item)==0:
##                            x=x.replace(item,'',1)
##                            mylist.append(x)
##                    self.AddTreeNodes(newItem, mylist)

    def OnKey(self,event):
        key=event.GetKeyCode()
        if key==wx.WXK_ESCAPE:
            self.Destroy()
        else:
            event.Skip()


    def OnWinActive(self,event):
        if event.GetActive():self.tree_ctrl_1.SetFocus()


class MyFrame(wx.Frame,wx.lib.mixins.listctrl.ColumnSorterMixin):
    buff=u''
    currentTextAttr=wx.TextAttr()
    search_str=''
    search_flg=1
    last_search_pos=0
    showfullscr=False
    autoscroll=False
    Clock=True
    current_pos=0
    last_pos=0
    last_mouse_event=None
    UpdateSidebar=False
    slider=None
    SidebarPos=300 # inital postion value for dir sidebar
    Formated=False
    mousedelta=0
    func_list={
    u'向上翻行':'self.text_ctrl_1.ScrollLine(-1)',
    u'向下翻行':'self.text_ctrl_1.ScrollLine(1)',
    u'向上翻页':'self.text_ctrl_1.ScrollP(-1)',
    u'向下翻页':'self.text_ctrl_1.ScrollP(1)',
    u'跳到首页':'self.text_ctrl_1.ScrollTop()',
    u'跳到结尾':'self.text_ctrl_1.ScrollBottom()',
    u'文件列表':'self.Menu101(None)',
    u'打开文件':'self.Menu102(None)',
    u'另存为':'self.Menu108(None)',
    u'关闭':'self.Menu103(None)',
    u'上一个文件':'self.Menu104(None)',
    u'下一个文件':'self.Menu105(None)',
    u'搜索小说网站':'self.Menu110(None)',
    u'重新载入插件':'self.Menu111(None)',
    u'选项':'self.Menu106(None)',
    u'退出':'self.Menu107(None)',
    u'拷贝':'self.Menu202(None)',
    u'查找':'self.Menu203(None)',
    u'查找下一个':'self.Menu204(None)',
    u'查找上一个':'self.Menu205(None)',
    u'纸张显示模式':'self.Menu601(None)',
    u'书本显示模式':'self.Menu602(None)',
    u'竖排书本显示模式':'self.Menu603(None)',
    u'显示工具栏':'self.Menu501(None)',
    u'全屏显示':'self.Menu503(None)',
    u'显示文件侧边栏':'self.Menu502(None)',
    u'自动翻页':'self.Menu505(None)',
    u'智能分段':'self.Tool44(None)',
    u'添加到收藏夹':'self.Menu301(None)',
    u'整理收藏夹':'self.Menu302(None)',
    u'简明帮助':'self.Menu401(None)',
    u'版本更新内容':'self.Menu404(None)',
    u'检查更新':'self.Menu403(None)',
    u'关于':'self.Menu402(None)',
    u'过滤HTML标记':'self.Tool41(None)',
    u'切换为简体字':'self.Tool42(None)',
    u'切换为繁体字':'self.Tool43(None)',
    u'显示进度条':'self.ShowSlider()'
    }
    def __init__(self,parent,openfile=None):
        global GlobalConfig
        self.buff=u''
        self.currentLine=0
        self.toolbar_visable=True
        self.FileHistoryDiag=None
        self.cnsort=cnsort()

        # begin wxGlade: MyFrame.__init__
        #kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self,parent,-1)
        #display the splash
        bitmap = wx.Bitmap(GlobalConfig['IconDir']+"\\l2_splash.gif", wx.BITMAP_TYPE_ANY)
        splash_frame = wx.SplashScreen(bitmap,wx.SPLASH_NO_TIMEOUT |wx.SPLASH_CENTRE_ON_SCREEN,3000,parent=self )


        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.list_ctrl_1 = wx.ListCtrl(self.window_1_pane_1, -1, style=wx.LC_REPORT)
        self.text_ctrl_1 = liteview.LiteView(self.window_1_pane_2)

        #load apperance


        if GlobalConfig['backgroundimg']<>'' and GlobalConfig['backgroundimg']<>'None' and GlobalConfig['backgroundimg']<>None:
            self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
            self.text_ctrl_1.SetImgBackground(GlobalConfig['backgroundimg'],GlobalConfig['backgroundimglayout'])
        else:
            self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
        self.text_ctrl_1.SetFColor(GlobalConfig['CurFColor'])
        self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
        self.text_ctrl_1.SetUnderline(GlobalConfig['underline'],GlobalConfig['underlinestyle'],GlobalConfig['underlinecolor'])
        self.text_ctrl_1.SetSpace(GlobalConfig['pagemargin'],GlobalConfig['bookmargin'],GlobalConfig['vbookmargin'],GlobalConfig['centralmargin'],GlobalConfig['linespace'],GlobalConfig['vlinespace'])







        self.text_ctrl_2 = wx.TextCtrl(self.window_1_pane_1, -1, "",style=wx.TE_PROCESS_TAB|wx.TE_PROCESS_ENTER)


        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(101, u"文件列表(&L)"+KeyMenuList[u'文件列表'], u"打开文件列表", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(102, u"打开文件(&O)"+KeyMenuList[u'打开文件'], u"打开文件", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(108, u"另存为...(&S)"+KeyMenuList[u'另存为'], u"打开文件", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(103, u"关闭(&C)"+KeyMenuList[u'关闭'], u"关闭当前文件", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(104, u"上一个文件(&P)"+KeyMenuList[u'上一个文件'], u"打开上一个文件", wx.ITEM_NORMAL)
        wxglade_tmp_menu_sub.Append(105, u"下一个文件(&N)"+KeyMenuList[u'下一个文件'], u"打开下一个文件", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendMenu(wx.NewId(), u"按文件序号顺序打开", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu_sub = wx.Menu()
        i=1000
        self.mymenu=wxglade_tmp_menu

        for f in OpenedFileList:
            i+=1
            f['MenuID']=i
            if f['type']=='normal':wxglade_tmp_menu_sub.Append(i,f['file'],f['file'],wx.ITEM_NORMAL)
            else:wxglade_tmp_menu_sub.Append(i,f['zfile']+u'|'+f['file'],f['file'],wx.ITEM_NORMAL)
            self.Bind(wx.EVT_MENU, self.OpenLastFile, id=i)
        self.LastFileMenu=wxglade_tmp_menu_sub
        wxglade_tmp_menu.AppendMenu(wx.NewId(), u"曾经打开的文件", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.Append(109, u"以往打开文件历史", u"显示曾经打开的所有文件列表", wx.ITEM_NORMAL)

        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(110, u"搜索小说网站(&S)"+KeyMenuList[u'搜索小说网站'], u"搜索小说网站", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(111, u"重新载入插件"+KeyMenuList[u'重新载入插件'], u"重新载入插件", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()

        wxglade_tmp_menu.Append(106, u"选项(&O)"+KeyMenuList[u'选项'], u"程序的设置选项", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(107, u"退出(&X)"+KeyMenuList[u'退出'], u"退出本程序", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, u"文件(&F)")
        wxglade_tmp_menu = wx.Menu()

        #wxglade_tmp_menu.Append(201, u"全选(&A)\tCtrl+A", u"选择全部内容", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(202, u"拷贝(&C)"+KeyMenuList[u'拷贝'], u"将选中的内容拷贝到剪贴板", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(203, u"查找(&S)"+KeyMenuList[u'查找'], u"在打开的文件中查找", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(204, u"查找下一个(&N)"+KeyMenuList[u'查找下一个'], u"查找下一个", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(205, u"查找上一个(&N)"+KeyMenuList[u'查找上一个'], u"查找上一个", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, u"查找(&S)")
        wxglade_tmp_menu = wx.Menu()
        self.ViewMenu=wxglade_tmp_menu
        wxglade_tmp_menu.AppendRadioItem(601,u'纸张显示模式'+KeyMenuList[u'纸张显示模式'],u'设置当前显示模式为纸张')
        wxglade_tmp_menu.AppendRadioItem(602,u'书本显示模式'+KeyMenuList[u'书本显示模式'],u'设置当前显示模式为书本')
        wxglade_tmp_menu.AppendRadioItem(603,u'竖排书本显示模式'+KeyMenuList[u'竖排书本显示模式'],u'设置当前显示模式为竖排书本')
        wxglade_tmp_menu.AppendSeparator()

        wxglade_tmp_menu.Append(501, u"显示工具栏"+KeyMenuList[u'显示工具栏'], u"是否显示工具栏", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(503, u"全屏显示"+KeyMenuList[u'全屏显示'], u"全屏显示", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(502, u"显示文件侧边栏"+KeyMenuList[u'显示文件侧边栏'], u"是否显示文件侧边栏", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(505, u"自动翻页"+KeyMenuList[u'自动翻页'], u"是否自动翻页", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(506, u"显示进度条"+KeyMenuList[u'显示进度条'], u"显示进度条", wx.ITEM_NORMAL)
        if not GlobalConfig['HideToolbar']:
            self.toolbar_visable=True
            wxglade_tmp_menu.Check(501,True)
        else:
            self.toolbar_visable=False
        self.SidebarMenu=wxglade_tmp_menu
        wxglade_tmp_menu.Append(504, u"智能分段"+KeyMenuList[u'智能分段'], u"智能分段", wx.ITEM_CHECK)
        self.FormatMenu=wxglade_tmp_menu
        self.frame_1_menubar.Append(wxglade_tmp_menu, u"视图")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(301, u"添加到收藏夹(&A)"+KeyMenuList[u'添加到收藏夹'], u"将当前阅读位置添加到收藏夹", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(302, u"整理收藏夹(&M)"+KeyMenuList[u'整理收藏夹'], u"整理收藏夹", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, u"收藏(&V)")

        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(701, u"过滤HTML标签"+KeyMenuList[u'过滤HTML标记'], u"过滤HTML标签", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(702, u"简体转繁体"+KeyMenuList[u'切换为繁体字'], u"简体转繁体", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(703, u"繁体转简体"+KeyMenuList[u'切换为简体字'], u"繁体转简体", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, u"工具(&T)")



        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(401, u"简明帮助(&B)"+KeyMenuList[u'简明帮助'], u"简明帮助", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(404, u"版本更新内容"+KeyMenuList[u'版本更新内容'], u"版本更新内容", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(403, u"检查更新(&C)"+KeyMenuList[u'检查更新'], u"在线检查是否有更新的版本", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(402, u"关于(&A)"+KeyMenuList[u'关于'], u"关于本程序", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, u"帮助(&H)")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(4, 0)

        # Tool Bar

        self.frame_1_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_FLAT|wx.TB_3DBUTTONS)
        self.SetToolBar(self.frame_1_toolbar)
        self.frame_1_toolbar.AddLabelTool(110, u"搜索并下载", wx.Bitmap(GlobalConfig['IconDir']+u"\\network-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"搜索并下载", u"搜索并下载")
        self.frame_1_toolbar.AddCheckLabelTool(52, u"打开文件侧边栏",wx.Bitmap(GlobalConfig['IconDir']+u"\\DirSideBar.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, u"打开文件侧边栏", u"打开文件侧边栏")
        self.frame_1_toolbar.AddLabelTool(11, u"打开", wx.Bitmap(GlobalConfig['IconDir']+u"\\file-open-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"打开文件", u"打开文件列表")
        self.frame_1_toolbar.AddLabelTool(13, u"关闭", wx.Bitmap(GlobalConfig['IconDir']+u"\\file-close-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"关闭文件", u"关闭文件")
        self.frame_1_toolbar.AddLabelTool(18, u"另存为", wx.Bitmap(GlobalConfig['IconDir']+u"\\savefile-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"另存为", u"另存为")
        self.frame_1_toolbar.AddLabelTool(16, u"选项", wx.Bitmap(GlobalConfig['IconDir']+u"\\option-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"选项", u"选项")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(15, u"下一个", wx.Bitmap(GlobalConfig['IconDir']+u"\\next-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"下一个文件", u"下一个文件")
        self.frame_1_toolbar.AddLabelTool(14, u"上一个", wx.Bitmap(GlobalConfig['IconDir']+u"\\previous-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"上一个文件", u"上一个文件")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddRadioLabelTool(61,u'纸张显示模式',wx.Bitmap(GlobalConfig['IconDir']+u"\\paper.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap,u'纸张显示模式',u'纸张显示模式')
        self.frame_1_toolbar.AddRadioLabelTool(62,u'书本显示模式',wx.Bitmap(GlobalConfig['IconDir']+u"\\openbook.jpg", wx.BITMAP_TYPE_ANY), wx.NullBitmap,u'书本显示模式',u'书本显示模式')
        self.frame_1_toolbar.AddRadioLabelTool(63,u'竖排书本显示模式',wx.Bitmap(GlobalConfig['IconDir']+u"\\vbook.jpg", wx.BITMAP_TYPE_ANY), wx.NullBitmap,u'竖排书本显示模式',u'竖排书本显示模式')
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(23, u"查找", wx.Bitmap(GlobalConfig['IconDir']+u"\\search-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"搜索", u"搜索")
        self.frame_1_toolbar.AddLabelTool(24, u"查找下一个", wx.Bitmap(GlobalConfig['IconDir']+u"\\search-next-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"搜索下一个", u"搜索下一个")
        self.frame_1_toolbar.AddLabelTool(25, u"查找上一个", wx.Bitmap(GlobalConfig['IconDir']+u"\\search-previous-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"搜索上一个", u"搜索上一个")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(31, u"加入收藏夹", wx.Bitmap(GlobalConfig['IconDir']+u"\\bookmark-add-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"将当前阅读位置加入收藏夹", u"将当前阅读位置加入收藏夹")
        self.frame_1_toolbar.AddLabelTool(32, u"收藏夹", wx.Bitmap(GlobalConfig['IconDir']+u"\\bookmark-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"打开收藏夹", u"打开收藏夹")
        self.frame_1_toolbar.AddSeparator()
        self.FormatTool=self.frame_1_toolbar.AddCheckLabelTool(44, u"智能分段", wx.Bitmap(GlobalConfig['IconDir']+u"\\format-32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, u"智能分段", u"智能分段")
        self.frame_1_toolbar.AddLabelTool(41, "HTML", wx.Bitmap(GlobalConfig['IconDir']+u"\\html--32x32.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"过滤HTML标记", u"过滤HTML标记")
        self.frame_1_toolbar.AddLabelTool(42, u"切换为简体字", wx.Bitmap(GlobalConfig['IconDir']+u"\\jian.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"切换为简体字", u"切换为简体字")
        self.frame_1_toolbar.AddLabelTool(43, u"切换为繁体字", wx.Bitmap(GlobalConfig['IconDir']+u"\\fan.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"切换为繁体字", u"切换为繁体字")
        self.frame_1_toolbar.AddSeparator()
        self.sliderControl=wx.Slider(self.frame_1_toolbar, -1, 0, 0, 100,style=wx.SL_LABELS)
        self.frame_1_toolbar.AddControl(self.sliderControl)
        self.sliderControl.Bind(wx.EVT_SCROLL,self.OnSScroll)

        # Tool Bar end
        #self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_RICH2)

        #self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT) # add ListBox for Directory sidebar



        self.Bind(wx.EVT_MENU, self.Menu101, id=101)
        self.Bind(wx.EVT_MENU, self.Menu102, id=102)
        self.Bind(wx.EVT_MENU, self.Menu103, id=103)
        self.Bind(wx.EVT_MENU, self.Menu104, id=104)
        self.Bind(wx.EVT_MENU, self.Menu105, id=105)
        self.Bind(wx.EVT_MENU, self.Menu106, id=106)
        self.Bind(wx.EVT_MENU, self.Menu107, id=107)
        self.Bind(wx.EVT_MENU, self.Menu108, id=108)
        self.Bind(wx.EVT_MENU, self.Menu109, id=109)
        self.Bind(wx.EVT_MENU, self.Menu110, id=110)
        self.Bind(wx.EVT_MENU, self.Menu111, id=111)
        #self.Bind(wx.EVT_MENU, self.Menu201, id=201)
        self.Bind(wx.EVT_MENU, self.Menu202, id=202)
        self.Bind(wx.EVT_MENU, self.Menu203, id=203)
        self.Bind(wx.EVT_MENU, self.Menu204, id=204)
        self.Bind(wx.EVT_MENU, self.Menu205, id=205)
        self.Bind(wx.EVT_MENU, self.Menu301, id=301)
        self.Bind(wx.EVT_MENU, self.Menu302, id=302)
        self.Bind(wx.EVT_MENU, self.Menu401, id=401)
        self.Bind(wx.EVT_MENU, self.Menu402, id=402)
        self.Bind(wx.EVT_MENU, self.Menu403, id=403)
        self.Bind(wx.EVT_MENU, self.Menu404, id=404)
        self.Bind(wx.EVT_MENU, self.Menu501, id=501)
        self.Bind(wx.EVT_MENU, self.Menu502, id=502) # bind the sidebar menu to menu502()
        self.Bind(wx.EVT_MENU, self.Menu503, id=503)
        self.Bind(wx.EVT_MENU, self.Menu505, id=505)
        self.Bind(wx.EVT_MENU, self.ShowSlider, id=506)
        self.Bind(wx.EVT_MENU, self.Menu601, id=601)
        self.Bind(wx.EVT_MENU, self.Menu602, id=602)
        self.Bind(wx.EVT_MENU, self.Menu603, id=603)
        self.Bind(wx.EVT_MENU, self.Tool41, id=701)
        self.Bind(wx.EVT_MENU, self.Tool43, id=702)
        self.Bind(wx.EVT_MENU, self.Tool42, id=703)

        self.Bind(wx.EVT_MENU, self.Tool44, id=504)
        self.Bind(wx.EVT_TOOL, self.Menu110, id=110)
        self.Bind(wx.EVT_TOOL, self.Menu101, id=11)
        self.Bind(wx.EVT_TOOL, self.Menu103, id=13)
        self.Bind(wx.EVT_TOOL, self.Menu106, id=16)
        self.Bind(wx.EVT_TOOL, self.Menu105, id=15)
        self.Bind(wx.EVT_TOOL, self.Menu104, id=14)
        self.Bind(wx.EVT_TOOL, self.Menu108, id=18)
        self.Bind(wx.EVT_TOOL, self.Menu203, id=23)
        self.Bind(wx.EVT_TOOL, self.Menu204, id=24)
        self.Bind(wx.EVT_TOOL, self.Menu205, id=25)
        self.Bind(wx.EVT_TOOL, self.Menu301, id=31)
        self.Bind(wx.EVT_TOOL, self.Menu302, id=32)
        self.Bind(wx.EVT_TOOL, self.Tool41, id=41)
        self.Bind(wx.EVT_TOOL, self.Tool42, id=42)
        self.Bind(wx.EVT_TOOL, self.Tool43, id=43)
        self.Bind(wx.EVT_TOOL, self.Tool44, id=44)
        self.Bind(wx.EVT_TOOL, self.Menu601, id=61)
        self.Bind(wx.EVT_TOOL, self.Menu602, id=62)
        self.Bind(wx.EVT_TOOL, self.Menu603, id=63)
        # end wxGlade
        self.Bind(wx.EVT_TOOL, self.Menu502, id=52)
        self.text_ctrl_1.Bind(wx.EVT_CHAR,self.OnChar)
        self.text_ctrl_2.Bind(wx.EVT_CHAR,self.OnChar3)
        self.list_ctrl_1.Bind(wx.EVT_CHAR,self.OnChar2)
        #self.list_ctrl_1.Bind(wx.EVT_KEY_UP,self.OnCloseSiderbar)
        #self.text_ctrl_2.Bind(wx.EVT_KEY_UP,self.OnCloseSiderbar)
        #self.text_ctrl_2.Bind(wx.EVT_KILL_FOCUS,self.CloseSidebar)
        #self.list_ctrl_1.Bind(wx.EVT_KILL_FOCUS,self.CloseSidebar)


        self.Bind(wx.EVT_FIND, self.OnFind)
        self.Bind(wx.EVT_FIND_NEXT, self.OnFind)
        self.Bind(wx.EVT_FIND_CLOSE, self.OnFindClose)
        self.Bind(wx.EVT_CLOSE,self.OnClose)
        self.Bind(wx.EVT_ACTIVATE,self.OnWinActive)
        self.Bind(EVT_UPDATE_STATUSBAR,self.UpdateStatusBar)
        self.Bind(EVT_ReadTimeAlert,self.ReadTimeAlert)
        self.Bind(EVT_DFA,self.DownloadFinished)
        self.Bind(EVT_DUA,self.UpdateStatusBar)
        self.Bind(EVT_ScrollDownPage,self.scrolldownpage)
        self.Bind(EVT_GetPos,self.getPos)
        self.Bind(EVT_VerCheck,self.DisplayVerCheck)
        self.Bind(wx.EVT_SPLITTER_DCLICK,self.OnSplitterDClick,self.window_1)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected,self.list_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_CHAR,self.OnDirChar)
        self.text_ctrl_1.Bind(wx.EVT_MIDDLE_DCLICK,self.MyMouseMDC)
        self.text_ctrl_1.Bind(wx.EVT_RIGHT_UP,self.MyMouseRU)
        self.text_ctrl_1.Bind(wx.EVT_LEFT_DCLICK,self.MyMouseLDC)
        self.text_ctrl_1.Bind(wx.EVT_RIGHT_DCLICK,self.MyMouseRDC)
        self.text_ctrl_1.Bind(wx.EVT_MOUSEWHEEL,self.MyMouseMW)
        self.text_ctrl_1.Bind(wx.EVT_MIDDLE_DOWN,self.MyMouseMDW)
        self.Bind(wx.EVT_SIZE,self.onSize)
        self.Bind(wx.EVT_TEXT,self.SearchSidebar,self.text_ctrl_2)

        #register ESC as system hotkey
        if GlobalConfig['EnableESC']:
            self.RegisterHotKey(1,0,wx.WXK_ESCAPE)
            self.Bind(wx.EVT_HOTKEY,self.OnESC)

        # load last opened file
        if openfile<>None:
            openfile=openfile.decode('GBK')
            self.LoadFile([openfile])
        else:
            if GlobalConfig['LoadLastFile']==True:
                flist=[]
                if GlobalConfig['LastFile'].find('*')==-1: # if there is only one last opened file
                    flist.append(GlobalConfig['LastFile'])
                    if GlobalConfig['LastZipFile']=='':
                        if flist[0].strip()<>'':self.LoadFile(flist,pos=GlobalConfig['LastPos'])
                    else:
                        if flist[0].strip()<>'':self.LoadFile(flist,'zip',GlobalConfig['LastZipFile'],pos=GlobalConfig['LastPos'])
                else: # if there are multiple last opened files
                    for f in GlobalConfig['LastFile'].split('*'):
                        flist=[]
                        if f.find('|')==-1:
                            flist.append(f)
                            self.LoadFile(flist,openmethod='append')
                        else:
                            flist.append(f.split('|')[1])
                            self.LoadFile(flist,'zip',f.split('|')[0].strip(),openmethod='append')
                    self.text_ctrl_1.SetSelection(GlobalConfig['LastPos'],GlobalConfig['LastPos'])
                    self.text_ctrl_1.ShowPosition(GlobalConfig['LastPos'])

        #Start Clocking
        self.clk_thread=ClockThread(self)
##
        #max the window
        self.Maximize(True)


        #
        modes={'paper':601,'book':602,'vbook':603}
        tmodes={'paper':61,'book':62,'vbook':63}
        self.ViewMenu.Check(modes[self.text_ctrl_1.show_mode],True)
        self.frame_1_toolbar.ToggleTool(tmodes[self.text_ctrl_1.show_mode],True)


       #start the display pos thread
        self.display_pos_thread=DisplayPosThread(self)

        #start auto counting thread
        self.auto_count_thread=AutoCountThread(self)



        #start assign images of sidebar
        self.PvFrame=PreviewFrame(self,-1)
        self.image_list=wx.ImageList(16,16,mask=False,initialCount=5)
        self.file_icon_list={}
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\folder.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["folder"]=0
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\txtfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["txtfile"]=1
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\zipfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["zipfile"]=2
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\htmlfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["htmlfile"]=3
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\rarfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["rarfile"]=4
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\file.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["file"]=5
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\jar.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["jarfile"]=6
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\umd.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["umdfile"]=7
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\up.png",wx.BITMAP_TYPE_ANY)
        self.up=self.image_list.Add(bmp)
        self.file_icon_list["up"]=8
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\down.png",wx.BITMAP_TYPE_ANY)
        self.dn=self.image_list.Add(bmp)
        self.file_icon_list["down"]=9
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\Driver.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["driver"]=10
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\epub.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["epub"]=11


        self.list_ctrl_1.AssignImageList(self.image_list,wx.IMAGE_LIST_SMALL)
        self.list_ctrl_1.InsertColumn(0,u'文件名',width=400)
#        self.list_ctrl_1.InsertColumn(1,u'长度')
#        self.list_ctrl_1.InsertColumn(2,u'日期',width=120)
#        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected,self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnItemActive, self.list_ctrl_1)
        self.itemDataMap={}
        wx.lib.mixins.listctrl.ColumnSorterMixin.__init__(self,3)
        self.LastDir=''

        #if enabled, check version update
        if GlobalConfig['VerCheckOnStartup']:
            self.version_check_thread=VersionCheckThread(self,False)


        self.list_ctrl_1.Bind(wx.EVT_SET_FOCUS, self.ListOnFocus)




        self.__set_properties()
        self.__do_layout()
        #close splash window
        splash_frame.Close()

        #set show mode, this has to be here, otherwise system won't load if showmode is book or vbook
        self.text_ctrl_1.SetShowMode(GlobalConfig['showmode'])
        mlist={'paper':601,'book':602,'vbook':603}
        tlist={'paper':61,'book':62,'vbook':63}
        self.ViewMenu.Check(mlist[GlobalConfig['showmode']],True)
        self.frame_1_toolbar.ToggleTool(tlist[GlobalConfig['showmode']],True)


##    def TextOnFocus(self,event):
##        self.text_ctrl_1.HideNativeCaret()
##        event.Skip()



    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap(GlobalConfig['IconDir']+u"\\litebook-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetTitle(u"轻巧看书 LiteBook")
        self.SetMinSize((320, 240))
        self.SetSize((640, 480))
        # statusbar fields
        self.frame_1_statusbar.SetStatusWidths([-2, -1,-1,-3])
        frame_1_statusbar_fields = ["ready."]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.frame_1_toolbar.SetToolBitmapSize((32, 32))
        self.frame_1_toolbar.SetToolSeparation(5)
        self.frame_1_toolbar.Realize()

        # end wxGlade
        # load last appearance
##        if str(type(GlobalConfig['CurFont']))=="<class 'wx._gdi.Font'>":
##            self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
##        if GlobalConfig['CurFColor']<>'':
##            self.text_ctrl_1.SetForegroundColour(GlobalConfig['CurFColor'])
##        if GlobalConfig['CurBColor']<>'':
##            self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
  #      self.text_ctrl_1.Refresh()


    def __do_layout(self):
        global GlobalConfig
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        #Use splitwindow to add dir sidebar
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.text_ctrl_2, 0, wx.EXPAND, 0)
        sizer_2.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_2)
        sizer_3.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_3)
        #self.window_1.Initialize(self.window_1_pane_2)
        #self.window_1.UpdateSize()
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2,self.SidebarPos)
        self.window_1.Unsplit(self.window_1_pane_1)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)

        sizer_1.Fit(self)
        self.Layout()

        #Hide the toolbar if it is hidden when litebook exit last time
        if GlobalConfig['HideToolbar']:
            self.frame_1_toolbar.Hide()
            self.SetToolBar(None)
            self.Refresh()
            self.Layout()
        # end wxGlade

    def onSize(self, event):
        event.Skip()
        return

    def Menu101(self, event=None): # wxGlade: MyFrame.<event_handler>
        dlg=MyOpenFileDialog(self)
        dlg.ShowModal()
        if dlg.zip_file=='':
            if dlg.select_files<>[]:self.LoadFile(dlg.select_files,openmethod=dlg.open_method)
        else:
            self.LoadFile(dlg.select_files,'zip',dlg.zip_file,openmethod=dlg.open_method)
        dlg.Destroy()

    def Menu102(self, event): # wxGlade: MyFrame.<event_handler>
        global GlobalConfig
        wildcard = u"文本文件 (*.txt)|*.txt|"     \
           u"HTML文件 (*.htm;*.html)|*.htm;*.html|" \
           u"电子书 (*.umd;*.jar;*.epub)|*.umd;*.jar;*.epub|" \
           u"所有文件 (*.*)|*.*"
        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir=GlobalConfig['LastDir'],
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            flist=dlg.GetPaths()
            #GlobalConfig['LastDir']=os.path.split(flist[0])[0]
            self.LoadFile(flist)

        #event.Skip()

    def Menu103(self, event): # wxGlade: MyFrame.<event_handler>
        global current_file,OnScreenFileList
        if self.text_ctrl_1.GetValue()<>'':self.SaveBookDB()
        self.text_ctrl_1.Clear()
        self.buff=""
        current_file=''
        OnScreenFileList=[]
        self.frame_1_statusbar.SetStatusText('Ready.')

    def Menu104(self, event): # wxGlade: MyFrame.<event_handler>
        self.LoadNextFile(-1)

    def Menu105(self, event): # wxGlade: MyFrame.<event_handler>
        self.LoadNextFile(1)

    def Menu106(self, event): # wxGlade: MyFrame.<event_handler>
        option_dlg=NewOptionDialog(self)
        option_dlg.ShowModal()
        option_dlg.Destroy()
        self.text_ctrl_1.SetShowMode(GlobalConfig['showmode'])
        if GlobalConfig['backgroundimg']<>'' and GlobalConfig['backgroundimg']<>None:
            self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
            self.text_ctrl_1.SetImgBackground(GlobalConfig['backgroundimg'],GlobalConfig['backgroundimglayout'])
        else:
            self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
            self.text_ctrl_1.bg_img=None
        self.text_ctrl_1.SetFColor(GlobalConfig['CurFColor'])
        self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
        self.text_ctrl_1.SetUnderline(GlobalConfig['underline'],GlobalConfig['underlinestyle'],GlobalConfig['underlinecolor'])
        self.text_ctrl_1.SetSpace(GlobalConfig['pagemargin'],GlobalConfig['bookmargin'],GlobalConfig['vbookmargin'],GlobalConfig['centralmargin'],GlobalConfig['linespace'],GlobalConfig['vlinespace'])
        self.text_ctrl_1.ReDraw()
        modes={'paper':601,'book':602,'vbook':603}
        tmodes={'paper':61,'book':62,'vbook':63}
        self.ViewMenu.Check(modes[self.text_ctrl_1.show_mode],True)
        self.frame_1_toolbar.ToggleTool(tmodes[self.text_ctrl_1.show_mode],True)







    def Menu107(self, event): # wxGlade: MyFrame.<event_handler>
        self.Close()

    def Menu108(self, event): # wxGlade: MyFrame.<event_handler>
        global GlobalConfig
        wildcard = u"文本文件(UTF-8) (*.txt)|*.txt|"     \
           u"文本文件(GBK) (*.txt)|*.txt"
        dlg = wx.FileDialog(
            self, message=u"将当前文件另存为", defaultDir=GlobalConfig['LastDir'],
            defaultFile="", wildcard=wildcard, style=wx.SAVE | wx.FD_OVERWRITE_PROMPT
            )

        if dlg.ShowModal() == wx.ID_OK:
            savefilename=dlg.GetPath()
            if dlg.GetFilterIndex()==0:
                try:
                    fp=codecs.open(savefilename,encoding='utf-8',mode='w')
                    fp.write(self.text_ctrl_1.GetValue())
                    fp.close()
                except:
                    err_dlg = wx.MessageDialog(None, u'写入文件：'+fname+u' 错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                    err_dlg.ShowModal()
                    err_dlg.Destroy()
                    return False
            else:
                try:
                    fp=codecs.open(savefilename,encoding='GBK',mode='w')
                    ut=self.text_ctrl_1.GetValue().encode('GBK', 'ignore')
                    ut=unicode(ut, 'GBK', 'ignore')
                    fp.write(ut)
                    fp.close()
                except:
                    err_dlg = wx.MessageDialog(None, u'写入文件：'+savefilename+u' 错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                    err_dlg.ShowModal()
                    err_dlg.Destroy()
                    return False

        dlg.Destroy()



    def Menu109(self, event): # wxGlade: MyFrame.<event_handler>
        if self.FileHistoryDiag==None:self.FileHistoryDiag=FileHistoryDialog(self)
        #dlg=FileHistoryDialog(self)
        self.FileHistoryDiag.ShowModal()
        self.FileHistoryDiag.Hide()
    def Menu111(self,event):
        readPlugin()
    def Menu110(self,event):
        dlg=Search_Web_Dialog(self)
        dlg.ShowModal()
        try:
            sitename=dlg.sitename
        except:
            sitename=None
        if sitename<>None:
            keyword=dlg.keyword
            try:
                dlg.Destroy()
            except:
                pass
            dlg=web_search_result_dialog(self,sitename,keyword)
            dlg.ShowModal()
            #self.text_ctrl_1.SetValue(dlg.bk)
            try:
                dlg.Destroy()
            except:
                pass



##    def Menu201(self, event): # wxGlade: MyFrame.<event_handler>
##        self.text_ctrl_1.SetSelection(-1,-1)

    def Menu202(self, event): # wxGlade: MyFrame.<event_handler>
        self.text_ctrl_1.CopyText()

    def Menu203(self, event): # wxGlade: MyFrame.<event_handler>
        searchdata = wx.FindReplaceData()
        searchdata.SetFlags(1)
        searchdata.SetFindString(self.search_str)
        searchdlg = wx.FindReplaceDialog(self, searchdata, "Find",wx.FR_NOWHOLEWORD)
        searchdlg.data=searchdata
        searchdlg.Show(True)

    def Menu204(self, event): # wxGlade: MyFrame.<event_handler>
        self.search_flg=wx.FR_DOWN
        self.FindNext()

    def Menu205(self, event): # wxGlade: MyFrame.<event_handler>
        self.search_flg=0
        self.FindNext()

    def Menu301(self, event): # wxGlade: MyFrame.<event_handler>
        global OnScreenFileList,BookMarkList
        bookmark={}
        pos=self.GetCurrentPos()
        if self.text_ctrl_1.GetValue<>'':
            if OnScreenFileList.__len__()==1: # if there is only one current on_screen file
                if not load_zip or current_zip_file=='':
                    bookmark['filename']=current_file
                else:
                    bookmark['filename']=current_zip_file+u"|"+current_file
            else:
                tstr=u''
                for onscrfile in OnScreenFileList:
                    tstr+=onscrfile[0]+u'*'
                tstr=tstr[:-1]
                bookmark['filename']=tstr
            bookmark['pos']=pos
            bookmark['line']=self.text_ctrl_1.GetValue()[pos:pos+30].splitlines()[0]
            #print "line is ",bookmark['line']
            BookMarkList.append(bookmark)
            dlg = wx.MessageDialog(self, u'当前阅读位置已加入收藏夹！',u"提示！",wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()



    def Menu302(self, event): # wxGlade: MyFrame.<event_handler>
        bk_dlg=BookMarkDialog(self)
        bk_dlg.ShowModal()
        filename=bk_dlg.filename
        pos=bk_dlg.pos
        bk_dlg.Destroy()
        if filename<>'':self.LoadBookmark(filename,pos)

    def Menu401(self, event): # wxGlade: MyFrame.<event_handler>
        url="file://"+os.path.dirname(AnyToUnicode(sys.argv[0]))+'\\helpdoc\\index.htm'
        browser=webbrowser.get('windows-default')
        browser.open_new_tab(url)

    def Menu404(self, event): # wxGlade: MyFrame.<event_handler>
        url="file:///"+os.path.dirname(AnyToUnicode(sys.argv[0]))+'\\helpdoc\\scr\\version_history.htm'
##        url=url.replace('\\','/')
##        url="file:///"+url
##        print url
        #browser=webbrowser.get('windows-default')
        webbrowser.open_new_tab(url)

    def Menu402(self, event): # wxGlade: MyFrame.<event_handler>
        global Version
        # First we create and fill the info object
        info = wx.AboutDialogInfo()
        info.Name = u"轻巧看书(LiteBook)"
        info.Version = Version
        info.Copyright = "(C) 2011 Hu Jun"
        info.Description = u"轻巧看书，简单好用的看书软件！"

        info.WebSite = (u"http://code.google.com/p/litebook-project/", u"官方网站")

        #info.License = wordwrap(licenseText, 500, wx.ClientDC(self))

        # Then we call wx.AboutBox giving it that info object
        wx.AboutBox(info)

    def Menu403(self, event): # wxGlade: MyFrame.<event_handler>
        self.version_check_thread=VersionCheckThread(self)



    def Menu501(self, event):
        if self.toolbar_visable:
            self.frame_1_toolbar.Hide()
            self.SetToolBar(None)
            self.Refresh()
            self.Layout()
        else:
            self.frame_1_toolbar.Show()
            self.SetToolBar(self.frame_1_toolbar)
            self.Refresh()
            self.Layout()
        self.toolbar_visable = not self.toolbar_visable

    def CloseSidebar(self,evt=None):
        """Hide the directory sidebar"""
        if self.window_1.IsSplit():
            self.SidebarPos=self.window_1.GetSashPosition()
            self.PvFrame.Hide()
            self.window_1.Unsplit(self.window_1_pane_1)
            self.frame_1_toolbar.ToggleTool(52,False)
            self.SidebarMenu.Check(502,False)
            self.text_ctrl_1.SetFocus()

    def Menu502(self, event=None):
        """Show/Hide the directory sidebar"""
        if self.window_1.IsSplit():
            self.SidebarPos=self.window_1.GetSashPosition()
            self.PvFrame.Hide()
            self.window_1.Unsplit(self.window_1_pane_1)
            self.frame_1_toolbar.ToggleTool(52,False)
            self.SidebarMenu.Check(502,False)
            self.text_ctrl_1.SetFocus()
        else:
            self.DirSideBarReload()
            self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2,self.SidebarPos)
            self.frame_1_toolbar.ToggleTool(52,True)
            self.SidebarMenu.Check(502,True)
            self.list_ctrl_1.SetFocus()

    def Menu503(self, event):
        self.showfullscr=not self.showfullscr
        self.ShowFullScreen(self.showfullscr,wx.FULLSCREEN_ALL)
        if self.showfullscr:
            self.text_ctrl_1.Bind(wx.EVT_CONTEXT_MENU, self.ShowFullScrMenu)
        else:
            self.text_ctrl_1.Bind(wx.EVT_CONTEXT_MENU, None)

    def Menu505(self,event):

        self.autoscroll=not self.autoscroll

    def Menu601(self,event):
        global GlobalConfig
        self.text_ctrl_1.SetShowMode('paper')
        self.text_ctrl_1.ReDraw()
        self.ViewMenu.Check(601,True)
        self.frame_1_toolbar.ToggleTool(61,True)
        GlobalConfig['showmode']='paper'

    def Menu602(self,event):
        global GlobalConfig
        self.text_ctrl_1.SetShowMode('book')
        self.text_ctrl_1.ReDraw()
        self.ViewMenu.Check(602,True)
        self.frame_1_toolbar.ToggleTool(62,True)
        GlobalConfig['showmode']='book'

    def Menu603(self,event):
        global GlobalConfig
        self.text_ctrl_1.SetShowMode('vbook')
        self.text_ctrl_1.ReDraw()
        self.ViewMenu.Check(603,True)
        self.frame_1_toolbar.ToggleTool(63,True)
        GlobalConfig['showmode']='vbook'


    def ShowPopMenu(self,event):
        if not self.showfullscr:
            if not hasattr(self,"popupID_1"):
                self.popupID_1=wx.NewId()
                self.popupID_2=wx.NewId()
                self.popupID_3=wx.NewId()
                self.popupID_4=wx.NewId()
                self.popupID_5=wx.NewId()
                self.text_ctrl_1.Bind(wx.EVT_MENU, self.OnFullScrMenu, id=self.popupID1)
            menu = wx.Menu()
            item = wx.MenuItem(menu, self.popupID1,u"拷贝")
            menu.Append(self.popupID_2, u"全选")
            menu.Break()
            menu.Append(self.popupID_3,u"切换工具栏")
            menu.Append(self.popupID_4,u"切换全屏显示")
            menu.Append(self.popupID_5,u"切换文件侧边栏")
            menu.AppendItem(item)
            self.text_ctrl_1.PopupMenu(menu)
            menu.Destroy()
        else:
            event.Skip()

    def ShowFullScrMenu(self,event):
        if self.showfullscr:
            if not hasattr(self,"popupID1"):
                self.popupID1=wx.NewId()
                self.text_ctrl_1.Bind(wx.EVT_MENU, self.OnFullScrMenu, id=self.popupID1)
            menu = wx.Menu()
            item = wx.MenuItem(menu, self.popupID1,u"关闭全屏")
            menu.AppendItem(item)
            self.text_ctrl_1.PopupMenu(menu)
            menu.Destroy()
        else:
            event.Skip()

    def OnFullScrMenu(self,event):
        self.ShowFullScreen(False,wx.FULLSCREEN_ALL)
        self.text_ctrl_1.Bind(wx.EVT_CONTEXT_MENU, None)
        self.showfullscr=False
        self.ViewMenu.Check(503,False)


    def OnSScroll(self,evt):
        tval=self.sliderControl.GetValue()
        if tval<>100:
            tpos=int(float(self.text_ctrl_1.ValueCharCount)*(float(tval)/100.0))
            self.text_ctrl_1.JumpTo(tpos)
        else:
            self.text_ctrl_1.ScrollBottom()
        self.text_ctrl_1.SetFocus()


    def Tool41(self, event): # wxGlade: MyFrame.<event_handler>
        txt=self.text_ctrl_1.GetValue()
        txt=htm2txt(txt)
##        of=codecs.open(u'1.txt',encoding='gbk',mode='w')
##        of.write(txt)
##        of.close()
        self.text_ctrl_1.SetValue(txt)



    def Tool42(self, event): # wxGlade: MyFrame.<event_handler>
        txt=self.text_ctrl_1.GetValue()
        txt=txt.encode('utf-8')
        txt=FtoJ(txt)
        txt=txt.decode('utf-8')
        pos=self.GetCurrentPos()
        self.text_ctrl_1.SetValue(txt)
        self.text_ctrl_1.JumpTo(pos)

    def Tool43(self, event): # wxGlade: MyFrame.<event_handler>
        txt=self.text_ctrl_1.GetValue()
        txt=txt.encode('utf-8')
        txt=JtoF(txt)
        txt=txt.decode('utf-8')
        pos=self.GetCurrentPos()
        self.text_ctrl_1.SetValue(txt)
        self.text_ctrl_1.JumpTo(pos)

    def fenduan(self):  #HJ: auto optimize the paragraph layout
        self.BackupValue=self.text_ctrl_1.GetValue()
        istr=self.text_ctrl_1.GetValue()
        #convert more than 3 newlines in a row into one newline
        p=re.compile('([ \t\f\v]*\n){2,}',re.S)
        istr=p.sub("\n",istr)
        #find out how much words can current line hold
        mmm=self.text_ctrl_1.GetClientSizeTuple()
        f=self.text_ctrl_1.GetFont()
        dc=wx.WindowDC(self.text_ctrl_1)
        dc.SetFont(f)
        nnn,hhh=dc.GetTextExtent(u"国")
        line_capacity=mmm[0]/nnn
        #combile short-lines together
        p=re.compile(".*\n")
        line_list=p.findall(istr)
        i2=[]
        last_len=0
        #cc=0
        line_start=True
        for line in line_list:
            cur_len=len(line)
            if cur_len<line_capacity-2:
                if cur_len>last_len-3:
                    if not line_start:
                        line=line.strip()
                    else:
                        line=line.rstrip()
                        line_start=False
                    #line=line[:-1]
                    #cc+=1
                else:
                    line_start=True
            i2.append(line)
            last_len=cur_len
        self.text_ctrl_1.SetValue("".join(i2))



    def Tool44(self,event):
        if self.Formated:
            self.text_ctrl_1.SetValue(self.BackupValue)
            self.FormatMenu.Check(504,False)
            self.frame_1_toolbar.ToggleTool(44,False)
        else:
            self.fenduan()
            self.FormatMenu.Check(504,True)
            self.frame_1_toolbar.ToggleTool(44,True)
        self.Formated=not self.Formated

# end of class MyFrame



    def LoadFile(self, filepath,type='file',zipfilepath='',openmethod='load',pos=0):
        global GlobalConfig,current_file,current_file_list,current_zip_file,load_zip,OnScreenFileList,CurOnScreenFileIndex
        utext=u''
        ii=0#this is used increase randombility of LiteBook-ID
        if self.text_ctrl_1.GetValue()<>'':self.SaveBookDB()
        if openmethod=='load':
            self.buff=""
            OnScreenFileList=[]
        if type=='file':
            if os.path.isfile(filepath[0])==False: return False
            if filepath[0].strip()<>'':GlobalConfig['LastDir']=os.path.split(filepath[0])[0]
            else:
                return
            load_zip=False
            self.GenList('file')
            for eachfile in filepath:
                ii+=1
                if os.path.isfile(eachfile):
                    file_ext=os.path.splitext(eachfile)[1].lower()
                    if file_ext==".jar":
                        utext=jarfile_decode(eachfile)
                        if utext==False:
                            dlg = wx.MessageDialog(self, eachfile+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                            dlg.ShowModal()
                            dlg.Destroy()
                            return False
                        m=hashlib.md5()
                        eachfile=eachfile.encode('gbk')
                        if GlobalConfig['HashTitle']==False:
                            m.update(utext.encode('gbk','ignore'))
                        else:
                            m.update(os.path.split(eachfile)[1])
                        eachfile=eachfile.decode('gbk')
                        hashresult=m.hexdigest()
                        fsize=utext.__len__()
                    else:
                        if file_ext==".umd":
                            umdinfo=umd_decode(eachfile)
                            if umdinfo==False:
                                dlg = wx.MessageDialog(self, eachfile+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                                dlg.ShowModal()
                                dlg.Destroy()
                                return False
                            utext=umdinfo['Content']
                            m=hashlib.md5()
                            eachfile=eachfile.encode('gbk')
                            if GlobalConfig['HashTitle']==False:
                                m.update(utext.encode('gbk','ignore'))
                            else:
                                m.update(os.path.split(eachfile)[1])
                            eachfile=eachfile.decode('gbk')
                            hashresult=m.hexdigest()
                            fsize=utext.__len__()
                        else:
                            if file_ext==".epub":
                                utext=epubfile_decode(eachfile)
                                if utext==False:
                                    dlg = wx.MessageDialog(self, eachfile+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                                    dlg.ShowModal()
                                    dlg.Destroy()
                                    return False
                                m=hashlib.md5()
                                eachfile=eachfile.encode('gbk')
                                if GlobalConfig['HashTitle']==False:
                                    m.update(utext.encode('gbk','ignore'))
                                else:
                                    m.update(os.path.split(eachfile)[1])
                                eachfile=eachfile.decode('gbk')
                                hashresult=m.hexdigest()
                                fsize=utext.__len__()

                            else:
                                coding=DetectFileCoding(eachfile)
                                if coding=='error': return False
                                try:
                                    file_handler=open(eachfile,'rb')
                                    t_buff=file_handler.read()
                                except:
                                    dlg = wx.MessageDialog(self, eachfile+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                                    dlg.ShowModal()
                                    dlg.Destroy()
                                    return False
                                m=hashlib.md5()
                                if GlobalConfig['HashTitle']==False:
                                    m.update(t_buff)
                                else:
                                    eachfile=eachfile.encode('gbk')
                                    m.update(os.path.split(eachfile)[1])
                                    eachfile=eachfile.decode('gbk')
                                hashresult=m.hexdigest()
                                utext=AnyToUnicode(t_buff,coding)
                                fsize=utext.__len__()
                                if file_ext=='.htm' or file_ext=='.html':utext=htm2txt(utext)
                    id=utext.__len__()+ii
                    OnScreenFileList.append((eachfile,id,fsize,hashresult))
                    self.text_ctrl_1.Clear()
                    if self.buff<>'': self.buff+="\n\n"
                    self.buff+="--------------"+eachfile+"--------------LiteBook-ID:"+unicode(id)+u"\n\n"
                    self.buff+=utext
                    self.text_ctrl_1.SetValue(self.buff)
##                    GlobalConfig['CurFont'].SetPointSize(GlobalConfig['CurFont'].GetPointSize()+2)
##                    self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
##                    GlobalConfig['CurFont'].SetPointSize(GlobalConfig['CurFont'].GetPointSize()-2)
##                    self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
##                    self.text_ctrl_1.SetForegroundColour(GlobalConfig['CurFColor'])
##                    self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
##                    self.text_ctrl_1.Refresh()
##                    self.text_ctrl_1.Update()

                    UpdateOpenedFileList(eachfile,'normal')
                    self.UpdateLastFileMenu()
                    self.frame_1_statusbar.SetStatusText(os.path.split(eachfile)[1])
                    current_file=eachfile
                    current_zip_file=''




        else:
            if os.path.isfile(zipfilepath)==False: return False
            if type=='zip':
                if os.path.isfile(zipfilepath):
                    file_ext=os.path.splitext(zipfilepath)[1].lower()
                    if file_ext=='.zip':
                        load_zip=True
                        current_zip_file=zipfilepath
                        try:
                            if isinstance(zipfilepath, str):
                                zipfilepath=zipfilepath.deocde('gbk')
                            zfile=zipfile.ZipFile(zipfilepath)
                        except Exception as inst:
                            dlg = wx.MessageDialog(self, zipfilepath+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                            dlg.ShowModal()
                            dlg.Destroy()
                            return False
                        for eachfile in filepath:
                            ii+=1
                            each_ext=os.path.splitext(eachfile)[1].lower()
                            coding=DetectFileCoding(eachfile,'zip',zipfilepath)
                            if coding=='error': return False
                            try:
                                if isinstance(eachfile, unicode):
                                    eachfile=eachfile.encode('gbk')
                                file_handler=zfile.open(eachfile,'rU')
                                t_buff=file_handler.read()
                            except Exception as inst:

                                dlg = wx.MessageDialog(self, eachfile+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                                dlg.ShowModal()
                                dlg.Destroy()
                                return False
                            m=hashlib.md5()
                            if GlobalConfig['HashTitle']==False:
                                m.update(t_buff)
                            else:
                                m.update(os.path.split(eachfile)[1])
                            hashresult=m.hexdigest()


                            utext=AnyToUnicode(t_buff,coding)
                            fsize=utext.__len__()
                            if each_ext in ('.htm','.html'): utext=htm2txt(utext)

                            id=utext.__len__()+ii
                            OnScreenFileList.append((zipfilepath+u'|'+eachfile.decode('gbk'),id,fsize,hashresult))

                            self.text_ctrl_1.Clear()
                            if self.buff<>'': self.buff+="\n\n"
                            self.buff+=u"--------------"+zipfilepath+u' | '+eachfile.decode('gbk')+u"--------------LiteBook-ID:"+unicode(id)+u"\n\n"
                            self.buff+=utext
                            self.text_ctrl_1.SetValue(self.buff)
##                            GlobalConfig['CurFont'].SetPointSize(GlobalConfig['CurFont'].GetPointSize()+2)
##                            self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
##                            GlobalConfig['CurFont'].SetPointSize(GlobalConfig['CurFont'].GetPointSize()-2)
##                            self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
##                            self.text_ctrl_1.SetForegroundColour(GlobalConfig['CurFColor'])
##                            self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
##                            self.text_ctrl_1.Refresh()
##                            self.text_ctrl_1.Update()

                            UpdateOpenedFileList(eachfile.decode('gbk'),'zip',zipfilepath)
                            current_file=eachfile.decode('gbk')
                        self.GenList(zipfilepath)
                    else:
                        if file_ext=='.rar':
                            load_zip=True
                            current_zip_file=zipfilepath

                            for eachfile in filepath:
                                ii+=1
                                try:
                                    rfile=UnRAR2.RarFile(zipfilepath)
                                except:
                                    dlg = wx.MessageDialog(self, zipfilepath+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                                    dlg.ShowModal()
                                    dlg.Destroy()
                                    return False
                                each_ext=os.path.splitext(eachfile)[1].lower()
                                if isinstance(eachfile,unicode):
                                    eachfile=eachfile.encode('gbk')
                                coding=DetectFileCoding(eachfile,'rar',zipfilepath)
                                if coding=='error': return False
                                try:
                                    file_handler=rfile.read_files(eachfile)
                                except:
                                    dlg = wx.MessageDialog(self, eachfile+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                                    dlg.ShowModal()
                                    dlg.Destroy()
                                    return False
                                t_buff=file_handler[0][1]
                                m=hashlib.md5()
                                if GlobalConfig['HashTitle']==False:
                                    m.update(t_buff)
                                else:
                                    m.update(os.path.split(eachfile)[1])
                                hashresult=m.hexdigest()

                                utext=AnyToUnicode(t_buff,coding)
                                fsize=utext.__len__()
                                if each_ext in ('.htm','.html'): utext=htm2txt(utext)
                                id=utext.__len__()+ii
                                OnScreenFileList.append((zipfilepath+u'|'+eachfile.decode('gbk'),id,fsize,hashresult))

                                self.text_ctrl_1.Clear()
                                if self.buff<>'': self.buff+="\n\n"
                                self.buff+=u"--------------"+zipfilepath+u'|'+eachfile.decode('gbk')+u"--------------LiteBook-ID:"+unicode(id)+u"\n\n"
                                self.buff+=utext
                                self.text_ctrl_1.SetValue(self.buff)
##                                GlobalConfig['CurFont'].SetPointSize(GlobalConfig['CurFont'].GetPointSize()+2)
##                                self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
##                                GlobalConfig['CurFont'].SetPointSize(GlobalConfig['CurFont'].GetPointSize()-2)
##                                self.text_ctrl_1.SetFont(GlobalConfig['CurFont'])
##                                self.text_ctrl_1.SetForegroundColour(GlobalConfig['CurFColor'])
##                                self.text_ctrl_1.SetBackgroundColour(GlobalConfig['CurBColor'])
##                                self.text_ctrl_1.Refresh()
##                                self.text_ctrl_1.Update()

                                UpdateOpenedFileList(eachfile.decode('gbk'),'rar',zipfilepath)
                                current_file=eachfile.decode('gbk')
                            self.GenList(zipfilepath)

        tpos=0
        if pos<>0:
            tpos=pos
        else:
            if openmethod=='load':
                for bk in BookDB:
                    if bk['key']==unicode(hashresult):
                        tpos=bk['pos']
                        break

        if tpos<>0:self.text_ctrl_1.JumpTo(tpos)
        #Auto Format the paragraph if it is enabled
        if self.FormatMenu.IsChecked(504):
            self.fenduan()
            self.Formated=not self.Formated









    def LoadNextFile(self, next):
        global current_file,GlobalConfig,current_file_list,current_zip_file,load_zip
        load_file=[]
        if current_file=='' or current_file_list==[]:
            dlg = wx.MessageDialog(self, u'请先打开一个文件！',u"提示！",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return

        if str(type(current_file))=="<type 'str'>":
            try:
                current_file=unicode(current_file,'gbk')
            except:
                current_file=unicode(current_file,'big5')
        current_file_list=sorted(current_file_list,cmp=lambda x,y:cmp(ch2num(x),ch2num(y)))
        try:
            id=current_file_list.index(current_file)
        except:
            xf=current_file.replace("/","\\")
            id=current_file_list.index(xf)

        id+=next
        if id<0 or id>=current_file_list.__len__():
            dlg = wx.MessageDialog(self, u'到头了！',u"提示！",wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
        else:
            if not load_zip:
                load_file.append(current_file_list[id])
                self.LoadFile(load_file)
            else:
                load_file.append(current_file_list[id])
                self.LoadFile(load_file,'zip',current_zip_file)


    def GenList(self, zip):
        global current_file,GlobalConfig,current_file_list,current_zip_file,load_zip
        current_file_list=[]
        if zip=='file':
            flist=os.listdir(GlobalConfig['LastDir'])
            for eachfile in flist:

                cur_path=GlobalConfig['LastDir']+u"\\"+eachfile
                if not os.path.isdir(cur_path):
                    file_ext=os.path.splitext(cur_path)[1].lower()
                    if file_ext in ('.txt','.htm','.html','.umd','.jar'):
                        current_file_list.append(cur_path)
        else:
            prefix=os.path.dirname(current_file)
            cur_ext=os.path.splitext(zip)[1].lower()
            if cur_ext=='.zip':
                zfile=zipfile.ZipFile(zip)
                flist=zfile.namelist()
            else:
                if cur_ext=='.rar':
                    rfile=rarfile.RarFile(zip)
                    flist=rfile.namelist()
            for eachfile in flist:
                if os.path.split(eachfile)[1]<>'':
                    file_ext=os.path.splitext(eachfile)[1].lower()
                    if file_ext in ('.txt','.htm','.html'):
                        try:
                            utext=eachfile.decode('gbk')
                        except:
                            utext=eachfile.decode('big5')
                        myprefix=os.path.dirname(utext)
                        if myprefix==prefix or myprefix.replace("\\","/")==prefix:
                            current_file_list.append(utext)


    def ListOnFocus(self,event):
        if self.list_ctrl_1.GetSelectedItemCount()==0:
            self.list_ctrl_1.Select(self.list_ctrl_1.GetNextItem(-1))


    def OnChar3(self, event):
        global KeyConfigList
        key=event.GetKeyCode()
        if key==wx.WXK_RETURN or key==wx.WXK_TAB:
            self.list_ctrl_1.SetFocus()
##            self.list_ctrl_1.Select(self.list_ctrl_1.GetNextItem(-1))
        else:
            if key==wx.WXK_ESCAPE:
                self.Menu502(None)
            else:
                event.Skip()


##    def OnCloseSiderbar(self,evt):
##        global KeyConfigList
##        kstr=keygrid.key2str(evt)
##        for kconfig in KeyConfigList:
##            if kconfig[0]=='last':
##                break
##        i=1
##        tl=len(kconfig)
##        while i<tl:
##            if kconfig[i][0]==u'显示文件侧边栏':
##                break
##            i+=1
##        if kstr==kconfig[i][1]:
##            self.CloseSidebar()


    def OnChar2(self, event):
        key=event.GetKeyCode()
        if key==wx.WXK_TAB:
            self.text_ctrl_2.SetFocus()
        else:
            if key==wx.WXK_ESCAPE:
                self.Menu502(None)
            else:
                event.Skip()




    def OnChar(self,evt):
        global KeyConfigList
        keystr=keygrid.key2str(evt)
        for kconfig in KeyConfigList:
            if kconfig[0]=='last':
                break
        i=1
        tl=len(kconfig)
        while i<tl:
            if keystr==kconfig[i][1]:break
            i+=1
        if i>=tl:
            evt.Skip()
            return
        else:
            eval(self.func_list[kconfig[i][0]])

##    def OnChar(self, event):
##        usedKeys=(wx.WXK_HOME,wx.WXK_END,wx.WXK_PAGEDOWN,wx.WXK_PAGEUP,wx.WXK_LEFT,wx.WXK_SPACE,wx.WXK_RIGHT,15,70,72,74,wx.WXK_ESCAPE,wx.WXK_TAB,wx.WXK_RETURN)
##        CTRL=2
##        ALT=1
##        SHIFT=4
##        key=event.GetKeyCode()
##        Mod=event.GetModifiers()
##        if key == wx.WXK_PAGEDOWN or key==wx.WXK_SPACE:
##            self.text_ctrl_1.ScrollP(1)
##            return
##        if key==wx.WXK_RIGHT:
##            if Mod==0:
##                self.text_ctrl_1.ScrollP(1)
##                return
##            else:
##                if Mod==2:
##                    self.LoadNextFile(1)
##                    return
##        if key==wx.WXK_LEFT:
##            if Mod==0:
##                self.text_ctrl_1.ScrollP(-1)
##                return
##            else:
##                if Mod==2:
##                    self.LoadNextFile(-1)
##                    return
##        if key == wx.WXK_PAGEUP:
##            self.text_ctrl_1.ScrollP(-1)
##            return
##        if key == wx.WXK_HOME :
##            self.text_ctrl_1.ScrollTop()
##            return
##        if key == wx.WXK_END :
##            self.text_ctrl_1.ScrollBottom()
##            return
##        if key == 12: # Ctrl+L to pop up OnScreenFileList dialog
##           self.ChoseOnScreenFile()
##        if key == 15: # Ctrl+O to open files
##            self.Menu101(self)
####        if key==wx.WXK_ESCAPE:
####            self.Iconize()
##        if key==wx.WXK_RETURN:
##            self.autoscroll=not self.autoscroll
##        if key==72: #ALT+H, filter out HTML tag
##            self.Tool41(None)
##
##        if key==74: #ALT+J, Fan to Jian
##            self.Tool42(None)
##
##        if key==70: #ALT+F, Jian to Fan
##            self.Tool43(None)
##
##        if key not in usedKeys:
##            #print key
##            event.Skip()

    def OnFind(self, event):
        fstr=event.GetFindString()
        flag=event.GetFlags()
        fstr=fstr.strip()
        if fstr<>'':
            if fstr<>self.search_str:
                self.search_str=fstr
                pos=self.text_ctrl_1.Find(fstr)
            else:
                if flag&wx.FR_DOWN:
                    pos=self.text_ctrl_1.Find(fstr,self.last_search_pos+1)
                else:
                    pos=self.text_ctrl_1.GetValue().rfind(fstr,self.last_search_pos-1,-1)
            if pos==False:
                dlg = wx.MessageDialog(self, u'没有找到"'+fstr+u'"',u"查找失败！",wx.OK|wx.ICON_INFORMATION)
                dlg.ShowModal()
                dlg.Destroy()
            else:
##                self.text_ctrl_1.SetSelection(pos,pos+fstr.__len__())
##                self.text_ctrl_1.ShowPosition(pos)
                self.last_search_pos=pos
        self.search_str=fstr
        self.search_flg=flag
        event.GetDialog().Destroy()



    def OnFindClose(self, event):
        event.GetDialog().Destroy()

    def FindNext(self):
        if self.search_str=='': return
        if self.search_flg&wx.FR_DOWN:
            pos=self.text_ctrl_1.Find(self.search_str,self.last_search_pos+1)
        else:
            pos=self.text_ctrl_1.Find(self.search_str,self.last_search_pos-1,-1)
        if pos==False:
            dlg = wx.MessageDialog(self, u'没有找到"'+self.search_str+u'"',u"查找失败！",wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
##        self.text_ctrl_1.SetSelection(pos,pos+self.search_str.__len__())
##        self.text_ctrl_1.ShowPosition(pos)
        self.last_search_pos=pos

    def OpenLastFile(self, event):
        global OpenedFileList
        id=event.GetId()
        for f in OpenedFileList:
            if f['MenuID']==id:
                flist=[]
                flist.append(f['file'])
                if f['type']=='normal':
                    self.LoadFile(flist)
                else:
                    self.LoadFile(flist,'zip',f['zfile'])
                break

    def OnClose(self, event):
        global OnDirectSeenPage,GlobalConfig,writeKeyConfig,writeConfigFile
        SqlCon.close()
        self.clk_thread.stop()
        self.display_pos_thread.stop()
        self.auto_count_thread.stop()
        #time.sleep(1)
        GlobalConfig['CurFontData']=self.text_ctrl_1.GetFont()
        GlobalConfig['CurFColor']=self.text_ctrl_1.GetFColor()
        GlobalConfig['CurBColor']=self.text_ctrl_1.GetBackgroundColour()
        GlobalConfig['HideToolbar']=not self.toolbar_visable
        if OnDirectSeenPage:
            writeConfigFile(GlobalConfig['LastPos'])
        else:
            writeConfigFile(self.GetCurrentPos())
        writeKeyConfig()
        event.Skip()

    def GetCurrentPos(self):
        return self.text_ctrl_1.GetStartPos()


    def ChoseOnScreenFile(self):
        global OnScreenFileList
        fl=[]
        for f in OnScreenFileList:
           fl.append(f[0])
        dlg=wx.SingleChoiceDialog(
            self, u'当前已经打开的文件列表', u'选择当前已打开的文件',
            fl,
            wx.CHOICEDLG_STYLE
            )
        if dlg.ShowModal() == wx.ID_OK:
           selected=dlg.GetStringSelection()
           for f in OnScreenFileList:
               if f[0]==selected:
                   selected_id=f[1]
                   break
           pos=self.text_ctrl_1.GetValue().find(u"LiteBook-ID:"+unicode(selected_id))
           self.text_ctrl_1.ShowPosition(pos)
        dlg.Destroy()

    def LoadBookmark(self,filename,tpos):
        global OnScreenFileList
        self.text_ctrl_1.Clear()
        self.buff=""
        current_file=''
        OnScreenFileList=[]
        flist=[]
        if filename.find('*')==-1:
            if filename.find("|")==-1:
                flist.append(filename)
                self.LoadFile(flist,pos=tpos)
            else:
                (zfile,file)=filename.split("|")
                flist.append(file)
                self.LoadFile(flist,'zip',zfile,pos=tpos)
        else:
            for f in filename.split('*'):
                flist=[]
                if f.find('|')==-1:
                    flist.append(f)
                    self.LoadFile(flist,openmethod='append')
                else:
                    flist.append(f.split('|')[1])
                    self.LoadFile(flist,'zip',f.split('|')[0].strip(),openmethod='append')
            self.text_ctrl_1.SetSelection(tpos,tpos)
            self.text_ctrl_1.ShowPosition(tpos)


    def OnWinActive(self,event):
        global Ticking
        if event.GetActive():
            if self.window_1.IsSplit():
                self.list_ctrl_1.SetFocus()
            else:
                self.text_ctrl_1.SetFocus()
            Ticking=True
        else:
            Ticking=False
##        print "client size is:"
##        mmm=self.text_ctrl_1.GetClientSizeTuple()
##        print mmm
##        print "font size is:"
##        f=self.text_ctrl_1.GetFont()
##        dc=wx.WindowDC(self.text_ctrl_1)
##        dc.SetFont(f)
##        nnn,hhh=dc.GetTextExtent(u"我")
##        print nnn
##        print "That makes one line hold "
##        print mmm[0]/nnn






    def SaveBookDB(self):
        global OnScreenFileList,BookDB,OnDirectSeenPage,GlobalConfig
        pos=self.GetCurrentPos()
##        tsize=0
##        i=0
##        for f in OnScreenFileList:
##            tsize+=f[2]
##            if pos<tsize: break
##            i+=1
##        id=i-1
##        hash_id=OnScreenFileList[id][3]
##        i=0
##        tsize=0
##        while i<id:
##            pos-=OnScreenFileList[i][2]
        if OnScreenFileList.__len__()>1: return #if there is multiple on scrren file, the the pos will not be remembered
        try:
            hash_id=OnScreenFileList[0][3]
        except:
            return
        for bk in BookDB:
            if bk['key']==hash_id:
                if OnDirectSeenPage: GlobalConfig['LastPos']=pos
                bk['pos']=pos
                return
        BookDB.insert(0,{'key':hash_id,'pos':pos})
        if BookDB.__len__()>GlobalConfig['MaxBookDB']:
            BookDB.pop()




    def UpdateStatusBar(self,event):
        if event.FieldNum<>0:
            self.frame_1_statusbar.SetStatusText(event.Value,event.FieldNum)
        else:
            dc=wx.ClientDC(self.frame_1_statusbar)
            field=self.frame_1_statusbar.GetFieldRect(0)
            field_len=field[2]-field[0]
            txt=event.Value
            txt_len=dc.GetTextExtent(txt)[0]
            if txt_len>field_len:
                llist=dc.GetPartialTextExtents(txt)
                m=len(llist)
                i=m-1
                while i>=0:
                    if llist[i]<=field_len:
                        break
                    i-=1
                if i>=3:i-=3
                txt="..."+txt[-i:]
            self.frame_1_statusbar.SetStatusText(txt,0)
            pos=int(self.text_ctrl_1.GetPosPercent())
            self.sliderControl.SetValue(pos)




    def ReadTimeAlert(self,event):
        ttxt=u'现在是'+time.strftime("%H:%M:%S",time.localtime())+"\n"
        ttxt+=u'你已经连续阅读了'+event.ReadTime
        dlg = wx.MessageDialog(self, ttxt,u"友情提示！",wx.OK|wx.ICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()

    def scrolldownpage(self,event):
        self.text_ctrl_1.ScrollP(1)
        self.text_ctrl_1.ReDraw()

    def getPos(self,event):
        try:
            self.current_pos=self.GetCurrentPos()
            self.last_pos=self.text_ctrl_1.GetLastPosition()
        except:
            self.current_pos=0
            self.last_pos=0

    def MyMouseLDC(self,evt=None):
        self.text_ctrl_1.ScrollP(1)

    def MyMouseRDC(self,evt=None):
        self.text_ctrl_1.ScrollP(-1)


    def MyMouseMDC(self,event):
        self.last_mouse_event=1
        if event.RightIsDown():
            self.LoadNextFile(-1)
        else:
            self.LoadNextFile(1)
        event.Skip(False)
        event.StopPropagation()
        clickEvent = wx.CommandEvent(wx.wxEVT_COMMAND_LEFT_CLICK, self.text_ctrl_1.GetId())
        self.text_ctrl_1.ProcessEvent(clickEvent)


    def MyMouseRU(self,event):
        if self.last_mouse_event==1:
            self.last_mouse_event=0
            return
        else:
            event.Skip()

    def MyMouseMW(self,event):
        delta=event.GetWheelRotation()
        if delta>0:
            self.text_ctrl_1.ScrollLine(-1,1)
        elif delta<0:
            self.text_ctrl_1.ScrollLine(1,1)

    def MyMouseMDW(self,event):
        if self.last_mouse_event==1:
            self.last_mouse_event=0
            return
        else:
            event.Skip()
    def OnESC(self,event):
        if self.IsIconized():
            self.Iconize(False)
        else:
            self.Iconize()


    def DirSideBarReload(self):
        """"This function is to reload directory sidebar with GlobalConfig['LastDir']"""
        global GlobalConfig
        if GlobalConfig['LastDir']==self.LastDir and not self.UpdateSidebar: return
        else:
            self.UpdateSidebar=False
            if ((self.LastDir.__len__()>GlobalConfig['LastDir'].__len__() and not (self.LastDir=='ROOT' and GlobalConfig['LastDir'][1:]==u':\\')))or GlobalConfig['LastDir']==u'ROOT':
                RestorPos=True
                if GlobalConfig['LastDir']=='ROOT':
                    RestorPosName=self.LastDir
                else:
                    RestorPosName=self.LastDir.rsplit('\\',1)[1]
            else:
                RestorPos=False
            self.LastDir=GlobalConfig['LastDir']
        self.sideitemlist=[]
        sideitem={}
        newitem=wx.ListItem()
        newitem.SetText(GlobalConfig['LastDir'])
        self.list_ctrl_1.SetColumn(0,newitem)
        if GlobalConfig['LastDir']<>u'ROOT' and os.path.exists(GlobalConfig['LastDir']):
            current_ext=os.path.splitext(GlobalConfig['LastDir'])[1].lower()
            self.list_ctrl_1.DeleteAllItems()
            try:
                tlist=os.listdir(GlobalConfig['LastDir'])

            except:
                dlg = wx.MessageDialog(None, GlobalConfig['LastDir']+u' 目录打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,"..",self.file_icon_list['folder'])
#                Date_str=u""
#                self.list_ctrl_1.SetStringItem(index,2,Date_str)
                self.list_ctrl_1.SetItemData(index,index)
                self.itemDataMap[index]=('\x01'+u"..",)
                self.sideitemlist.append({'py':u'..','item':self.list_ctrl_1.GetItem(index)})
                self.window_1_pane_1.SetFocus()
                self.list_ctrl_1.SetFocus()
                self.list_ctrl_1.Focus(0)
                return
            file_list=[]
            for m in tlist:
                if not isinstance(m,unicode):
                    m=m.decode('gbk')
                file_list.append(m)
            file_list.sort(key=unicode.lower)
            i=0
            index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,"..",self.file_icon_list['folder'])
#            Date_str=u""
#            self.list_ctrl_1.SetStringItem(index,2,Date_str)
            self.list_ctrl_1.SetItemData(index,index)
            self.itemDataMap[index]=('\x01'+u"..",)
            self.sideitemlist.append({'py':u'..','item':self.list_ctrl_1.GetItem(index)})

            i=0
            RPos=0
            pure_file_list=[]
            for filename in file_list:

                current_path=GlobalConfig['LastDir']+u"\\"+filename
                if os.path.isdir(current_path)== True:
                    if RestorPos:
                        if filename==RestorPosName:
                            RPos=i
                    index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['folder'])
#                    Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.gmtime(os.path.getctime(current_path)))
#                    self.list_ctrl_1.SetStringItem(index,2,Date_str)
                    self.list_ctrl_1.SetItemData(index,index)
                    self.itemDataMap[index]=('\x01'+filename,)
                    self.sideitemlist.append({'py':self.cnsort.strToPYS(filename).lower(),'item':self.list_ctrl_1.GetItem(index)})
                    i+=1
                else:
                    pure_file_list.append(filename)
            RPos+=1


            for filename in pure_file_list:
                current_path=GlobalConfig['LastDir']+u"\\"+filename
                rr=filename.rsplit('.',1)
                not_visable=False
                if rr.__len__()==1:
                    file_ext=''
                else:
                    file_ext=rr[1]
                if file_ext=='txt' :
                    index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['txtfile'])
                else:
                    if (file_ext=='htm' or file_ext=='html'):
                        index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['htmlfile'])
                    else:
                        if file_ext=='zip' :
                            index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['zipfile'])
                        else:
                            if file_ext=='rar':
                                index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['rarfile'])
                            else:
                                 if file_ext=='jar' :
                                     index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['jarfile'])
                                 else:
                                     if file_ext=='umd':
                                         index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['umdfile'])
                                     else:
                                         if file_ext=='epub':
                                             index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['epub'])
                                         else:
                                             if GlobalConfig['ShowAllFileInSidebar']:
                                                 index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['file'])
                                             else:
                                                 not_visable=True
                if not_visable==False:
                    self.sideitemlist.append({'py':self.cnsort.strToPYS(filename.lower()),'item':self.list_ctrl_1.GetItem(index)})
                    self.list_ctrl_1.SetItemData(index,index)
                    self.itemDataMap[index]=(filename,)
        else:
            #List all windows drives
            i=0
            RPos=0
            self.list_ctrl_1.DeleteAllItems()
            drive_list=[]
            drive_str = win32api.GetLogicalDriveStrings()
            drive_list=drive_str.split('\x00')
            drive_list.pop()
            for drive in drive_list:
                index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,drive,self.file_icon_list['driver'])
                if drive==RestorPosName:RPos=i
                self.list_ctrl_1.SetItemData(index,index)
                self.itemDataMap[index]=('\x01'+drive,)
                self.sideitemlist.append({'py':self.cnsort.strToPYS(drive.lower()),'item':self.list_ctrl_1.GetItem(index)})
                i+=1
        key=self.text_ctrl_2.GetValue()
        self.UpdateSearchSidebar(key)
        self.list_ctrl_1.Focus(RPos)
        self.list_ctrl_1.Select(RPos)

    def OnItemActive(self,event):
        """Called when dir sidebar item was activated"""
        self.PvFrame.Hide()
        global GlobalConfig
        item=event.GetItem()
        filename=item.GetText()
        if filename[1:]==":\\" and not os.path.isdir(filename):
            return False #means this driver is not ready
        if GlobalConfig['LastDir']<>"ROOT":
            current_path=GlobalConfig['LastDir']+u"\\"+filename
        else:
            current_path=filename
        current_ext=os.path.splitext(current_path)[1].lower()
        if os.path.isdir(current_path)== True:
            if current_path.find(":\\\\..")<>-1:
                GlobalConfig['LastDir']=u"ROOT"
            else:
                GlobalConfig['LastDir']=os.path.normpath(current_path)
            self.DirSideBarReload()
        else:
            if current_ext==".zip" or current_ext==".rar":
                dlg=ZipFileDialog(self,current_path)
                dlg.ShowModal()
                if dlg.selected_files<>[]:
#                    self.zip_file=current_path
#                    self.select_files=dlg.selected_files
#                    self.open_method=dlg.openmethod
                    self.LoadFile(dlg.selected_files,'zip',current_path,openmethod=dlg.openmethod)
                    dlg.Destroy()
                else:
                    dlg.Destroy()
            else:
#                self.select_files.append(current_path)
                self.LoadFile([current_path,])

    def ActiveItem(self,filename):
        """manually active an item"""
        self.PvFrame.Hide()
        if filename[1:]==":\\" and not os.path.isdir(filename):
            return False #means this driver is not ready
        if GlobalConfig['LastDir']<>"ROOT":
            current_path=GlobalConfig['LastDir']+u"\\"+filename
        else:
            current_path=filename
        current_ext=os.path.splitext(current_path)[1].lower()
        if os.path.isdir(current_path)== True:
            if current_path.find(":\\\\..")<>-1:
                GlobalConfig['LastDir']=u"ROOT"
            else:
                GlobalConfig['LastDir']=os.path.normpath(current_path)
            self.DirSideBarReload()
        else:
            if current_ext==".zip" or current_ext==".rar":
                dlg=ZipFileDialog(self,current_path)
                dlg.ShowModal()
                if dlg.selected_files<>[]:
#                    self.zip_file=current_path
#                    self.select_files=dlg.selected_files
#                    self.open_method=dlg.openmethod
                    self.LoadFile(dlg.selected_files,'zip',current_path,openmethod=dlg.openmethod)
                    dlg.Destroy()
                else:
                    dlg.Destroy()
            else:
#                self.select_files.append(current_path)
                self.LoadFile([current_path,])



    def OnSplitterDClick(self,event):
        self.window_1.Unsplit(self.window_1_pane_1)


    def GetListCtrl(self):
        return self.list_ctrl_1

    def GetSortImages(self):
        return (self.dn,self.up)

    def OnItemSelected(self,event):
        global GlobalConfig
        if not GlobalConfig['EnableSidebarPreview']: return
        filename=unicode(self.list_ctrl_1.GetItemText(event.GetIndex()))
        current_path=GlobalConfig['LastDir']+u"\\"+filename
        current_ext=os.path.splitext(current_path)[1].lower()
        if current_ext=='.txt'  or current_ext=='.htm' or current_ext=='.html':
            coding=DetectFileCoding(current_path)
            if coding=='error':return False
            try:
                file=open(current_path,'r')
            except:
                dlg = wx.MessageDialog(self, current_path+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                return False
            i=0
            istr=''
            while i<20:
                try:
                    istr+=file.readline(500)
                except:
                    dlg = wx.MessageDialog(self, current_path+u' 文件读取错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                    dlg.ShowModal()
                    dlg.Destroy()
                    return False
                i+=1
            preview_buff=AnyToUnicode(istr,coding)
            if current_ext=='.htm' or current_ext=='.html':
                preview_buff=htm2txt(preview_buff)
            #self.text_ctrl_3.SetValue(preview_buff)
            (x,y)=self.list_ctrl_1.GetItemPosition(event.GetIndex())
            #rect=self.list_ctrl_1.GetItemRect(event.GetIndex())
            #print str(x)+" "+str(self.GetPosition())
            self.PvFrame.SetPosition((self.GetPosition()[0]+self.window_1.GetSashPosition(),y))
            self.PvFrame.SetText(preview_buff)
            self.PvFrame.SetSize((400,200))
            self.PvFrame.Hide()
            self.PvFrame.Show()
            file.close()
        else:
            self.PvFrame.Hide()



    def OnDirChar(self,event):
        global GlobalConfig
        key=event.GetKeyCode()
        if key==wx.WXK_RIGHT:#Active Selected Item
            i=self.list_ctrl_1.GetFocusedItem()
            self.ActiveItem(self.list_ctrl_1.GetItemText(i))
            return
        if key==wx.WXK_LEFT:#Up dir
            current_path=GlobalConfig['LastDir']+u"\\.."
            if GlobalConfig['LastDir']==u'ROOT':
                return
            if current_path.find(":\\\\..")<>-1:
                GlobalConfig['LastDir']=u"ROOT"
            else:
                GlobalConfig['LastDir']=os.path.normpath(current_path)
            self.DirSideBarReload()
            return
        event.Skip()

    def DisplayVerCheck(self,event):
        dlg=VerCheckDialog(event.imsg,event.iurl)
        dlg.ShowModal()
        dlg.Destroy()


    def UpdateLastFileMenu(self):
        global OpenedFileList
        i=1000
        total=2000
        while i<total:
            i+=1
            try:
                self.LastFileMenu.Remove(i) # the number of last opened files may less than maxopenedfiles, so need to try first
            except:
                pass
        i=1000
        for f in OpenedFileList:
            i+=1
            f['MenuID']=i
            if f['type']=='normal':self.LastFileMenu.Append(i,f['file'],f['file'],wx.ITEM_NORMAL)
            else:self.LastFileMenu.Append(i,f['zfile']+u'|'+f['file'],f['file'],wx.ITEM_NORMAL)
            self.Bind(wx.EVT_MENU, self.OpenLastFile, id=i)

    def DownloadFinished(self,event):
        global OnScreenFileList,GlobalConfig,OnDirectSeenPage
        if event.status=='nok':
            dlg = wx.MessageDialog(self, event.name+u'下载失败！',
                               u'出错了！',
                               wx.OK | wx.ICON_ERROR
                               )
            dlg.ShowModal()
            dlg.Destroy()
            return None
        if GlobalConfig['DAUDF']==2:
            savefilename=GlobalConfig['defaultsavedir']+"\\"+event.name.strip()+".txt"
            try:
                fp=codecs.open(savefilename,encoding='GBK',mode='w')
                ut=event.bk.encode('GBK', 'ignore')
                ut=unicode(ut, 'GBK', 'ignore')
                fp.write(ut)
                fp.close()
            except:
                err_dlg = wx.MessageDialog(None, u'写入文件：'+savefilename+u' 错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                err_dlg.ShowModal()
                err_dlg.Destroy()
                return False
            dlg = wx.MessageDialog(self, event.name+u'下载完毕，已保存在'+savefilename,
                               u'下载结束',
                               wx.OK | wx.ICON_INFORMATION
                               )
            dlg.ShowModal()
            dlg.Destroy()
            return

        dlg = MyChoiceDialog(self, event.name+u'下载完毕。我想：',u'下载结束',
                              [u'直接观看',u'另存为...'],GlobalConfig['DAUDF']
                               )
        dlg.ShowModal()
        try:
            rr=dlg.chosen
        except:
            rr=None
        dlg.Destroy()
        if rr==u'直接观看':
            OnDirectSeenPage=True
            self.SaveBookDB()
            self.text_ctrl_1.SetValue(event.bk)
            OnScreenFileList=[]
            OnScreenFileList.append((event.name,'',event.bk.__len__()))
        else:
            if rr==u'另存为...':
                wildcard = u"文本文件(UTF-8) (*.txt)|*.txt|"     \
                        u"文本文件(GBK) (*.txt)|*.txt"
                dlg = wx.FileDialog(
                    self, message=u"将当前文件另存为", defaultDir=GlobalConfig['LastDir'],
                    defaultFile=event.name+u".txt", wildcard=wildcard, style=wx.SAVE | wx.FD_OVERWRITE_PROMPT
                    )

                if dlg.ShowModal() == wx.ID_OK:
                    savefilename=dlg.GetPath()
                    if dlg.GetFilterIndex()==0:
                        try:
                            fp=codecs.open(savefilename,encoding='utf-8',mode='w')
                            fp.write(event.bk)
                            fp.close()
                        except:
                            err_dlg = wx.MessageDialog(None, u'写入文件：'+fname+u' 错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                            err_dlg.ShowModal()
                            err_dlg.Destroy()
                            return False
                    else:
                        try:
                            fp=codecs.open(savefilename,encoding='GBK',mode='w')
                            ut=event.bk.encode('GBK', 'ignore')
                            ut=unicode(ut, 'GBK', 'ignore')
                            fp.write(ut)
                            fp.close()
                        except:
                            err_dlg = wx.MessageDialog(None, u'写入文件：'+savefilename+u' 错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                            err_dlg.ShowModal()
                            err_dlg.Destroy()
                            return False
                dlg.Destroy()

    def SearchSidebar(self,evt):
        self.UpdateSearchSidebar(evt.GetString().strip())


    def UpdateSearchSidebar(self,key):
        py_key=key.strip()
        rlist=[]
        self.list_ctrl_1.DeleteAllItems()
        if py_key<>'':
            #print self.sideitemlist
            for m in self.sideitemlist:
                if m['py'].find(py_key)<>-1:
                    rlist.append(m['item'])
        else:
            for m in self.sideitemlist:
                rlist.append(m['item'])
        for m in rlist:
            self.list_ctrl_1.InsertItem(m)

    def ShowSlider(self,evt=None):
        (x,y)=self.GetClientSize()

        if self.slider==None:
            try:
                pos=int(self.text_ctrl_1.GetPosPercent())
            except:
                pos=0
            self.slider=SliderDialog(self,pos,(x/2,y/2))
            self.slider.Show()
        else:
            self.slider.Closeme()

class MyOpenFileDialog(wx.Dialog,wx.lib.mixins.listctrl.ColumnSorterMixin):
    global GlobalConfig
    select_files=[]
    zip_file=''
    file_icon_list={}
    open_method="load"
    def __init__(self, *args, **kwds):
        global GlobalConfig
        self.select_files=[]
        # begin wxGlade: MyOpenFileDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.WANTS_CHARS
        wx.Dialog.__init__(self, *args, **kwds)
        self.bitmap_button_3 = wx.BitmapButton(self, -1, wx.Bitmap(GlobalConfig['IconDir']+u"\\reload-16x16.png", wx.BITMAP_TYPE_ANY))
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.bitmap_button_1 = wx.BitmapButton(self, -1, wx.Bitmap(GlobalConfig['IconDir']+u"\\folder-up-16x16.png", wx.BITMAP_TYPE_ANY))
        self.bitmap_button_2 = wx.BitmapButton(self, -1, wx.Bitmap(GlobalConfig['IconDir']+u"\\dir-tree-16x16.png", wx.BITMAP_TYPE_ANY))
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.choice_1 = wx.Choice(self, -1, choices=[u"所有支持的文件格式(*.txt,*.htm,*.html,*.zip,*.rar,*.umd,*.jar)", u"文本文件(*.txt,*.htm,*.html)", u"压缩文件(*.rar,*.zip,*.umd,*.jar,*.epub)", u"所有文件(*.*)"])
        self.button_4 = wx.Button(self, -1, u"添加")
        self.button_5 = wx.Button(self, -1, u" 打开")
        self.button_6 = wx.Button(self, -1, u"取消")
        self.text_ctrl_3 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnReload, self.bitmap_button_3)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnEnter, self.text_ctrl_2)
        self.Bind(wx.EVT_BUTTON, self.OnUpDir, self.bitmap_button_1)
        self.Bind(wx.EVT_BUTTON, self.OnSelectDir, self.bitmap_button_2)
        self.Bind(wx.EVT_CHOICE, self.OnChoiceSelected, self.choice_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancell, self.button_6)
        # end wxGlade
        self.Bind(wx.EVT_BUTTON, self.OnOpenFiles, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.OnAppendFiles, self.button_4)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected,self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnItemActive, self.list_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_CHAR,self.OnKey)
        self.Bind(wx.EVT_ACTIVATE,self.OnWinActive)
        self.image_list=wx.ImageList(16,16,mask=False,initialCount=5)
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\folder.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["folder"]=0
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\txtfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["txtfile"]=1
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\zipfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["zipfile"]=2
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\htmlfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["htmlfile"]=3
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\rarfile.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["rarfile"]=4
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\file.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["file"]=5
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\jar.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["jarfile"]=6
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\umd.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["umdfile"]=7
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\up.png",wx.BITMAP_TYPE_ANY)
        self.up=self.image_list.Add(bmp)
        self.file_icon_list["up"]=8
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\down.png",wx.BITMAP_TYPE_ANY)
        self.dn=self.image_list.Add(bmp)
        self.file_icon_list["down"]=9
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\Driver.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["driver"]=10
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\epub.png",wx.BITMAP_TYPE_ANY)
        self.image_list.Add(bmp)
        self.file_icon_list["epub"]=11

        self.list_ctrl_1.AssignImageList(self.image_list,wx.IMAGE_LIST_SMALL)
        self.list_ctrl_1.InsertColumn(0,u'文件名',width=220)
        self.list_ctrl_1.InsertColumn(1,u'长度')
        self.list_ctrl_1.InsertColumn(2,u'日期',width=120)
        self.text_ctrl_2.SetValue(GlobalConfig['LastDir'])
        self.itemDataMap={}
        wx.lib.mixins.listctrl.ColumnSorterMixin.__init__(self,3)
        self.LastDir=''
        self.Reload()



    def __set_properties(self):
        # begin wxGlade: MyOpenFileDialog.__set_properties
        self.SetTitle("Open File")
        self.SetSize((466, 491))
        self.bitmap_button_3.SetSize(self.bitmap_button_3.GetBestSize())
        self.text_ctrl_2.SetMinSize((350, -1))
        self.bitmap_button_1.SetSize(self.bitmap_button_1.GetBestSize())
        self.bitmap_button_2.SetSize(self.bitmap_button_2.GetBestSize())
        self.choice_1.SetMinSize((220, 21))
        self.choice_1.SetSelection(0)
        self.button_6.SetDefault()
        self.text_ctrl_3.SetMinSize((392, 120))
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: MyOpenFileDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.bitmap_button_3, 0, 0, 0)
        sizer_3.Add(self.text_ctrl_2, 0, 0, 0)
        sizer_3.Add(self.bitmap_button_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_button_2, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 2)
        sizer_2.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        sizer_4.Add(self.choice_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.button_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.button_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.button_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 1)
        sizer_2.Add(self.text_ctrl_3, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        self.Layout()
        # end wxGlade

    def Reload(self):
        """"This function is to reload MyOpenFileDialog with GlobalConfig['LastDir']"""
        global GlobalConfig
        #if GlobalConfig['LastDir']==self.LastDir: return
        #else:
        if ((self.LastDir.__len__()>GlobalConfig['LastDir'].__len__() and not (self.LastDir=='ROOT' and GlobalConfig['LastDir'][1:]==u':\\')))or GlobalConfig['LastDir']==u'ROOT':
            RestorPos=True
            if GlobalConfig['LastDir']=='ROOT':
                RestorPosName=self.LastDir
            else:
                RestorPosName=self.LastDir.rsplit('\\',1)[1]
        else:
            RestorPos=False
        self.LastDir=GlobalConfig['LastDir']
        if GlobalConfig['LastDir']<>u'ROOT':
            current_ext=os.path.splitext(GlobalConfig['LastDir'])[1].lower()
            self.list_ctrl_1.DeleteAllItems()
            try:
                tlist=os.listdir(GlobalConfig['LastDir'])
            except:
                dlg = wx.MessageDialog(None, GlobalConfig['LastDir']+u' 目录打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,"..",self.file_icon_list['folder'])
                Date_str=u""
                self.list_ctrl_1.SetStringItem(index,2,Date_str)
                self.list_ctrl_1.SetItemData(index,index)
                self.itemDataMap[index]=('\x01'+u"..",0,Date_str)
                self.window_1_pane_1.SetFocus()
                self.list_ctrl_1.SetFocus()
                self.list_ctrl_1.Focus(0)
                return
            file_list=[]
            for m in tlist:
                m=AnyToUnicode(m,None)
                file_list.append(m)
            file_list.sort(key=unicode.lower)
            index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,"..",self.file_icon_list['folder'])
            Date_str=u""
            self.list_ctrl_1.SetStringItem(index,2,Date_str)
            self.list_ctrl_1.SetItemData(index,index)
            self.itemDataMap[index]=('\x01'+u"..",0,Date_str)
            i=0
            RPos=0
            for filename in file_list:
                current_path=GlobalConfig['LastDir']+u"\\"+filename
                if os.path.isdir(current_path)== True:
                    if RestorPos:
                        if filename==RestorPosName:
                            RPos=i
                    index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['folder'])
                    Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                    self.list_ctrl_1.SetStringItem(index,2,Date_str)
                    self.list_ctrl_1.SetItemData(index,index)
                    self.itemDataMap[index]=('\x01'+filename,0,Date_str)
                    i+=1
            RPos+=1
            for filename in file_list:
                current_path=GlobalConfig['LastDir']+u"\\"+filename
                if os.path.isdir(current_path)== False:
                    if os.path.splitext(current_path)[1].lower()=='.txt' and self.choice_1.GetSelection()<>2:
                        index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['txtfile'])
                        Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                        file_size=HumanSize(os.path.getsize(current_path))
                        self.list_ctrl_1.SetStringItem(index,1,file_size)
                        self.list_ctrl_1.SetStringItem(index,2,Date_str)
                        self.list_ctrl_1.SetItemData(index,index)
                        self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)
                        i+=1
                    else:
                        if (os.path.splitext(current_path)[1].lower()=='.htm' or os.path.splitext(current_path)[1].lower()=='.html') and self.choice_1.GetSelection()<>2:
                            index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['htmlfile'])
                            Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                            file_size=HumanSize(os.path.getsize(current_path))
                            self.list_ctrl_1.SetStringItem(index,1,file_size)
                            self.list_ctrl_1.SetStringItem(index,2,Date_str)
                            self.list_ctrl_1.SetItemData(index,index)
                            self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)
                        else:
                            if os.path.splitext(current_path)[1].lower()=='.zip' and self.choice_1.GetSelection()<>1:
                                index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['zipfile'])
                                Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                                #file_size=str(os.path.getsize(current_path))
                                file_size=HumanSize(os.path.getsize(current_path))
                                self.list_ctrl_1.SetStringItem(index,1,file_size)
                                self.list_ctrl_1.SetStringItem(index,2,Date_str)
                                self.list_ctrl_1.SetItemData(index,index)
                                self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)
                            else:
                                if os.path.splitext(current_path)[1].lower()=='.rar' and self.choice_1.GetSelection()<>1:
                                    index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['rarfile'])
                                    Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                                    file_size=HumanSize(os.path.getsize(current_path))
                                    self.list_ctrl_1.SetStringItem(index,1,file_size)
                                    self.list_ctrl_1.SetStringItem(index,2,Date_str)
                                    self.list_ctrl_1.SetItemData(index,index)
                                    self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)
                                else:
                                     if os.path.splitext(current_path)[1].lower()=='.jar' and self.choice_1.GetSelection()<>1:
                                         index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['jarfile'])
                                         Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                                         file_size=HumanSize(os.path.getsize(current_path))
                                         self.list_ctrl_1.SetStringItem(index,1,file_size)
                                         self.list_ctrl_1.SetStringItem(index,2,Date_str)
                                         self.list_ctrl_1.SetItemData(index,index)
                                         self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)
                                     else:
                                         if os.path.splitext(current_path)[1].lower()=='.umd' and self.choice_1.GetSelection()<>1:
                                             index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['umdfile'])
                                             Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                                             file_size=HumanSize(os.path.getsize(current_path))
                                             self.list_ctrl_1.SetStringItem(index,1,file_size)
                                             self.list_ctrl_1.SetStringItem(index,2,Date_str)
                                             self.list_ctrl_1.SetItemData(index,index)
                                             self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)
                                         else:
                                             if os.path.splitext(current_path)[1].lower()=='.epub' and self.choice_1.GetSelection()<>1:
                                                 index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['epub'])
                                                 Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                                                 file_size=HumanSize(os.path.getsize(current_path))
                                                 self.list_ctrl_1.SetStringItem(index,1,file_size)
                                                 self.list_ctrl_1.SetStringItem(index,2,Date_str)
                                                 self.list_ctrl_1.SetItemData(index,index)
                                                 self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)

                                             else:
                                                 if self.choice_1.GetSelection()==3:
                                                    index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,filename,self.file_icon_list['file'])
                                                    Date_str=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(os.path.getctime(current_path)))
                                                    file_size=HumanSize(os.path.getsize(current_path))
                                                    self.list_ctrl_1.SetStringItem(index,1,file_size)
                                                    self.list_ctrl_1.SetStringItem(index,2,Date_str)
                                                    self.list_ctrl_1.SetItemData(index,index)
                                                    self.itemDataMap[index]=(filename,os.path.getsize(current_path),Date_str)
        else:
            #List all windows drives
            i=0
            RPos=0
            self.list_ctrl_1.DeleteAllItems()
            drive_list=[]
            drive_str = win32api.GetLogicalDriveStrings()
            drive_list=drive_str.split('\x00')
            drive_list.pop()
            for drive in drive_list:
                index=self.list_ctrl_1.InsertImageStringItem(sys.maxint,drive,self.file_icon_list['driver'])
                if drive==RestorPosName:RPos=i
                Date_str=''
                self.list_ctrl_1.SetStringItem(index,2,Date_str)
                self.list_ctrl_1.SetItemData(index,index)
                self.itemDataMap[index]=('\x01'+drive,0,Date_str)
                i+=1
        self.list_ctrl_1.Focus(RPos)
        self.list_ctrl_1.Select(RPos)
        if GlobalConfig['LastDir']==u'ROOT':
            self.text_ctrl_2.SetValue(u'我的电脑')
        else:
            self.text_ctrl_2.SetValue(GlobalConfig['LastDir'])

















    def OnReload(self, event): # wxGlade: MyOpenFileDialog.<event_handler>
        global GlobalConfig
        if os.path.isdir(self.text_ctrl_2.GetValue())== True:
            GlobalConfig['LastDir']=self.text_ctrl_2.GetValue()
            self.Reload()
        else:
             dlg = wx.MessageDialog(self, u'目录输入有误！',u"错误！",wx.OK|wx.ICON_ERROR)
             dlg.ShowModal()
             dlg.Destroy()

    def OnEnter(self, event): # wxGlade: MyOpenFileDialog.<event_handler>
         global GlobalConfig
         if os.path.isdir(self.text_ctrl_2.GetValue())== True:
            GlobalConfig['LastDir']=self.text_ctrl_2.GetValue()
            self.Reload()
         else:
            dlg = wx.MessageDialog(self, u'目录输入有误！',u"错误！",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()

    def OnUpDir(self, event): # wxGlade: MyOpenFileDialog.<event_handler>
        global GlobalConfig
        GlobalConfig['LastDir']=GlobalConfig['LastDir'].rpartition('\\')[0]
        if GlobalConfig['LastDir'].find('\\')==-1:
            GlobalConfig['LastDir']+='\\'
        self.text_ctrl_2.SetValue(GlobalConfig['LastDir'])
        self.Reload()


    def OnSelectDir(self, event): # wxGlade: MyOpenFileDialog.<event_handler>
        global GlobalConfig
        dlg = wx.DirDialog(self, "Choose a directory:",
                          style=wx.DD_DEFAULT_STYLE
                           )
        if dlg.ShowModal() == wx.ID_OK:
            GlobalConfig['LastDir']=dlg.GetPath()
            self.text_ctrl_2.SetValue(dlg.GetPath())
            self.Reload()
        dlg.Destroy()

    def OnItemSelected(self,event):
        global GlobalConfig
        self.text_ctrl_3.SetValue('')
        item=event.GetItem()
        preview_buff=u''
        filename=item.GetText()
        current_path=GlobalConfig['LastDir']+u"\\"+filename
        current_ext=os.path.splitext(current_path)[1].lower()
        if current_ext=='.txt'  or current_ext=='.htm' or current_ext=='.html':
            coding=DetectFileCoding(current_path)
            if coding=='error':return False
            try:
                file=open(current_path,'r')
            except:
                dlg = wx.MessageDialog(self, current_path+u' 文件打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                return False
            i=0
            istr=''
            while i<20:
                try:
                    istr+=file.readline(500)
                except:
                    dlg = wx.MessageDialog(self, current_path+u' 文件读取错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                    dlg.ShowModal()
                    dlg.Destroy()
                    return False
                i+=1
            preview_buff=AnyToUnicode(istr,coding)
            if current_ext=='.htm' or current_ext=='.html':
                preview_buff=htm2txt(preview_buff)
            self.text_ctrl_3.SetValue(preview_buff)
            file.close()

    def OnItemActive(self,event):
        global GlobalConfig
        item=event.GetItem()
        filename=item.GetText()
        #current_path=GlobalConfig['LastDir']+u"\\"+filename
        if filename[1:]==":\\" and not os.path.isdir(filename):
            return False #means this driver is not ready
        if GlobalConfig['LastDir']<>"ROOT":
            current_path=GlobalConfig['LastDir']+u"\\"+filename
        else:
            current_path=filename
        current_ext=os.path.splitext(current_path)[1].lower()

        if os.path.isdir(current_path)== True:
            if current_path.find(":\\\\..")<>-1:
                GlobalConfig['LastDir']=u"ROOT"
            else:
                GlobalConfig['LastDir']=os.path.normpath(current_path)
            self.Reload()
        else:
            if current_ext==".zip" or current_ext==".rar":
                dlg=ZipFileDialog(self,current_path)
                dlg.ShowModal()
                if dlg.selected_files<>[]:
                    self.zip_file=current_path
                    self.select_files=dlg.selected_files
                    self.open_method=dlg.openmethod
                    dlg.Destroy()
                    self.Destroy()
                else:
                    dlg.Destroy()
            else:
                self.select_files.append(current_path)
                self.Destroy()


    def ActiveItem(self,filename):
        """manually active item"""
        global GlobalConfig
        #current_path=GlobalConfig['LastDir']+u"\\"+filename
        if filename[1:]==":\\" and not os.path.isdir(filename):
            return False #means this driver is not ready
        if GlobalConfig['LastDir']<>"ROOT":
            current_path=GlobalConfig['LastDir']+u"\\"+filename
        else:
            current_path=filename
        current_ext=os.path.splitext(current_path)[1].lower()

        if os.path.isdir(current_path)== True:
            if current_path.find(":\\\\..")<>-1:
                GlobalConfig['LastDir']=u"ROOT"
            else:
                GlobalConfig['LastDir']=os.path.normpath(current_path)
            self.Reload()
        else:
            if current_ext==".zip" or current_ext==".rar":
                dlg=ZipFileDialog(self,current_path)
                dlg.ShowModal()
                if dlg.selected_files<>[]:
                    self.zip_file=current_path
                    self.select_files=dlg.selected_files
                    self.open_method=dlg.openmethod
                    dlg.Destroy()
                    self.Destroy()
                else:
                    dlg.Destroy()
            else:
                self.select_files.append(current_path)
                self.Destroy()





    def OnCancell(self, event): # wxGlade: MyOpenFileDialog.<event_handler>
        self.Destroy()

    def OnChoiceSelected(self, event): # wxGlade: MyOpenFileDialog.<event_handler>
        self.Reload()

    def OnKey(self,event):
        key=event.GetKeyCode()
        if key==wx.WXK_RIGHT:#Active Selected Item
            i=self.list_ctrl_1.GetFocusedItem()
            self.ActiveItem(self.list_ctrl_1.GetItemText(i))
            return
        if key==wx.WXK_LEFT:#Up dir
            current_path=GlobalConfig['LastDir']+u"\\.."
            if GlobalConfig['LastDir']==u'ROOT':
                return
            if current_path.find(":\\\\..")<>-1:
                GlobalConfig['LastDir']=u"ROOT"
            else:
                GlobalConfig['LastDir']=os.path.normpath(current_path)
            self.Reload()
            return
        if key==wx.WXK_ESCAPE:
            self.Destroy()
        else:
            event.Skip()

    def OnOpenFiles(self,event):
        global GlobalConfig
        item=self.list_ctrl_1.GetNextSelected(-1)
        while item<>-1:
            filename=self.list_ctrl_1.GetItemText(item)
            current_path=GlobalConfig['LastDir']+u"\\"+filename
            self.select_files.append(current_path)
            item=self.list_ctrl_1.GetNextSelected(item)
        self.open_method="load"
        self.Destroy()


    def OnAppendFiles(self,event):
        global GlobalConfig
        item=self.list_ctrl_1.GetNextSelected(-1)
        while item<>-1:
            filename=self.list_ctrl_1.GetItemText(item)
            current_path=GlobalConfig['LastDir']+u"\\"+filename
            self.select_files.append(current_path)
            item=self.list_ctrl_1.GetNextSelected(item)
        self.open_method="append"
        self.Destroy()

    def OnWinActive(self,event):
        if event.GetActive():self.list_ctrl_1.SetFocus()


    def GetListCtrl(self):
        return self.list_ctrl_1

    def GetSortImages(self):
        return (self.dn,self.up)

# end of class MyOpenFileDialog


class BookMarkDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.filename=''
        self.pos=0
        # begin wxGlade: BookMarkDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_3 = wx.StaticText(self, -1, u"文件名：", style=wx.ALIGN_CENTRE)
        self.text_ctrl_3 = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.button_3 = wx.Button(self, -1, u"打开")
        self.label_4 = wx.StaticText(self, -1, u"预览：    ")
        self.text_ctrl_4 = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.button_4 = wx.Button(self, -1, u"删除")
        self.list_box_1 = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.Bind(wx.EVT_LISTBOX,self.OnSelected,self.list_box_1)
        self.Bind(wx.EVT_LISTBOX_DCLICK,self.OnActive,self.list_box_1)
        self.Bind(wx.EVT_BUTTON,self.OnActive,self.button_3)
        self.Bind(wx.EVT_BUTTON,self.OnDel,self.button_4)
        self.list_box_1.Bind(wx.EVT_CHAR,self.OnKey)
        self.Bind(wx.EVT_ACTIVATE,self.OnWinActive)

        self.ReDo()


    def __set_properties(self):
        # begin wxGlade: BookMarkDialog.__set_properties
        self.SetTitle(u"收藏夹")
        self.SetSize((500, 500))
        self.text_ctrl_3.SetMinSize((350, -1))
        self.text_ctrl_4.SetMinSize((350, -1))
        self.list_box_1.SetMinSize((500,500))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: BookMarkDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add((10, 20), 0, 0, 0)
        sizer_3.Add(self.label_3, 0, 0, 0)
        sizer_3.Add(self.text_ctrl_3, 0, 0, 0)
        sizer_3.Add((10, 20), 0, 0, 0)
        sizer_3.Add(self.button_3, 0, 0, 0)
        sizer_3.Add((10, 20), 0, 0, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_4.Add((10, 20), 0, 0, 0)
        sizer_4.Add(self.label_4, 0, wx.ALIGN_RIGHT, 0)
        sizer_4.Add(self.text_ctrl_4, 0, 0, 0)
        sizer_4.Add((10, 20), 0, 0, 0)
        sizer_4.Add(self.button_4, 0, 0, 0)
        sizer_4.Add((10, 20), 0, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_1.Add(self.list_box_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def ReDo(self):
        global BookMarkList
        bk_name_list=[]
        self.list_box_1.Clear()
        if BookMarkList.__len__()==0:return
        for bk in BookMarkList:
            bk_name_list.append(bk['filename'])
        self.list_box_1.InsertItems(bk_name_list,0)
        self.list_box_1.SetSelection(0)
        self.text_ctrl_3.SetValue(BookMarkList[0]['filename'])
        self.text_ctrl_4.SetValue(BookMarkList[0]['line'])


    def OnSelected(self,event):
        global BookMarkList
        i=0
        while not self.list_box_1.IsSelected(i):
            i+=1
            if i>=self.list_box_1.GetCount(): return
        self.text_ctrl_3.SetValue(BookMarkList[i]['filename'])
        self.text_ctrl_4.SetValue(BookMarkList[i]['line'])

    def OnActive(self,event):
        global BookMarkList
        if BookMarkList.__len__()==0:return
        i=0
        while not self.list_box_1.IsSelected(i):
            i+=1
            if i>=self.list_box_1.GetCount(): return
        self.filename=BookMarkList[i]['filename']
        self.pos=BookMarkList[i]['pos']
        self.Destroy()

    def OnDel(self,event):
        global BookMarkList
        if BookMarkList.__len__()==0:return
        i=0
        while not self.list_box_1.IsSelected(i):
            i+=1
            if i>=self.list_box_1.GetCount(): return
        BookMarkList.__delitem__(i)
        self.ReDo()
        if i>0:
            i-=1
            self.list_box_1.SetSelection(i)
            self.text_ctrl_3.SetValue(BookMarkList[i]['filename'])
            self.text_ctrl_4.SetValue(BookMarkList[i]['line'])
        else:
            self.text_ctrl_3.SetValue('')
            self.text_ctrl_4.SetValue('')

# end of class BookMarkDialog

    def OnKey(self,event):
        key=event.GetKeyCode()
        if key==wx.WXK_ESCAPE:
            self.Destroy()
        else:
            event.Skip()


    def OnWinActive(self,event):
        if event.GetActive():self.list_box_1.SetFocus()

##class OptionDialog(wx.Dialog):
##    def __init__(self, *args, **kwds):
##        # begin wxGlade: OptionDialog.__init__
##        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
##        wx.Dialog.__init__(self, *args, **kwds)
##        self.notebook_1 = wx.Notebook(self, -1, style=0)
##        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
##        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
##        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
##        self.sizer_3_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, u"下载")
##        self.sizer_4_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, u"代理服务器")
##        self.text_ctrl_4 = wx.TextCtrl(self.notebook_1_pane_1, -1, u"《老子》八十一章\n\n　1.道可道，非常道。名可名，非常名。无名天地之始。有名万物之母。故常无欲以观其妙。常有欲以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。\n\n　2.天下皆知美之为美，斯恶矣；皆知善之为善，斯不善已。故有无相生，难易相成，长短相形，高下相倾，音声相和，前後相随。是以圣人处无为之事，行不言之教。万物作焉而不辞。生而不有，为而不恃，功成而弗居。夫唯弗居，是以不去。\n\n　3.不尚贤， 使民不争。不贵难得之货，使民不为盗。不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹，弱其志，强其骨；常使民无知、无欲，使夫智者不敢为也。为无为，则无不治。\n\n　4.道冲而用之，或不盈。渊兮似万物之宗。解其纷，和其光，同其尘，湛兮似或存。吾不知谁之子，象帝之先。\n\n　5.天地不仁，以万物为刍狗。圣人不仁，以百姓为刍狗。天地之间，其犹橐迭乎？虚而不屈，动而愈出。多言数穷，不如守中。", style=wx.TE_MULTILINE|wx.TE_READONLY)
##        self.label_4 = wx.StaticText(self.notebook_1_pane_1, -1, u"显示方案：")
##        self.combo_box_1 = wx.ComboBox(self.notebook_1_pane_1, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
##        self.button_6 = wx.Button(self.notebook_1_pane_1, -1, u"另存为")
##        self.button_7 = wx.Button(self.notebook_1_pane_1, -1, u"删除")
##        self.static_line_1 = wx.StaticLine(self.notebook_1_pane_1, -1)
##        self.button_9 = wx.Button(self.notebook_1_pane_1, -1, u"字体")
##        self.button_10 = wx.Button(self.notebook_1_pane_1, -1, u"字体颜色")
##        self.button_11 = wx.Button(self.notebook_1_pane_1, -1, u"背景颜色")
##        self.label_5 = wx.StaticText(self.notebook_1_pane_2, -1, u"启动：")
##        self.checkbox_1 = wx.CheckBox(self.notebook_1_pane_2, -1, u"自动载入上次阅读的文件")
##        self.label_5_copy = wx.StaticText(self.notebook_1_pane_2, -1, u"启动：")
##        self.checkbox_VerCheck = wx.CheckBox(self.notebook_1_pane_2, -1, u"检查更新")
##        self.label_1 = wx.StaticText(self.notebook_1_pane_2, -1, u"自动翻页间隔（秒）：")
##        self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
##        self.label_mof = wx.StaticText(self.notebook_1_pane_2, -1, u"最大曾经打开文件菜单数：")
##        self.text_ctrl_mof = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
##        self.label_1_copy = wx.StaticText(self.notebook_1_pane_2, -1, u"连续阅读提醒时间（分钟）：")
##        self.text_ctrl_1_copy = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
##        self.label_1_copy_copy = wx.StaticText(self.notebook_1_pane_2, -1, u"启用ESC键：")
##        self.checkbox_ESC = wx.CheckBox(self.notebook_1_pane_2, -1, u"是否启用ESC键作为老板键")
##        self.label_1_copy_copy_copy = wx.StaticText(self.notebook_1_pane_2, -1, u"文件选择栏预览：")
##        self.checkbox_Preview = wx.CheckBox(self.notebook_1_pane_2, -1, u"是否在文件选择侧边栏中预览文件内容")
##        self.label_7 = wx.StaticText(self.notebook_1_pane_2, -1, u"文件选择栏显示")
##        self.checkbox_5 = wx.CheckBox(self.notebook_1_pane_2, -1, u"是否在文件选择侧边栏中只显示支持的文件格式")
##
##        self.label_2 = wx.StaticText(self.notebook_1_pane_3, -1, u"下载完毕后的缺省动作：")
##        self.choice_1 = wx.Choice(self.notebook_1_pane_3, -1, choices=[u"直接阅读", u"另存为文件",u"直接保存在缺省目录"])
##
##        self.label_12 = wx.StaticText(self.notebook_1_pane_3, -1, u"另存为的缺省目录：")
##        self.text_ctrl_8 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
##        self.button_1 = wx.Button(self.notebook_1_pane_3, -1, u"选择")
##        self.label_11 = wx.StaticText(self.notebook_1_pane_3, -1, u"同时下载的线程个数（需插件支持；不能超过50）：")
##        self.text_ctrl_7 = wx.TextCtrl(self.notebook_1_pane_3, -1, "10")
##
##        self.label_3 = wx.StaticText(self.notebook_1_pane_3, -1, u"启用代理服务器：")
##        self.checkbox_2 = wx.CheckBox(self.notebook_1_pane_3, -1, "")
##        self.label_6 = wx.StaticText(self.notebook_1_pane_3, -1, u"代理服务器地址：")
##        self.text_ctrl_2 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
##        self.label_8 = wx.StaticText(self.notebook_1_pane_3, -1, u"代理服务器端口：")
##        self.text_ctrl_3 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
##        self.label_9 = wx.StaticText(self.notebook_1_pane_3, -1, u"用户名：")
##        self.text_ctrl_5 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
##        self.label_10 = wx.StaticText(self.notebook_1_pane_3, -1, u"密码：")
##        self.text_ctrl_6 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
##
##
##        self.button_4 = wx.Button(self, -1, u"确定")
##        self.button_5 = wx.Button(self, -1, u"取消")
##
##        self.__set_properties()
##        self.__do_layout()
##        # end wxGlade
##
##
##        #self.Bind(wx.EVT_BUTTON,self.OnOK,self.button_4)
##        self.Bind(wx.EVT_BUTTON,self.OnSelFont,self.button_9)
##        self.Bind(wx.EVT_BUTTON,self.OnSelFColor,self.button_10)
##        self.Bind(wx.EVT_BUTTON,self.OnSelBColor,self.button_11)
##        self.Bind(wx.EVT_BUTTON,self.OnSaveTheme,self.button_6)
##        self.Bind(wx.EVT_BUTTON,self.OnDelTheme,self.button_7)
##        self.Bind(wx.EVT_BUTTON,self.SelectDir,self.button_1)
##        self.Bind(wx.EVT_COMBOBOX,self.OnSel,self.combo_box_1)
##        self.Bind(wx.EVT_BUTTON,self.OnOk,self.button_4)
##        self.Bind(wx.EVT_BUTTON,self.OnCancell,self.button_5)
##        self.text_ctrl_4.Bind(wx.EVT_CHAR,self.OnKey)
##        self.Bind(wx.EVT_ACTIVATE,self.OnWinActive)
##
##    def __set_properties(self):
##        global GlobalConfig,ThemeList
##        # begin wxGlade: OptionDialog.__set_properties
##        self.SetTitle(u"选项设置")
##        self.combo_box_1.SetMinSize((150,-1))
##        self.text_ctrl_4.SetMinSize((384, 189))
##        self.text_ctrl_1.SetMinSize((30,-1))
##        self.label_1_copy.SetToolTipString(u"0代表不提醒")
##        self.text_ctrl_1_copy.SetMinSize((40, -1))
##        self.text_ctrl_1_copy.SetToolTipString(u"0代表不提醒")
##        self.text_ctrl_4.SetFont(GlobalConfig['CurFont'])
##        self.text_ctrl_4.SetForegroundColour(GlobalConfig['CurFColor'])
##        self.text_ctrl_4.SetBackgroundColour(GlobalConfig['CurBColor'])
##        self.text_ctrl_4.Refresh()
##        txt=self.text_ctrl_4.GetValue()
##        self.text_ctrl_4.SetValue(txt)
##        #append drop down list
##        for t in ThemeList:
##            self.combo_box_1.Append(t['name'])
##        #seting load last file check box
##        self.checkbox_1.SetValue(GlobalConfig['LoadLastFile'])
##        self.checkbox_ESC.SetValue(GlobalConfig['EnableESC'])
##        self.checkbox_Preview.SetValue(GlobalConfig['EnableSidebarPreview'])
##        self.text_ctrl_1.SetValue(unicode(GlobalConfig['AutoScrollInterval']/1000))
##        self.text_ctrl_1_copy.SetValue(unicode(GlobalConfig['RemindInterval']))
##        self.checkbox_VerCheck.SetValue(GlobalConfig['VerCheckOnStartup'])
##        self.checkbox_5.SetValue(not GlobalConfig['ShowAllFileInSidebar'])
##        self.text_ctrl_mof.SetMinSize((30, -1))
##        self.text_ctrl_mof.SetValue(unicode(GlobalConfig['MaxOpenedFiles']))
##        self.text_ctrl_8.SetMinSize((180, -1))
##        self.text_ctrl_7.SetMinSize((40, -1))
##
##        self.text_ctrl_2.SetMinSize((200, -1))
##        self.text_ctrl_3.SetMinSize((50, -1))
##        self.choice_1.Select(GlobalConfig['DAUDF'])
##        self.checkbox_2.SetValue(GlobalConfig['useproxy'])
##        self.text_ctrl_2.SetValue(unicode(GlobalConfig['proxyserver']))
##        self.text_ctrl_3.SetValue(unicode(GlobalConfig['proxyport']))
##        self.text_ctrl_5.SetValue(unicode(GlobalConfig['proxyuser']))
##        self.text_ctrl_6.SetValue(unicode(GlobalConfig['proxypass']))
##        self.text_ctrl_7.SetValue(unicode(GlobalConfig['numberofthreads']))
##        self.text_ctrl_8.SetValue(unicode(GlobalConfig['defaultsavedir']))
##
##
##        # end wxGlade
##
##    def __do_layout(self):
##        # begin wxGlade: OptionDialog.__do_layout
##        sizer_5 = wx.BoxSizer(wx.VERTICAL)
##        grid_sizer_1 = wx.GridSizer(1, 5, 0, 0)
##
##        sizer_2 = wx.BoxSizer(wx.VERTICAL)
##        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.VERTICAL)
##        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox,  wx.VERTICAL)
##
##        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
##
##        sizer_9 = wx.BoxSizer(wx.VERTICAL)
##        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_1_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_1_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_1_copy = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_mof = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_10_copy = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_10_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_6 = wx.BoxSizer(wx.VERTICAL)
##        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
##        sizer_6.Add(self.text_ctrl_4, 1, wx.EXPAND, 0)
##        sizer_7.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
##        sizer_7.Add((10, 20), 0, 0, 0)
##        sizer_7.Add(self.combo_box_1, 0, 0, 0)
##        sizer_7.Add((10, 20), 0, 0, 0)
##        sizer_7.Add(self.button_6, 0, 0, 0)
##        sizer_7.Add((10, 20), 0, 0, 0)
##        sizer_7.Add(self.button_7, 0, 0, 0)
##        sizer_6.Add(sizer_7, 0, wx.EXPAND, 0)
##        sizer_6.Add(self.static_line_1, 0, wx.EXPAND, 0)
##        sizer_11.Add((20, 20), 0, 0, 0)
##        sizer_11.Add(self.button_9, 0, 0, 0)
##        sizer_11.Add((60, 20), 0, 0, 0)
##        sizer_11.Add(self.button_10, 0, 0, 0)
##        sizer_11.Add((60, 20), 0, 0, 0)
##        sizer_11.Add(self.button_11, 0, 0, 0)
##        sizer_11.Add((20, 20), 0, 0, 0)
##        sizer_6.Add(sizer_11, 0, wx.EXPAND, 0)
##        self.notebook_1_pane_1.SetSizer(sizer_6)
##        sizer_10.Add(self.label_5, 0, 0, 0)
##        sizer_10.Add(self.checkbox_1, 0, 0, 0)
##        sizer_9.Add(sizer_10, 0, wx.EXPAND, 0)
##        sizer_9.Add((20, 20), 0, 0, 0)
##
##        sizer_10_copy_1.Add(self.label_5_copy, 0, 0, 0)
##        sizer_10_copy_1.Add(self.checkbox_VerCheck, 0, 0, 0)
##        sizer_10_copy.Add(sizer_10_copy_1, 0, wx.EXPAND, 0)
##        sizer_9.Add(sizer_10_copy, 0, wx.EXPAND, 0)
##        sizer_9.Add((20, 20), 0, 0, 0)
##        sizer_1.Add(self.label_1, 0, wx.ALIGN_BOTTOM, 0)
##        sizer_1.Add(self.text_ctrl_1, 0, 0, 0)
##
##        sizer_9.Add(sizer_1, 0, wx.EXPAND, 0)
##        sizer_9.Add((20, 20), 0, 0, 0)
##        sizer_1_copy.Add(self.label_1_copy, 0, wx.ALIGN_BOTTOM, 0)
##        sizer_1_copy.Add(self.text_ctrl_1_copy, 0, 0, 0)
##        sizer_9.Add(sizer_1_copy, 0, wx.EXPAND, 0)
##        sizer_9.Add((20, 20), 0, 0, 0)
##        sizer_1_copy_copy.Add(self.label_1_copy_copy, 0, wx.ALIGN_BOTTOM, 0)
##        sizer_1_copy_copy.Add(self.checkbox_ESC, 0, 0, 0)
##        sizer_9.Add(sizer_1_copy_copy, 0, wx.EXPAND, 0)
##        sizer_9.Add((20, 20), 0, 0, 0)
##        sizer_1_copy_copy_copy.Add(self.label_1_copy_copy_copy, 0, wx.ALIGN_BOTTOM, 0)
##        sizer_1_copy_copy_copy.Add(self.checkbox_Preview, 0, 0, 0)
##        sizer_9.Add(sizer_1_copy_copy_copy, 0, wx.EXPAND, 0)
##        sizer_9.Add((20, 20), 0, 0, 0)
##        sizer_20.Add(self.label_7, 0, wx.ALIGN_BOTTOM, 0)
##        sizer_20.Add(self.checkbox_5, 0, 0, 0)
##        sizer_9.Add(sizer_20, 0, wx.EXPAND, 0)
##        sizer_9.Add((20, 20), 0, 0, 0)
##        sizer_mof.Add(self.label_mof, 0, wx.ALIGN_BOTTOM, 0)
##        sizer_mof.Add(self.text_ctrl_mof, 0, 0, 0)
##        sizer_9.Add(sizer_mof, 0, wx.EXPAND, 0)
##        self.notebook_1_pane_2.SetSizer(sizer_9)
##
##
##        sizer_16.Add(self.label_2, 0, wx.ALL, 5)
##        sizer_16.Add(self.choice_1, 0, 0, 0)
##        sizer_3.Add(sizer_16, 1, wx.EXPAND, 0)
##        sizer_18.Add(self.label_12, 0, wx.ALL, 5)
##        sizer_18.Add(self.text_ctrl_8, 0, 0, 0)
##        sizer_18.Add(self.button_1, 0, 0, 0)
##        sizer_3.Add(sizer_18, 1, wx.EXPAND, 0)
##        sizer_17.Add(self.label_11, 0, wx.ALL, 5)
##        sizer_17.Add(self.text_ctrl_7, 0, 0, 0)
##        sizer_3.Add(sizer_17, 1, wx.EXPAND, 0)
##
##
##
##        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
##        sizer_8.Add(self.label_3, 0, wx.ALL, 5)
##        sizer_8.Add(self.checkbox_2, 0, wx.ALL, 5)
##        sizer_4.Add(sizer_8, 1, wx.EXPAND, 0)
##        sizer_12.Add(self.label_6, 0, wx.ALL, 5)
##        sizer_12.Add(self.text_ctrl_2, 0, 0, 0)
##        sizer_4.Add(sizer_12, 1, wx.EXPAND, 0)
##        sizer_13.Add(self.label_8, 0, wx.ALL, 5)
##        sizer_13.Add(self.text_ctrl_3, 0, 0, 0)
##        sizer_4.Add(sizer_13, 1, wx.EXPAND, 0)
##        sizer_14.Add(self.label_9, 0, wx.ALL, 5)
##        sizer_14.Add(self.text_ctrl_5, 0, 0, 0)
##        sizer_4.Add(sizer_14, 1, wx.EXPAND, 0)
##        sizer_15.Add(self.label_10, 0, wx.ALL, 5)
##        sizer_15.Add(self.text_ctrl_6, 0, 0, 0)
##        sizer_4.Add(sizer_15, 1, wx.EXPAND, 0)
##        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
##        self.notebook_1_pane_3.SetSizer(sizer_2)
##
##
##        self.notebook_1.AddPage(self.notebook_1_pane_1, u"界面设置")
##        self.notebook_1.AddPage(self.notebook_1_pane_2, u"控制设置")
##        self.notebook_1.AddPage(self.notebook_1_pane_3, u"下载设置")
##        sizer_5.Add(self.notebook_1, 1, wx.EXPAND, 0)
##        grid_sizer_1.Add((20, 20), 0, 0, 0)
##        grid_sizer_1.Add(self.button_4, 0, 0, 0)
##        grid_sizer_1.Add((20, 20), 0, 0, 0)
##        grid_sizer_1.Add(self.button_5, 0, 0, 0)
##        grid_sizer_1.Add((20, 20), 0, 0, 0)
##        sizer_5.Add(grid_sizer_1, 0, wx.EXPAND, 0)
##        self.SetSizer(sizer_5)
##        sizer_5.Fit(self)
##        self.Layout()
##        # end wxGlade
##
##    def OnSelFont(self,event):
##        global GlobalConfig
##        data=wx.FontData()
##        data.SetInitialFont(GlobalConfig['CurFont'])
##        data.SetColour(GlobalConfig['CurFColor'])
##        data.EnableEffects(False)
##        dlg = wx.FontDialog(self, data)
##        if dlg.ShowModal() == wx.ID_OK:
##            ft=dlg.GetFontData().GetChosenFont()
##            self.text_ctrl_4.SetFont(ft)
##            self.text_ctrl_4.Refresh()
##            txt=self.text_ctrl_4.GetValue()
##            self.text_ctrl_4.SetValue(txt)
##        dlg.Destroy()
##
##    def OnSelFColor(self,event):
##        global GlobalConfig
##        dlg = wx.ColourDialog(self)
##        dlg.GetColourData().SetChooseFull(True)
##        if dlg.ShowModal() == wx.ID_OK:
##            data = dlg.GetColourData()
##            self.text_ctrl_4.SetForegroundColour(data.GetColour())
##            self.text_ctrl_4.Refresh()
##            txt=self.text_ctrl_4.GetValue()
##            self.text_ctrl_4.SetValue(txt)
##        dlg.Destroy()
##
##    def OnSelBColor(self,event):
##        global GlobalConfig
##        dlg = wx.ColourDialog(self)
##        dlg.GetColourData().SetChooseFull(True)
##        if dlg.ShowModal() == wx.ID_OK:
##            data = dlg.GetColourData()
##            self.text_ctrl_4.SetBackgroundColour(data.GetColour())
##            self.text_ctrl_4.Refresh()
##            txt=self.text_ctrl_4.GetValue()
##            self.text_ctrl_4.SetValue(txt)
##        dlg.Destroy()
##
##    def OnSaveTheme(self,event):
##        global ThemeList
##        l={}
##        l['name']=''
##        while l['name']=='':
##            dlg = wx.TextEntryDialog(
##                    self, u'请输入新显示方案的名称(不能为空)：',
##                    u'另存为新方案')
##            if dlg.ShowModal() == wx.ID_OK:
##                l['name']=dlg.GetValue().strip()
##                dlg.Destroy()
##            else:
##                dlg.Destroy()
##                return
##        for t in ThemeList:
##            if t['name']==l['name']:
##                dlg = wx.MessageDialog(self, u'已经有叫这个名字的显示方案了，你确定要覆盖原有方案吗？',u"提示！",wx.YES_NO|wx.ICON_QUESTION)
##                if dlg.ShowModal()==wx.ID_NO:
##                    dlg.Destroy()
##                    return
##                else:
##                    ThemeList.remove(t)
##        l['font']=self.text_ctrl_4.GetFont()
##        l['fcolor']=self.text_ctrl_4.GetForegroundColour()
##        l['bcolor']=self.text_ctrl_4.GetBackgroundColour()
##        l['config']=unicode(l['font'].GetPointSize())+u':'+unicode(l['font'].GetFamily())+u':'+unicode(l['font'].GetStyle())+u':'+unicode(l['font'].GetWeight())+u':'+unicode(l['font'].GetUnderlined())+u':'+l['font'].GetFaceName()+u':'+unicode(l['font'].GetDefaultEncoding())+u':'+unicode(l['fcolor'])+u':'+unicode(l['bcolor'])
##        ThemeList.append(l)
##        self.combo_box_1.Clear()
##        for t in ThemeList:
##            self.combo_box_1.Append(t['name'])
##        self.combo_box_1.SetSelection(self.combo_box_1.GetCount()-1)
##
##
##    def OnDelTheme(self,event):
##        global ThemeList
##        name=self.combo_box_1.GetStringSelection()
##        i=0
##        if name<>u'':
##           for t in ThemeList:
##               if t['name']==name:
##                   ThemeList.__delitem__(i)
##                   break
##               i+=1
##           self.combo_box_1.Clear()
##           for t in ThemeList:
##               self.combo_box_1.Append(t['name'])
##           self.combo_box_1.SetSelection(0)
##
##
##
##    def OnSel(self,event):
##        global ThemeList
##        name=self.combo_box_1.GetStringSelection()
##        if name<>u'':
##           for t in ThemeList:
##               if t['name']==name:
##                   self.text_ctrl_4.SetFont(t['font'])
##                   self.text_ctrl_4.SetForegroundColour(t['fcolor'])
##                   self.text_ctrl_4.SetBackgroundColour(t['bcolor'])
##                   self.text_ctrl_4.Refresh()
##                   txt=self.text_ctrl_4.GetValue()
##                   self.text_ctrl_4.SetValue(txt)
##                   break
##
##    def OnOk(self,event):
##        global ThemeList,GlobalConfig
##        GlobalConfig['CurFont']=self.text_ctrl_4.GetFont()
##        GlobalConfig['CurFColor']=self.text_ctrl_4.GetForegroundColour()
##        GlobalConfig['CurBColor']=self.text_ctrl_4.GetBackgroundColour()
##        GlobalConfig['LoadLastFile']=self.checkbox_1.GetValue()
##        GlobalConfig['EnableESC']=self.checkbox_ESC.GetValue()
##        GlobalConfig['VerCheckOnStartup']=self.checkbox_VerCheck.GetValue()
##        if GlobalConfig['ShowAllFileInSidebar']==self.checkbox_5.GetValue():
##            self.GetParent().UpdateSidebar=True
##        GlobalConfig['ShowAllFileInSidebar']=not self.checkbox_5.GetValue()
##        if GlobalConfig['EnableESC']:
##            self.GetParent().RegisterHotKey(1,0,wx.WXK_ESCAPE)
##            self.GetParent().Bind(wx.EVT_HOTKEY,self.GetParent().OnESC)
##        else:
##            self.GetParent().UnregisterHotKey(1)
##            self.GetParent().Unbind(wx.EVT_HOTKEY)
##
##        GlobalConfig['EnableSidebarPreview']=self.checkbox_Preview.GetValue()
##        try:
##            GlobalConfig['AutoScrollInterval']=float(self.text_ctrl_1.GetValue())*1000
##        except:
##            GlobalConfig['AutoScrollInterval']=12000
##        try:
##            GlobalConfig['RemindInterval']=abs(int(self.text_ctrl_1_copy.GetValue()))
##        except:
##            GlobalConfig['RemindInterval']=60
##        try:
##            GlobalConfig['MaxOpenedFiles']=abs(int(self.text_ctrl_mof.GetValue()))
##        except:
##            GlobalConfig['MaxOpenedFiles']=5
##
##        GlobalConfig['DAUDF']=self.choice_1.GetSelection()
##        GlobalConfig['useproxy']=self.checkbox_2.GetValue()
##        GlobalConfig['proxyserver']=self.text_ctrl_2.GetValue()
##        try:
##            GlobalConfig['proxyport']=int(self.text_ctrl_3.GetValue())
##        except:
##            GlobalConfig['proxyport']=0
##        GlobalConfig['proxyuser']=self.text_ctrl_5.GetValue()
##        GlobalConfig['proxypass']=self.text_ctrl_6.GetValue()
##        try:
##            GlobalConfig['numberofthreads']=int(self.text_ctrl_7.GetValue())
##        except:
##            GlobalConfig['numberofthreads']=1
##        if GlobalConfig['numberofthreads']<=0 or GlobalConfig['numberofthreads']>50:
##            GlobalConfig['numberofthreads']=1
##        if not os.path.exists(self.text_ctrl_8.GetValue()):
##            GlobalConfig['defaultsavedir']=''
##        else:
##            GlobalConfig['defaultsavedir']=self.text_ctrl_8.GetValue()
##        if GlobalConfig['defaultsavedir']=='' and GlobalConfig['DAUDF']==2:
##            dlg = wx.MessageDialog(self, u'请指定正确的缺省保存目录!',
##                               u'出错了！',
##                               wx.OK | wx.ICON_ERROR
##                               )
##            dlg.ShowModal()
##            dlg.Destroy()
##            return
##
##
##
##
##
##
##        self.Destroy()
##
##    def OnCancell(self,event):
##        self.Destroy()
##
##    def OnKey(self,event):
##        key=event.GetKeyCode()
##        if key==wx.WXK_ESCAPE:
##            self.Destroy()
##        else:
##            event.Skip()
##
##
##    def OnWinActive(self,event):
##        if event.GetActive():self.text_ctrl_4.SetFocus()
##
##    def SelectDir(self,event):
##        dlg = wx.DirDialog(self, u"请选择目录：",defaultPath=GlobalConfig['LastDir'],
##                          style=wx.DD_DEFAULT_STYLE
##                           )
##        if dlg.ShowModal() == wx.ID_OK:
##            self.text_ctrl_8.SetValue(dlg.GetPath())
##
##        dlg.Destroy()


##class HelpDialog(wx.Dialog):
##    def __init__(self, parent,mode="help"):
##        # begin wxGlade: HelpDialog.__init__
####        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
##        wx.Dialog.__init__(self,parent,id=-1,title="")
##        self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
##        self.button_1 = wx.Button(self, -1, u"确定")
##
##        self.__set_properties(mode)
##        self.__do_layout()
##        # end wxGlade
##        self.Bind(wx.EVT_BUTTON,self.OnOK,self.button_1)
##        self.text_ctrl_1.Bind(wx.EVT_CHAR,self.OnKey)
##        self.Bind(wx.EVT_ACTIVATE,self.OnWinActive)
##
##    def __set_properties(self,mode):
##        # begin wxGlade: HelpDialog.__set_properties
##        self.SetTitle(u"帮助")
##        if mode=="help":self.text_ctrl_1.SetMinSize((500,400))
##        else:
##            self.text_ctrl_1.SetMinSize((700,400))
##        self.text_ctrl_1.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
##        # end wxGlade
##        if mode=="help":fname=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\LiteBook_Readme.txt"
##        else:
##            fname=os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\LiteBook_WhatsNew.txt"
##        try:
##            f=open(fname,'r')
##            t_buff=f.read()
##        except:
##            dlg = wx.MessageDialog(self, u'帮助文件LiteBook_Readme.txt打开错误！',u"错误！",wx.OK|wx.ICON_ERROR)
##            dlg.ShowModal()
##            dlg.Destroy()
##            return False
##        coding=DetectFileCoding(os.path.dirname(AnyToUnicode(sys.argv[0]))+u"\\LiteBook_Readme.txt")
##        if coding=='error': return False
##        utext=AnyToUnicode(t_buff,coding)
##        self.text_ctrl_1.SetValue(utext)
##        f.close()
##
##    def __do_layout(self):
##        # begin wxGlade: HelpDialog.__do_layout
##        sizer_1 = wx.BoxSizer(wx.VERTICAL)
##        sizer_1.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)
##        sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
##        self.SetSizer(sizer_1)
##        sizer_1.Fit(self)
##        self.Layout()
##        # end wxGlade
##
##    def OnOK(self,event):
##        self.Destroy()
##
##    def OnKey(self,event):
##        key=event.GetKeyCode()
##        if key==wx.WXK_ESCAPE:
##            self.Destroy()
##        else:
##            event.Skip()
##
##
##    def OnWinActive(self,event):
##        if event.GetActive():self.text_ctrl_1.SetFocus()
### end of class HelpDialog
##
####class LiteBookApp(wx.PySimpleApp):
####    def __init__(self, *args, **kwds):
####        appname="litebook-"+wx.GetUserId()
####        m_checker=wx.SingleInstanceChecker(appname)
####        if m_checker.IsAnotherRunning()==True:
####            wx.LogError("已经有一个LiteBook的进程正在运行中")
####            print "error"
####            return False
####        wx.PySimpleApp.__init__(self, *args, **kwds)


class ClockThread:
    def __init__(self,win):
        self.win=win
        self.running=True
        thread.start_new_thread(self.run, ())

    def stop(self):
        self.running=False

    def run(self):
        global GlobalConfig,Ticking
        rt=0
        t=0
        while self.running:
            if Ticking:
                t+=1
                rt+=1
                thour=int(t/3600)
                tmin=int(t%3600/60)
                tsec=int(t%3600%60)
                if rt==GlobalConfig['RemindInterval']*60:
                    evt1=ReadTimeAlert(ReadTime=unicode(thour)+u'小时'+unicode(tmin)+u'分钟')
                    wx.PostEvent(self.win,evt1)
                    rt=0
                evt = UpdateStatusBarEvent(FieldNum = 2, Value =u'你已经阅读了 '+unicode(thour)+u'小时'+unicode(tmin)+u'分钟' )
                wx.PostEvent(self.win, evt)
            time.sleep(1)


class DisplayPosThread():

    def __init__(self,win):
        self.win=win
        self.running=True
        thread.start_new_thread(self.run, ())

    def stop(self):
        self.running=False


    def run(self):
        global OnScreenFileList
        while self.running:
            evt=GetPosEvent()
            wx.PostEvent(self.win, evt)
            percent=self.win.text_ctrl_1.GetPosPercent()
            if percent<>False:
                percent=int(percent)
                try:
                    txt=OnScreenFileList[0][0]+u' , '+unicode(percent)+u'%'
                except:
                    txt=" "
                evt = UpdateStatusBarEvent(FieldNum = 0, Value =txt)
            else:
                evt = UpdateStatusBarEvent(FieldNum = 0, Value ='')
            wx.PostEvent(self.win, evt)
            time.sleep(0.5)

class VersionCheckThread():

    def __init__(self,win,notify=True):
        self.win=win
        self.running=True
        thread.start_new_thread(self.run, (notify,))

    def stop(self):
        self.running=False


    def run(self,notify):
        global I_Version
        upgrade=False
        r=VersionCheck('win')
        url=''
        if not r:
            msg=u'版本检查过程中出错！'
        else:
            ver_f=float(r[0])
            if ver_f>I_Version:
                msg=u'LiteBook ver'+r[0]+u' 已经发布！'
                url=r[1]
                upgrade=True
            else:
                msg=u'你使用的LiteBook已经是最新版本了。'

        if not notify and not upgrade:
            return
        else:
            evt=VerCheckEvent(imsg = msg, iurl = url)
            #print "dididi"
            wx.PostEvent(self.win, evt)







class AutoCountThread():

    def __init__(self,win):
        self.win=win
        self.running=True
        thread.start_new_thread(self.run, ())

    def stop(self):
        self.running=False


    def run(self):
        global GlobalConfig
        i=int(GlobalConfig['AutoScrollInterval']/1000)
        while self.running:
            if self.win.autoscroll:

                evt = UpdateStatusBarEvent(FieldNum = 1, Value =u"自动翻页已开启:"+unicode(i))
                wx.PostEvent(self.win, evt)
                if i==0:
                    i=int(GlobalConfig['AutoScrollInterval']/1000)
                    evt=ScrollDownPage()
                    wx.PostEvent(self.win, evt)
                    #self.win.text_ctrl_1.ScrollPages(1)
                else:
                     i-=1
            else:
                evt = UpdateStatusBarEvent(FieldNum = 1, Value =u"自动翻页已关闭")
                wx.PostEvent(self.win, evt)
            time.sleep(1)

class MyConfig(ConfigParser.SafeConfigParser):
    def write(self, fp):
        """Write an .ini-format representation of the configuration state."""
        if self._defaults:
            fp.write("[%s]\n" % DEFAULTSECT)
            for (key, value) in self._defaults.items():
                fp.write("%s = %s\n" % (key, unicode(value).replace('\n', '\n\t')))
            fp.write("\n")
        for section in self._sections:
            fp.write("[%s]\n" % section)
            for (key, value) in self._sections[section].items():
                if key != "__name__":
                    fp.write("%s = %s\n" %
                             (key, unicode(value).replace('\n', '\n\t')))
            fp.write("\n")


class PreviewFrame(wx.Frame):
    """The Preview Frame for dir sidebar"""
    def __init__(self, *args, **kwds):
        # begin wxGlade: PreviewFrame.__init__
        kwds["style"] = wx.CAPTION|wx.FRAME_TOOL_WINDOW
        wx.Frame.__init__(self, *args, **kwds)
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PreviewFrame.__set_properties
        self.SetTitle(u"预览")
        self.SetSize((400, 200))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PreviewFrame.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        self.Layout()
        # end wxGlade
    def SetText(self,strtxt):
        self.text_ctrl_1.SetValue(strtxt)

# end of class PreviewFrame


class VerCheckDialog(wx.Dialog):
    def __init__(self,msg,url):
        #begin wxGlade: VerCheckDialog.__init__
        #kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self,None,-1)
        if url<>'':
            self.label_1 = hl.HyperLinkCtrl(self, wx.ID_ANY,msg,URL=url)
        else:
            self.label_1 = wx.StaticText(self, -1, msg)
        self.button_1 = wx.Button(self, -1, " OK ")
        self.Bind(wx.EVT_BUTTON,self.OnOK,self.button_1)
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: VerCheckDialog.__set_properties
        self.SetTitle(u"检查更新")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: VerCheckDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy.Add((200, 40), 0, wx.EXPAND, 0)
        sizer_3_copy.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_3_copy.Add(self.label_1, 0, 0, 0)
        sizer_3_copy.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_2_copy.Add(sizer_3_copy, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2_copy, 1, wx.EXPAND, 0)
        sizer_2.Add((200, 20), 0, wx.EXPAND, 0)
        sizer_3.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_3.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add((200, 20), 0, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class VerCheckDialog
    def OnOK(self,event):
        self.Destroy()

class FileHistoryDialog(wx.Dialog,wx.lib.mixins.listctrl.ColumnSorterMixin):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FileHistory.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.button_1 = wx.Button(self, -1, u"打开")
        self.button_2 = wx.Button(self, -1, u"取消")
        self.button_3 = wx.Button(self, -1, u"全部清空")
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.Bind(wx.EVT_BUTTON, self.OnLoadFile, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancell, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.clearHistory, self.button_3)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED,self.OnLoadFile,self.list_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_CHAR,self.OnKey)
        self.list_ctrl_1.InsertColumn(0,u'文件名',width=300)
        self.list_ctrl_1.InsertColumn(2,u'日期',width=120)
        self.image_list=wx.ImageList(16,16,mask=False,initialCount=5)
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\up.png",wx.BITMAP_TYPE_ANY)
        self.up=self.image_list.Add(bmp)
        #self.file_icon_list["up"]=8
        bmp=wx.Bitmap(GlobalConfig['IconDir']+u"\\down.png",wx.BITMAP_TYPE_ANY)
        self.dn=self.image_list.Add(bmp)
        self.list_ctrl_1.AssignImageList(self.image_list,wx.IMAGE_LIST_SMALL)
        #self.file_icon_list["down"]=9
        self.itemDataMap={}
        wx.lib.mixins.listctrl.ColumnSorterMixin.__init__(self,3)
        self.filename=''
        self.ftype=''
        self.zfilename=''
        self.load_history()


    def __set_properties(self):
        # begin wxGlade: FileHistory.__set_properties
        self.SetTitle(u"已打开文件历史")
        self.SetSize((700, 700))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FileHistory.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.list_ctrl_1, 8, wx.EXPAND, 0)
        sizer_1.Add((450, 5), 0, 0, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_2.Add(self.button_1, 0, 0, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_2.Add(self.button_2, 0, 0, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_2.Add(self.button_3, 0, 0, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_1.Add((20, 5), 0, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade
#unicode(filename)+"','"+ftype+"','"+unicode(zfile)+"',"+str(time.time())
    def load_history(self):
        global SqlCur
        SqlCur.execute("select * from book_history order by date desc")

        for row in SqlCur:
            filename=row[0]
            ftype=row[1]
            zfilename=row[2]
            filedate=row[3]
            filedate_data=filedate
            filedate=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(filedate))
            if ftype<>'normal':
                filename=zfilename+"|"+filename
            index=self.list_ctrl_1.InsertStringItem(sys.maxint,filename)
            self.list_ctrl_1.SetStringItem(index,1,filedate)
            self.list_ctrl_1.SetItemData(index,index)
            self.itemDataMap[index]=(filename,filedate_data)

    def GetSortImages(self):
        return (self.dn,self.up)

    def GetListCtrl(self):
        return self.list_ctrl_1

    def OnCancell(self, event):
        self.Hide()

    def clearHistory(self, event):
        global SqlCon,SqlCur
        dlg=wx.MessageDialog(self,u"此操作将清除所有已打开文件历史，是否继续？",u"清除已打开文件历史",wx.YES_NO|wx.NO_DEFAULT)
        if dlg.ShowModal()==wx.ID_YES:
            SqlCur.execute("delete from book_history")
            SqlCon.commit()
            self.list_ctrl_1.DeleteAllItems()
        dlg.Destroy()
        self.Hide()

    def OnLoadFile(self, event):
        filepath=self.list_ctrl_1.GetItemText(self.list_ctrl_1.GetFirstSelected())
        if filepath.find("|")==-1:
            self.Parent.LoadFile((filepath,))
        else:
            (zfilename,filename)=filepath.split('|',1)
            self.Parent.LoadFile((filename,),'zip',zfilename)
        self.Hide()

    def OnKey(self,event):
        key=event.GetKeyCode()
        if key==wx.WXK_ESCAPE:
            self.Hide()
        else:
            event.Skip()


# end of class FileHistory


class Search_Web_Dialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        global SqlCur,lastweb
        # begin wxGlade: Search_Web_Dialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
##        try:
##            SqlCur.execute("select * from book_website order by name")
##        except:
##            dlg = wx.MessageDialog(self, u'无法从litebook.db中获得小说网站的信息！',
##                               u'出错了！',
##                               wx.OK | wx.ICON_ERROR
##                               )
##            dlg.ShowModal()
##            dlg.Destroy()
##            self.Destroy()
##            return None
        weblist=[]
##        for row in SqlCur:
##            weblist.append(row[0])
        flist=glob.glob(os.path.dirname(AnyToUnicode(sys.argv[0]))+"\\plugin\\*.py")
        for f in flist:
            bname=os.path.basename(f)
            weblist.append(bname[:-3])
        weblist.insert(0,u'搜索所有网站')
        self.sizer_1_staticbox = wx.StaticBox(self, -1, u"搜索小说网站")
        self.label_2 = wx.StaticText(self, -1, u"关键字：    ")
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_WORDWRAP)
        self.label_3 = wx.StaticText(self, -1, u"选择网站：")
        self.choice_1 = wx.Choice(self, -1, choices=weblist)
        self.button_3 = wx.Button(self, -1, u" 搜索 ")
        self.button_4 = wx.Button(self, -1, u" 取消 ")
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OnCancell, self.button_4)
        self.text_ctrl_2.Bind(wx.EVT_CHAR,self.OnKey)
        self.choice_1.Bind(wx.EVT_CHAR,self.OnKey)
        self.Bind(wx.EVT_CHOICE, self.OnChosen, self.choice_1)





        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        global GlobalConfig,lastweb
        # begin wxGlade: Search_Web_Dialog.__set_properties
        self.SetTitle(u"搜索网站")
        self.text_ctrl_2.SetMinSize((200, 21))
        self.choice_1.SetMinSize((200, 21))
        if GlobalConfig['lastweb']=='' or not os.path.exists(os.path.dirname(AnyToUnicode(sys.argv[0]))+"\\plugin\\"+GlobalConfig['lastweb']+'.py'):
            self.choice_1.Select(0)
            self.ShowDesc(self.choice_1.GetString(0))
        else:
            self.choice_1.SetStringSelection(GlobalConfig['lastweb'])
            self.ShowDesc(GlobalConfig['lastweb'])
        self.text_ctrl_2.SetValue(GlobalConfig['lastwebsearchkeyword'])
        self.text_ctrl_1.SetMinSize((285, 84))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Search_Web_Dialog.__do_layout
        sizer_1 = wx.StaticBoxSizer(self.sizer_1_staticbox, wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_2.Add(self.text_ctrl_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_3.Add(self.label_3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_3.Add(self.choice_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_1.Add(self.text_ctrl_1, 0, wx.EXPAND, 0)
        sizer_4.Add(self.button_3, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.button_4, 0, wx.ALL|wx.ALIGN_RIGHT, 5)
        sizer_1.Add(sizer_4, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()

    def ShowDesc(self,desc):
        global PluginList
        self.text_ctrl_1.SetValue(u'此插件无介绍。')
        if desc<>u'搜索所有网站':
            try:
                self.text_ctrl_1.SetValue(PluginList[desc+'.py'].Description)
            except:
                pass


    def OnChosen(self,event):
        global lastweb
        GlobalConfig['lastweb']=self.choice_1.GetString(event.GetInt())
        self.ShowDesc(event.GetString())

    def OnCancell(self, event):
        self.Destroy()

    def OnOK(self,event):
        self.sitename=self.choice_1.GetString(self.choice_1.GetSelection())
        self.keyword=self.text_ctrl_2.GetValue()
        GlobalConfig['lastwebsearchkeyword']=self.keyword
        self.Destroy()

    def OnKey(self,event):
        key=event.GetKeyCode()
        if key==wx.WXK_ESCAPE:
            self.Destroy()
        else:
            event.Skip()



class web_search_result_dialog(wx.Dialog):
    def __init__(self, parent,sitename,keyword):
        global PluginList
        # begin wxGlade: web_search_result_dialog.__init__
        #kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self,parent,-1,style=wx.DEFAULT_DIALOG_STYLE)
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER|wx.LC_SINGLE_SEL)
        self.list_ctrl_1.InsertColumn(0,u'书名',width=320)
        self.list_ctrl_1.InsertColumn(1,u'作者')
        self.list_ctrl_1.InsertColumn(2,u'状态')
        self.list_ctrl_1.InsertColumn(3,u'大小')
        self.list_ctrl_1.InsertColumn(4,u'最后更新')
        self.list_ctrl_1.InsertColumn(5,u'网站')
        self.button_1 = wx.Button(self, -1, u" 下载(后台) ")
        self.button_2 = wx.Button(self, -1, u" 取消 ")
        dlg = wx.ProgressDialog(u"搜索中",
                       u"搜索进行中...",
                       maximum = 100,
                       parent=self,
                       style =
                         wx.PD_SMOOTH
                         |wx.PD_AUTO_HIDE
                        )
        self.rlist=[]
        if sitename<>u'搜索所有网站':

            self.rlist=None
            self.rlist=PluginList[sitename+'.py'].GetSearchResults(keyword,useproxy=GlobalConfig['useproxy'],proxyserver=GlobalConfig['proxyserver'],proxyport=GlobalConfig['proxyport'],proxyuser=GlobalConfig['proxyuser'],proxypass=GlobalConfig['proxypass'])
            for x in self.rlist:
                x['sitename']=sitename
        else:
            sr=[]
            flist=glob.glob(os.path.dirname(sys.argv[0])+"\\plugin\\*.py")
            #plugin_list=[]
            for x in range(len(flist)):
                sr.append(-1)
            i=0
            crv=threading.Condition()
            srm=[]
            for f in flist:
                bname=os.path.basename(f)

                m=SearchThread(self,PluginList[bname],keyword,sr,i,crv)
                srm.append(bname[:-3])
                i+=1
            isfinished=False
            while isfinished<>True:
                time.sleep(1)
                isfinished=isfull(sr)
                if isfinished==True: dlg.Update(100)
                else:
                    dlg.Update(isfinished)
            self.rlist=[]
            i=0
            for x in sr:
                if x<>None or x<>-1:
                    for m in x:m['sitename']=srm[i]
                    self.rlist+=x
                i+=1
        dlg.Update(100)
        dlg.Destroy()
        if self.rlist<>None:
            i=0
            for r in self.rlist:
                index=self.list_ctrl_1.InsertStringItem(sys.maxint,r['bookname'])
                self.list_ctrl_1.SetStringItem(index,1,r['authorname'])
                self.list_ctrl_1.SetStringItem(index,2,r['bookstatus'])
                self.list_ctrl_1.SetStringItem(index,3,r['booksize'])
                self.list_ctrl_1.SetStringItem(index,4,r['lastupdatetime'])
                self.list_ctrl_1.SetStringItem(index,5,r['sitename'])
                self.list_ctrl_1.SetItemData(index,i)
                i+=1
        else:
            dlg = wx.MessageDialog(self, u'搜索失败！',
                               u'出错了！',
                               wx.OK | wx.ICON_ERROR
                               )
            dlg.ShowModal()
            dlg.Destroy()
            self.Destroy()
            return None
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancell, self.button_2)
        self.list_ctrl_1.Bind(wx.EVT_CHAR,self.OnKey)
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: web_search_result_dialog.__set_properties
        self.SetTitle(u"搜索结果")
        self.list_ctrl_1.SetMinSize((709, 312))

        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: web_search_result_dialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        sizer_2.Add(self.button_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_2.Add(self.button_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_1.Add(sizer_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()

    def OnOK(self, event):
        global PluginList
        item=self.list_ctrl_1.GetNextSelected(-1)
        if item==-1:
            dlg = wx.MessageDialog(self, u'没有任何小说被选中！',
                                   u'错误',
                                   wx.OK | wx.ICON_ERROR
                                   )
            dlg.ShowModal()
            dlg.Destroy()
            return
        siten=self.list_ctrl_1.GetItem(item,5).GetText()

        self.GetParent().DT=DownloadThread(self.GetParent(),self.rlist[self.list_ctrl_1.GetItemData(item)]['book_index_url'],PluginList[siten+'.py'],self.list_ctrl_1.GetItemText(item))
        self.Destroy()

    def OnCancell(self, event):
        self.Destroy()

    def OnKey(self,event):
        key=event.GetKeyCode()
        if key==wx.WXK_ESCAPE:
            self.Destroy()
        else:
            event.Skip()


class DownloadThread:
    def __init__(self,win,url,plugin,bookname):
        self.win=win
        self.url=url
        self.plugin=plugin
        self.bookname=bookname
        #self.running=True
        thread.start_new_thread(self.run, ())

##    def stop(self):
##        self.running=False

    def run(self):
        evt2=DownloadUpdateAlert(Value='',FieldNum=3)
        self.bk=self.plugin.GetBook(self.url,bkname=self.bookname,win=self.win,evt=evt2,useproxy=GlobalConfig['useproxy'],proxyserver=GlobalConfig['proxyserver'],proxyport=GlobalConfig['proxyport'],proxyuser=GlobalConfig['proxyuser'],proxypass=GlobalConfig['proxypass'],concurrent=GlobalConfig['numberofthreads'])
        if self.bk<>None:
            evt1=DownloadFinishedAlert(name=self.bookname,status='ok',bk=self.bk)
        else:
            evt1=DownloadFinishedAlert(name=self.bookname,status='nok')
        wx.PostEvent(self.win,evt1)


class SearchThread(threading.Thread):
    def __init__(self,win,plugin,keyword,sr,i,cv):
        threading.Thread.__init__(self,group=None, target=None, name=None, args=(), kwargs={})
        self.win=win
        self.plugin=plugin
        self.keyword=keyword
        self.sr=sr
        self.i=i
        self.cv=cv
        self.start()


    def run(self):
        global GlobalConfig
        self.cv.acquire()
        self.sr[self.i]=self.plugin.GetSearchResults(self.keyword,useproxy=GlobalConfig['useproxy'],proxyserver=GlobalConfig['proxyserver'],proxyport=GlobalConfig['proxyport'],proxyuser=GlobalConfig['proxyuser'],proxypass=GlobalConfig['proxypass'])
        self.cv.release()



class MyChoiceDialog(wx.Dialog):
    def __init__(self, parent,msg='',title='',mychoices=[],default=0):
        # begin wxGlade: MyChoiceDialog.__init__
        wx.Dialog.__init__(self,parent,-1,style=wx.DEFAULT_DIALOG_STYLE)
        self.sizer_1_staticbox = wx.StaticBox(self, -1, u"选择")
        self.label_1 = wx.StaticText(self, -1, msg)
        self.choice_1 = wx.Choice(self, -1, choices=mychoices)
        self.button_1 = wx.Button(self, -1, u"确定")
        self.button_2 = wx.Button(self, -1, u"取消")
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancell, self.button_2)
        self.choice_1.Bind(wx.EVT_CHAR,self.OnKey)
        self.choice_1.Select(default)
        self.tit=title
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyChoiceDialog.__set_properties
        self.SetTitle(self.tit)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyChoiceDialog.__do_layout
        sizer_1 = wx.StaticBoxSizer(self.sizer_1_staticbox, wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.label_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5)
        sizer_1.Add(self.choice_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_2.Add(self.button_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_2.Add(self.button_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_1.Add(sizer_2, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def OnCancell(self, event):
        self.Hide()

    def OnOK(self,event):
        self.sitename=self.choice_1.GetString(self.choice_1.GetSelection())
        self.chosen=self.choice_1.GetStringSelection()
        self.Hide()

    def OnKey(self,event):
        key=event.GetKeyCode()
        if key==wx.WXK_ESCAPE:
            self.Destroy()
        else:
            event.Skip()


class cnsort:
    #use the code from henrysting@gmail.com, change a little bit
    def __init__(self):
    # 建立拼音辞典
        self.dic_py = dict()
        try:
            f_py = open(os.path.dirname(AnyToUnicode(sys.argv[0]))+'\\py.dat',"r")
            f_bh = open(os.path.dirname(AnyToUnicode(sys.argv[0]))+'\\bh.dat',"r")
        except:
            return None
        content_py = f_py.read()
        lines_py = content_py.split('\n')
        n=len(lines_py)
        for i in range(0,n-1):
            word_py, mean_py = lines_py[i].split('\t', 1)#将line用\t进行分割，最多分一次变成两块，保存到word和mean中去
            self.dic_py[word_py]=mean_py
        f_py.close()

        #建立笔画辞典
        self.dic_bh = dict()
        content_bh = f_bh.read()
        lines_bh = content_bh.split('\n')
        n=len(lines_bh)
        for i in range(0,n-1):
            word_bh, mean_bh = lines_bh[i].split('\t', 1)#将line用\t进行分割，最多分一次变成两块，保存到word和mean中去
            self.dic_bh[word_bh]=mean_bh
        f_bh.close()


    # 辞典查找函数
    def searchdict(self,dic,uchar):
        if isinstance(uchar, str):
            uchar = unicode(uchar,'utf-8')
        if uchar >= u'\u4e00' and uchar<=u'\u9fa5':
            value=dic.get(uchar.encode('utf-8'))
            if value == None:
                value = '*'
        else:
            value = uchar
        if isinstance(value,str):
            return value.decode('gbk')
        else:
            return value

    #比较单个字符
    def comp_char_PY(self,A,B):
        if A==B:
            return -1
        pyA=self.searchdict(self.dic_py,A)
        pyB=self.searchdict(self.dic_py,B)
        if pyA > pyB:
            return 1
        elif pyA < pyB:
            return 0
        else:
            bhA=eval(self.searchdict(self.dic_bh,A))
            bhB=eval(self.searchdict(self.dic_bh,B))
            if bhA > bhB:
                return 1
            elif bhA < bhB:
                return 0
            else:
                return False

    #比较字符串
    def comp_char(self,A,B):
        charA = A.decode("utf-8")
        charB = B.decode("utf-8")
        n=min(len(charA),len(charB))
        i=0
        while i < n:
            dd=self.comp_char_PY(charA[i],charB[i])
            if dd == -1:
                i=i+1
                if i==n:
                    dd=len(charA)>len(charB)
            else:
                break
        return dd

    # 排序函数
    def cnsort(self,nline):
        n = len(nline)
        lines="\n".join(nline)
        for i in range(1, n):  # 插入法
            tmp = nline[i]
            j = i
            while j > 0 and self.comp_char(nline[j-1],tmp):
                nline[j] = nline[j-1]
                j -= 1
            nline[j] = tmp
        return nline


##    # 将一个字符串转换成一个含每个字拼音的list，字符串中的连续的ASCII会按原样放在一个值内
##    def strToPYL(istr):
##        global dic_py
##        if isinstance(istr,str):
##            istr=istr.decode('gbk')
##            istr=istr.encode('utf-8')
##            istr=istr.decode('utf-8')
##        else:
##            if isinstance(istr,unicode):
##                istr=istr.encode('utf-8')
##                istr=istr.decode('utf-8')
##            else:
##                return None
##        lastasic=False
##        py_list=[]
##        for ichr in istr:
##           if ord(ichr)<=255:
##               if lastasic:
##                   py_list[len(py_list)-1]+=ichr
##               else:
##                   py_list.append(ichr)
##               lastasic=True
##           else:
##               py_list.append(searchdict(dic_py,ichr)[:-1])
##               lastasic=False
##        return py_list

    # 将一个字符串转换成一个含每个字拼音的list，字符串中的连续的ASCII会按原样放在一个值内
    def strToPYS(self,istr):
        if isinstance(istr,str):
            istr=istr.decode('gbk')
            istr=istr.encode('utf-8')
            istr=istr.decode('utf-8')
        else:
            if isinstance(istr,unicode):
                istr=istr.encode('utf-8')
                istr=istr.decode('utf-8')
            else:
                return None
        rstr=''
        for ichr in istr:
           if ord(ichr)<=255:rstr+=ichr
           else:
               rstr+=self.searchdict(self.dic_py,ichr)[:-1]
        return rstr

class CheckDialog(wx.Dialog):
    def __init__(self, parent,title='',clist=[]):
        # begin wxGlade: CheckDialog.__init__
        wx.Dialog.__init__(self,parent,-1,style=wx.DEFAULT_DIALOG_STYLE)
        self.list_box_1 = wx.CheckListBox(self, -1, choices=[])
        self.button_1 = wx.Button(self, -1, u"确定")
        self.button_2 = wx.Button(self, -1, u"取消")
        self.selections=[]
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancell, self.button_2)
        self.list_box_1.Set(clist)
        self.SetTitle(title)
        self.__do_layout()


        # end wxGlade



    def __do_layout(self):
        # begin wxGlade: CheckDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.list_box_1, 0, wx.EXPAND, 0)
        sizer_2.Add(self.button_1, 0, 0, 0)
        sizer_2.Add(self.button_2, 0, 0, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def OnCancell(self,evt):
        self.Destroy()
    def OnOK(self,evt):
        n=self.list_box_1.GetCount()
        i=0
        while i<n:
            if self.list_box_1.IsChecked(i):
                self.selections.append(i)
            i+=1
        self.Destroy()

    def GetChecks(self):
        return self.selections

# end of class CheckDialog


class SliderDialog(wx.Dialog):
    def __init__(self, parent,val,inpos=(-1,-1)):
        # begin wxGlade: MyDialog.__init__
        #kwds["style"] = wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self,parent, pos=inpos,style=wx.CLOSE_BOX|wx.THICK_FRAME)
        self.sizer_1_staticbox = wx.StaticBox(self, -1, u"当前进度")
        self.slider_1 = wx.Slider(self, -1, val, 0, 100, style=wx.SL_VERTICAL|wx.SL_LABELS)
        self.fristtime=True
        self.slider_1.Bind(wx.EVT_KEY_UP,self.OnChar)
        self.slider_1.Bind(wx.EVT_SCROLL,self.OnScroll)
        self.Bind(wx.EVT_KILL_FOCUS,self.Closeme)
        self.slider_1.Bind(wx.EVT_KILL_FOCUS,self.Closeme)
        self.__set_properties()
        self.__do_layout()
        self.win=self.GetParent()
        # end wxGlade


    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        # end wxGlade
        self.SetTransparent(220)


    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_1 = wx.StaticBoxSizer(self.sizer_1_staticbox, wx.VERTICAL)
        sizer_1.Add(self.slider_1, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyDialog
    def Closeme(self,evt=None):
        self.Destroy()
        self.win.slider=None
        return
##
##    def ToTop(self,evt):
##        self.win.text_ctrl_1.ScrollTop()
##
##    def ToBottom(self,evt):
##        self.win.text_ctrl_1.ScrollBottom()

    def OnScroll(self,evt):
        tval=self.slider_1.GetValue()
        if tval<>100:
            tpos=int(float(self.win.text_ctrl_1.ValueCharCount)*(float(tval)/100.0))
            self.win.text_ctrl_1.JumpTo(tpos)
        else:
            self.win.text_ctrl_1.ScrollBottom()



    def OnChar(self,evt):
        global KeyConfigList
        for k in KeyConfigList:
            if k[0]=='last':
                break
        keystr=keygrid.key2str(evt)
        for f in k:
            if f[0]==u'显示进度条':
                break
        if self.fristtime and keystr==f[1]:
            self.fristtime=False
            return

        key=evt.GetKeyCode()
        if key==wx.WXK_ESCAPE or keystr==f[1]:
            self.Closeme()
        else:
            evt.Skip()


    def fadein(self):
        t=100
        while t<250:
            self.SetTransparent(t)
            self.Show()
            time.sleep(0.01)
            t+=15



class NewOptionDialog(wx.Dialog):
    def __init__(self, parent):
        # begin wxGlade: NewOptionDialog.__init__
        #kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, parent=parent,title=u'选项对话框',pos=(0,0))
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.ScrolledWindow(self.notebook_1, -1, style=wx.TAB_TRAVERSAL)
        self.sizer_5_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, u"显示主题")
        self.sizer_6_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, u"显示模式")
        self.sizer_9_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, u"背景色或图片背景")
        self.sizer_13_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, u"字体")
        self.sizer_14_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, u"下划线")
        self.sizer_16_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, u"间距设置")
        self.sizer_2_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, u"启动设置")
        self.sizer_8_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, u"时间间隔")
        self.sizer_25_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, u"其他")
        self.sizer_32_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, u"下载")
        self.sizer_36_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, u"代理服务器")
        self.sizer_15_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, u"显示效果预览")
        self.sizer_26_staticbox = wx.StaticBox(self.notebook_1_pane_4, -1, u"按键方案")
        self.sizer_27_staticbox = wx.StaticBox(self.notebook_1_pane_4, -1, u"双击修改，右键增加删除")
        self.text_ctrl_3 = liteview.LiteView(self.notebook_1_pane_1, -1, "")
        self.combo_box_1 = wx.ComboBox(self.notebook_1_pane_1, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.button_1 = wx.Button(self.notebook_1_pane_1, -1, u"另存为")
        self.button_2 = wx.Button(self.notebook_1_pane_1, -1, u"删除")
        self.button_theme_import = wx.Button(self.notebook_1_pane_1, -1, u"导入")
        self.button_theme_export = wx.Button(self.notebook_1_pane_1, -1, u"导出")
        self.label_1 = wx.StaticText(self.notebook_1_pane_1, -1, u"选择显示模式：")
        self.combo_box_2 = wx.ComboBox(self.notebook_1_pane_1, -1, choices=[u"纸张模式", u"书本模式", u"竖排书本模式"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_3 = wx.StaticText(self.notebook_1_pane_1, -1, u"选择背景图片：")
        self.text_ctrl_2 = wx.TextCtrl(self.notebook_1_pane_1, -1, "",style=wx.TE_READONLY)
        self.button_3 = wx.Button(self.notebook_1_pane_1, -1, u"选择")
        self.label_4 = wx.StaticText(self.notebook_1_pane_1, -1, u"背景图片排列方式：")
        self.combo_box_3 = wx.ComboBox(self.notebook_1_pane_1, -1, choices=[u"平铺", u"居中"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_5 = wx.StaticText(self.notebook_1_pane_1, -1, u"选择背景色或背景图片：")
        self.combo_box_4 = wx.ComboBox(self.notebook_1_pane_1, -1, choices=[u"使用背景图片", u"使用背景色"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.button_4 = wx.Button(self.notebook_1_pane_1, -1, u"选择背景色")
        self.button_5 = wx.Button(self.notebook_1_pane_1, -1, u"选择字体")
        self.button_6 = wx.Button(self.notebook_1_pane_1, -1, u"字体颜色")
        self.label_6 = wx.StaticText(self.notebook_1_pane_1, -1, u"下划线样式")
        self.combo_box_5 = wx.ComboBox(self.notebook_1_pane_1, -1, choices=[u"不使用下划线", u"实线", u"虚线", u"长虚线", u"点虚线"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.button_7 = wx.Button(self.notebook_1_pane_1, -1, u"下划线颜色")
        self.label_7 = wx.StaticText(self.notebook_1_pane_1, -1, u"纸张模式页边距：")
        self.spin_ctrl_1 = wx.SpinCtrl(self.notebook_1_pane_1, -1, "", min=0, max=100)
        self.label_8 = wx.StaticText(self.notebook_1_pane_1, -1, u"书本模式页边距：")
        self.spin_ctrl_2 = wx.SpinCtrl(self.notebook_1_pane_1, -1, "", min=0, max=100)
        self.label_9 = wx.StaticText(self.notebook_1_pane_1, -1, u"竖排书本模式页边距：")
        self.spin_ctrl_3 = wx.SpinCtrl(self.notebook_1_pane_1, -1, "", min=0, max=100)
        self.label_10 = wx.StaticText(self.notebook_1_pane_1, -1, u"（竖排）书本模式页中距：")
        self.spin_ctrl_4 = wx.SpinCtrl(self.notebook_1_pane_1, -1, "", min=0, max=100)
        self.label_11 = wx.StaticText(self.notebook_1_pane_1, -1, u"行间距：")
        self.spin_ctrl_5 = wx.SpinCtrl(self.notebook_1_pane_1, -1, "", min=0, max=100)
        self.label_12 = wx.StaticText(self.notebook_1_pane_1, -1, u"竖排书本行间距：")
        self.spin_ctrl_6 = wx.SpinCtrl(self.notebook_1_pane_1, -1, "", min=0, max=100)
        self.checkbox_1 = wx.CheckBox(self.notebook_1_pane_2, -1, u"启动时自动载入上次阅读文件")
        self.checkbox_2 = wx.CheckBox(self.notebook_1_pane_2, -1, u"启动时检查版本更新")
        self.label_13 = wx.StaticText(self.notebook_1_pane_2, -1, u"自动翻页间隔（秒）：")
        self.spin_ctrl_8 = wx.SpinCtrl(self.notebook_1_pane_2, -1, "", min=0, max=100)
        self.label_14 = wx.StaticText(self.notebook_1_pane_2, -1, u"连续阅读提醒时间（分钟）：")
        self.spin_ctrl_9 = wx.SpinCtrl(self.notebook_1_pane_2, -1, "", min=0, max=100)
        self.checkbox_3 = wx.CheckBox(self.notebook_1_pane_2, -1, u"是否启用ESC作为老板键")
        self.checkbox_4 = wx.CheckBox(self.notebook_1_pane_2, -1, u"是否在文件选择侧边栏中预览文件内容")
        self.checkbox_5 = wx.CheckBox(self.notebook_1_pane_2, -1, u"是否只在文件选择侧边栏中只显示支持的文件类型")
        self.label_15 = wx.StaticText(self.notebook_1_pane_2, -1, u"最大曾经打开文件菜单数：")
        self.spin_ctrl_10 = wx.SpinCtrl(self.notebook_1_pane_2, -1, "", min=0, max=100)
        self.label_16 = wx.StaticText(self.notebook_1_pane_3, -1, u"下载完毕后的缺省动作：")
        self.combo_box_6 = wx.ComboBox(self.notebook_1_pane_3, -1, choices=[u"直接阅读", u"另存为文件", u"直接保存在缺省目录下"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_17 = wx.StaticText(self.notebook_1_pane_3, -1, u"保存的缺省目录：")
        self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
        self.button_12 = wx.Button(self.notebook_1_pane_3, -1, u"选择")
        self.label_18 = wx.StaticText(self.notebook_1_pane_3, -1, u"同时下载的线程个数（需插件支持；不能超过50）：")
        self.spin_ctrl_11 = wx.SpinCtrl(self.notebook_1_pane_3, -1, "20", min=1, max=50)
        self.checkbox_6 = wx.CheckBox(self.notebook_1_pane_3, -1, u"启用代理服务器")
        self.label_19 = wx.StaticText(self.notebook_1_pane_3, -1, u"代理服务器地址：")
        self.text_ctrl_4 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
        self.label_20 = wx.StaticText(self.notebook_1_pane_3, -1, u"代理服务器端口：")
        self.spin_ctrl_12 = wx.SpinCtrl(self.notebook_1_pane_3, -1, "", min=1, max=65536)
        self.label_21 = wx.StaticText(self.notebook_1_pane_3, -1, u"用户名：")
        self.text_ctrl_5 = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
        self.label_22 = wx.StaticText(self.notebook_1_pane_3, -1, u"密码：")
        self.text_ctrl_6 = wx.TextCtrl(self.notebook_1_pane_3, -1, "", style=wx.TE_PASSWORD)

        self.combo_box_7 = wx.ComboBox(self.notebook_1_pane_4, -1, choices=[], style=wx.CB_DROPDOWN)
        self.button_Key_Save = wx.Button(self.notebook_1_pane_4, -1, u"另存为")
        self.button_Key_Del = wx.Button(self.notebook_1_pane_4, -1, u"删除")
        self.button_key_import = wx.Button(self.notebook_1_pane_4, -1, u"导入")
        self.button_key_export = wx.Button(self.notebook_1_pane_4, -1, u"导出")

        self.grid_1 = keygrid.KeyConfigGrid(self.notebook_1_pane_4)

        self.button_10 = wx.Button(self, -1, u"确定")
        self.button_11 = wx.Button(self, -1, u"取消")


        #绑定事件处理
        self.Bind(wx.EVT_COMBOBOX,self.OnThemeSelect,self.combo_box_1)
        self.Bind(wx.EVT_COMBOBOX,self.OnKeySelect,self.combo_box_7)
        self.Bind(wx.EVT_COMBOBOX,self.OnShowmodeSelect,self.combo_box_2)
        self.Bind(wx.EVT_COMBOBOX,self.OnBGlayoutSelect,self.combo_box_3)
        self.Bind(wx.EVT_COMBOBOX,self.OnBGSet,self.combo_box_4)
        self.Bind(wx.EVT_COMBOBOX,self.OnSelULS,self.combo_box_5)
        self.Bind(wx.EVT_BUTTON,self.OnCancell,self.button_11)
        self.Bind(wx.EVT_BUTTON,self.OnDelTheme,self.button_2)
        self.Bind(wx.EVT_BUTTON,self.OnSaveTheme,self.button_1)
        self.Bind(wx.EVT_BUTTON,self.OnSelectBG,self.button_3)
        self.Bind(wx.EVT_BUTTON,self.OnSelFont,self.button_5)
        self.Bind(wx.EVT_BUTTON,self.OnSelFColor,self.button_6)
        self.Bind(wx.EVT_BUTTON,self.OnSelectBGColor,self.button_4)
        self.Bind(wx.EVT_BUTTON,self.OnSelectULColor,self.button_7)
        self.Bind(wx.EVT_BUTTON,self.SelectDir,self.button_12)
        self.Bind(wx.EVT_BUTTON,self.OnOK,self.button_10)
        self.Bind(wx.EVT_BUTTON,self.OnDelKey,self.button_Key_Del)
        self.Bind(wx.EVT_BUTTON,self.OnSaveKey,self.button_Key_Save)

        self.Bind(wx.EVT_BUTTON,self.OnImportKey,self.button_key_import)
        self.Bind(wx.EVT_BUTTON,self.OnExportKey,self.button_key_export)
        self.Bind(wx.EVT_BUTTON,self.OnExportTheme,self.button_theme_export)
        self.Bind(wx.EVT_BUTTON,self.OnImportTheme,self.button_theme_import)

        self.Bind(wx.EVT_SPINCTRL,self.OnUpdateSpace,self.spin_ctrl_1)
        self.Bind(wx.EVT_SPINCTRL,self.OnUpdateSpace,self.spin_ctrl_2)
        self.Bind(wx.EVT_SPINCTRL,self.OnUpdateSpace,self.spin_ctrl_3)
        self.Bind(wx.EVT_SPINCTRL,self.OnUpdateSpace,self.spin_ctrl_4)
        self.Bind(wx.EVT_SPINCTRL,self.OnUpdateSpace,self.spin_ctrl_5)
        self.Bind(wx.EVT_SPINCTRL,self.OnUpdateSpace,self.spin_ctrl_6)



        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: NewOptionDialog.__set_properties
        self.SetTitle(u"选项对话框")
        self.SetSize((500, 600))
        self.text_ctrl_3.SetSize((450,300))
        self.combo_box_2.SetSelection(-1)
        self.text_ctrl_2.SetMinSize((300, -1))
        self.combo_box_3.SetSelection(-1)
        self.combo_box_4.SetSelection(-1)
        self.combo_box_5.SetSelection(0)
        self.notebook_1_pane_1.SetScrollRate(10, 10)
        self.combo_box_6.SetSelection(-1)
        self.text_ctrl_1.SetMinSize((150, -1))
        self.text_ctrl_4.SetMinSize((200, -1))
        self.spin_ctrl_11.SetMinSize((100,-1))

        #set preview area to current setting
        self.text_ctrl_3.SetShowMode(GlobalConfig['showmode'])
        if GlobalConfig['backgroundimg']<>'' and GlobalConfig['backgroundimg']<>None:
            self.text_ctrl_3.SetImgBackground(GlobalConfig['backgroundimg'],GlobalConfig['backgroundimglayout'])
        else:
            self.text_ctrl_3.SetBackgroundColour(GlobalConfig['CurBColor'])
        self.text_ctrl_3.SetFColor(GlobalConfig['CurFColor'])
        self.text_ctrl_3.SetFont(GlobalConfig['CurFont'])
        self.text_ctrl_3.SetUnderline(GlobalConfig['underline'],GlobalConfig['underlinestyle'],GlobalConfig['underlinecolor'])
        self.text_ctrl_3.SetSpace(GlobalConfig['pagemargin'],GlobalConfig['bookmargin'],GlobalConfig['vbookmargin'],GlobalConfig['centralmargin'],GlobalConfig['linespace'],GlobalConfig['vlinespace'])
        self.text_ctrl_3.SetValue(u"《老子》八十一章\n\n　1.道可道，非常道。名可名，非常名。无名天地之始。有名万物之母。故常无欲以观其妙。常有欲以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。\n\n　2.天下皆知美之为美，斯恶矣；皆知善之为善，斯不善已。故有无相生，难易相成，长短相形，高下相倾，音声相和，前後相随。是以圣人处无为之事，行不言之教。万物作焉而不辞。生而不有，为而不恃，功成而弗居。夫唯弗居，是以不去。\n\n　3.不尚贤， 使民不争。不贵难得之货，使民不为盗。不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹，弱其志，强其骨；常使民无知、无欲，使夫智者不敢为也。为无为，则无不治。\n\n　4.道冲而用之，或不盈。渊兮似万物之宗。解其纷，和其光，同其尘，湛兮似或存。吾不知谁之子，象帝之先。\n\n　5.天地不仁，以万物为刍狗。圣人不仁，以百姓为刍狗。天地之间，其犹橐迭乎？虚而不屈，动而愈出。多言数穷，不如守中。")
        #set initial value for display tab
        self.combo_box_1.Append(u'当前设置')
        for x in ThemeList:
            self.combo_box_1.Append(x['name'])
        self.combo_box_1.Select(0)

        if GlobalConfig['showmode']=='paper':
            self.combo_box_2.Select(0)
        else:
            if GlobalConfig['showmode']=='book': self.combo_box_2.Select(1)
            else:
                if GlobalConfig['showmode']=='vbook': self.combo_box_2.Select(2)

        if GlobalConfig['backgroundimg']<>'' and GlobalConfig['backgroundimg']<>None:
            self.combo_box_4.Select(0)
            self.text_ctrl_2.SetValue(GlobalConfig['backgroundimg'])
            if GlobalConfig['backgroundimglayout']=='tile':
                self.combo_box_3.Select(0)
            else:
                self.combo_box_3.Select(1)
        else:
            self.combo_box_4.Select(1)
            self.text_ctrl_2.Disable()
            self.button_3.Disable()
            self.combo_box_3.Disable()

        if GlobalConfig['underline']==False:
            self.combo_box_5.Select(0)
        else:
            if GlobalConfig['underlinestyle']==wx.SOLID: self.combo_box_5.Select(1)
            else:
                if GlobalConfig['underlinestyle']==wx.DOT: self.combo_box_5.Select(2)
                else:
                    if GlobalConfig['underlinestyle']==wx.LONG_DASH: self.combo_box_5.Select(3)
                    else:
                        if GlobalConfig['underlinestyle']==wx.DOT_DASH: self.combo_box_5.Select(4)
        self.spin_ctrl_1.SetValue(GlobalConfig['pagemargin'])
        self.spin_ctrl_2.SetValue(GlobalConfig['bookmargin'])
        self.spin_ctrl_3.SetValue(GlobalConfig['vbookmargin'])
        self.spin_ctrl_4.SetValue(GlobalConfig['centralmargin'])
        self.spin_ctrl_5.SetValue(GlobalConfig['linespace'])
        self.spin_ctrl_6.SetValue(GlobalConfig['vlinespace'])
        #set initial value for control tab
        self.checkbox_1.SetValue(GlobalConfig['LoadLastFile'])
        self.checkbox_3.SetValue(GlobalConfig['EnableESC'])
        self.checkbox_4.SetValue(GlobalConfig['EnableSidebarPreview'])
        self.spin_ctrl_8.SetValue(GlobalConfig['AutoScrollInterval']/1000)
        self.spin_ctrl_9.SetValue(GlobalConfig['RemindInterval'])
        self.checkbox_2.SetValue(GlobalConfig['VerCheckOnStartup'])
        self.checkbox_5.SetValue(not GlobalConfig['ShowAllFileInSidebar'])
        self.spin_ctrl_10.SetValue(GlobalConfig['MaxOpenedFiles'])
        #set inital value for download tab
        self.combo_box_6.Select(GlobalConfig['DAUDF'])
        self.checkbox_6.SetValue(GlobalConfig['useproxy'])
        self.text_ctrl_4.SetValue(unicode(GlobalConfig['proxyserver']))
        self.spin_ctrl_12.SetValue(GlobalConfig['proxyport'])
        self.text_ctrl_5.SetValue(unicode(GlobalConfig['proxyuser']))
        self.text_ctrl_6.SetValue(unicode(GlobalConfig['proxypass']))
        self.spin_ctrl_11.SetValue(GlobalConfig['numberofthreads'])
        self.text_ctrl_1.SetValue(unicode(GlobalConfig['defaultsavedir']))


        #load the initial value for keyconfig tab
        for kconfig in KeyConfigList:
            if kconfig[0]<>'last':
                self.combo_box_7.Append(kconfig[0])
            else:
                self.combo_box_7.Append(u'当前设置')
        self.combo_box_7.Select(0)
        self.grid_1.Load(KeyConfigList[0])
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: NewOptionDialog.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.StaticBoxSizer(self.sizer_26_staticbox, wx.HORIZONTAL)
        sizer_27 = wx.StaticBoxSizer(self.sizer_27_staticbox, wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        sizer_36 = wx.StaticBoxSizer(self.sizer_36_staticbox, wx.VERTICAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.StaticBoxSizer(self.sizer_32_staticbox, wx.VERTICAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.StaticBoxSizer(self.sizer_25_staticbox, wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.VERTICAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.StaticBoxSizer(self.sizer_16_staticbox, wx.VERTICAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.StaticBoxSizer(self.sizer_14_staticbox, wx.HORIZONTAL)
        sizer_13 = wx.StaticBoxSizer(self.sizer_13_staticbox, wx.HORIZONTAL)
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        sizer_15 = wx.StaticBoxSizer(self.sizer_15_staticbox, wx.HORIZONTAL)
        sizer_15.Add(self.text_ctrl_3, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_5.Add(self.combo_box_1, 0, 0, 0)
        sizer_5.Add(self.button_1, 0, 0, 0)
        sizer_5.Add(self.button_2, 0, 0, 0)
        sizer_5.Add(self.button_theme_export, 0, 0, 0)
        sizer_5.Add(self.button_theme_import, 0, 0, 0)
        sizer_4.Add(sizer_5, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_6.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(self.combo_box_2, 0, 0, 0)
        sizer_4.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_10.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10.Add(self.text_ctrl_2, 0, 0, 0)
        sizer_10.Add(self.button_3, 0, 0, 0)
        sizer_9.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_11.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add(self.combo_box_3, 0, 0, 0)
        sizer_9.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_12.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12.Add(self.combo_box_4, 0, 0, 0)
        sizer_12.Add(self.button_4, 0, 0, 0)
        sizer_9.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_13.Add(self.button_5, 0, 0, 0)
        sizer_13.Add(self.button_6, 0, 0, 0)
        sizer_4.Add(sizer_13, 0, wx.EXPAND, 0)
        sizer_14.Add(self.label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add(self.combo_box_5, 0, 0, 0)
        sizer_14.Add(self.button_7, 0, 0, 0)
        sizer_4.Add(sizer_14, 0, wx.EXPAND, 0)
        sizer_17.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_17.Add(self.spin_ctrl_1, 0, 0, 0)
        sizer_16.Add(sizer_17, 1, wx.EXPAND, 0)
        sizer_18.Add(self.label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_18.Add(self.spin_ctrl_2, 0, 0, 0)
        sizer_16.Add(sizer_18, 1, wx.EXPAND, 0)
        sizer_19.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_19.Add(self.spin_ctrl_3, 0, 0, 0)
        sizer_16.Add(sizer_19, 1, wx.EXPAND, 0)
        sizer_20.Add(self.label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(self.spin_ctrl_4, 0, 0, 0)
        sizer_16.Add(sizer_20, 1, wx.EXPAND, 0)
        sizer_21.Add(self.label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_21.Add(self.spin_ctrl_5, 0, 0, 0)
        sizer_16.Add(sizer_21, 1, wx.EXPAND, 0)
        sizer_22.Add(self.label_12, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_22.Add(self.spin_ctrl_6, 0, 0, 0)
        sizer_16.Add(sizer_22, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_16, 0, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(sizer_4)
        sizer_2.Add(self.checkbox_1, 0, 0, 0)
        sizer_2.Add(self.checkbox_2, 0, 0, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_23.Add(self.label_13, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_23.Add(self.spin_ctrl_8, 0, 0, 0)
        sizer_8.Add(sizer_23, 1, wx.EXPAND, 0)
        sizer_24.Add(self.label_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_24.Add(self.spin_ctrl_9, 0, 0, 0)
        sizer_8.Add(sizer_24, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_25.Add(self.checkbox_3, 0, 0, 0)
        sizer_25.Add(self.checkbox_4, 0, 0, 0)
        sizer_25.Add(self.checkbox_5, 0, 0, 0)
        sizer_29.Add(self.label_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_29.Add(self.spin_ctrl_10, 0, 0, 0)
        sizer_25.Add(sizer_29, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_25, 0, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetSizer(sizer_1)
        sizer_33.Add(self.label_16, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_33.Add(self.combo_box_6, 0, 0, 0)
        sizer_32.Add(sizer_33, 1, wx.EXPAND, 0)
        sizer_34.Add(self.label_17, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_34.Add(self.text_ctrl_1, 0, 0, 0)
        sizer_34.Add(self.button_12, 0, 0, 0)
        sizer_32.Add(sizer_34, 1, wx.EXPAND, 0)
        sizer_35.Add(self.label_18, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_35.Add(self.spin_ctrl_11, 0, 0, 0)
        sizer_32.Add(sizer_35, 1, wx.EXPAND, 0)
        sizer_31.Add(sizer_32, 0, wx.EXPAND, 0)
        sizer_36.Add(self.checkbox_6, 0, 0, 0)
        sizer_37.Add(self.label_19, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_37.Add(self.text_ctrl_4, 0, 0, 0)
        sizer_36.Add(sizer_37, 1, wx.EXPAND, 0)
        sizer_38.Add(self.label_20, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_38.Add(self.spin_ctrl_12, 0, 0, 0)
        sizer_36.Add(sizer_38, 1, wx.EXPAND, 0)
        sizer_39.Add(self.label_21, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_39.Add(self.text_ctrl_5, 0, 0, 0)
        sizer_36.Add(sizer_39, 1, wx.EXPAND, 0)
        sizer_40.Add(self.label_22, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_40.Add(self.text_ctrl_6, 0, 0, 0)
        sizer_36.Add(sizer_40, 1, wx.EXPAND, 0)
        sizer_31.Add(sizer_36, 0, wx.EXPAND, 0)
        self.notebook_1_pane_3.SetSizer(sizer_31)
        sizer_26.Add(self.combo_box_7, 0, 0, 0)
        sizer_26.Add(self.button_Key_Save, 0, 0, 0)
        sizer_26.Add(self.button_Key_Del, 0, 0, 0)
        sizer_26.Add(self.button_key_export, 0, 0, 0)
        sizer_26.Add(self.button_key_import, 0, 0, 0)

        sizer_7.Add(sizer_26, 0, wx.EXPAND, 0)
        sizer_27.Add(self.grid_1,1,wx.EXPAND,0)
        #sizer_7.Add(self.grid_1, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_27, 1, wx.EXPAND, 0)
        self.notebook_1_pane_4.SetSizer(sizer_7)
        self.notebook_1.AddPage(self.notebook_1_pane_1, u"显示设置")
        self.notebook_1.AddPage(self.notebook_1_pane_2, u"控制设置")
        self.notebook_1.AddPage(self.notebook_1_pane_3, u"下载设置")
        self.notebook_1.AddPage(self.notebook_1_pane_4, u"按键设置")
        sizer_3.Add(self.notebook_1, 1, wx.EXPAND, 0)
        sizer_30.Add((100, 10), 1, wx.EXPAND, 0)
        sizer_30.Add(self.button_10, 0, 0, 0)
        sizer_30.Add((20, 10), 1, wx.EXPAND, 0)
        sizer_30.Add(self.button_11, 0, 0, 0)
        sizer_30.Add((50, 10), 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_30, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade


    def OnCancell(self,event):
        self.Destroy()


    def OnOK(self,event):
        global ThemeList,GlobalConfig,KeyConfigList
        GlobalConfig['CurFont']=self.text_ctrl_3.GetFont()
        GlobalConfig['CurFColor']=self.text_ctrl_3.GetFColor()
        GlobalConfig['CurBColor']=self.text_ctrl_3.GetBackgroundColour()
        if self.combo_box_4.GetSelection()==0:
            GlobalConfig['backgroundimg']=self.text_ctrl_3.bg_img_path
        else:
            GlobalConfig['backgroundimg']=None
        GlobalConfig['showmode']=self.text_ctrl_3.show_mode
        GlobalConfig['backgroundimglayout']=self.text_ctrl_3.bg_style
        GlobalConfig['underline']=self.text_ctrl_3.under_line
        GlobalConfig['underlinestyle']=self.text_ctrl_3.under_line_style
        GlobalConfig['underlinecolor']=self.text_ctrl_3.under_line_color
        GlobalConfig['pagemargin']=self.text_ctrl_3.pagemargin
        GlobalConfig['bookmargin']=self.text_ctrl_3.bookmargin
        GlobalConfig['vbookmargin']=self.text_ctrl_3.vbookmargin
        GlobalConfig['centralmargin']=self.text_ctrl_3.centralmargin
        GlobalConfig['linespace']=self.text_ctrl_3.linespace
        GlobalConfig['vlinespace']=self.text_ctrl_3.vlinespace

        GlobalConfig['LoadLastFile']=self.checkbox_1.GetValue()
        GlobalConfig['EnableESC']=self.checkbox_3.GetValue()
        GlobalConfig['VerCheckOnStartup']=self.checkbox_2.GetValue()
        if GlobalConfig['ShowAllFileInSidebar']==self.checkbox_5.GetValue():
            self.GetParent().UpdateSidebar=True
        GlobalConfig['ShowAllFileInSidebar']=not self.checkbox_5.GetValue()
        if GlobalConfig['EnableESC']:
            self.GetParent().RegisterHotKey(1,0,wx.WXK_ESCAPE)
            self.GetParent().Bind(wx.EVT_HOTKEY,self.GetParent().OnESC)
        else:
            self.GetParent().UnregisterHotKey(1)
            self.GetParent().Unbind(wx.EVT_HOTKEY)

        GlobalConfig['EnableSidebarPreview']=self.checkbox_4.GetValue()
        try:
            GlobalConfig['AutoScrollInterval']=float(self.spin_ctrl_8.GetValue())*1000
        except:
            GlobalConfig['AutoScrollInterval']=12000
        try:
            GlobalConfig['RemindInterval']=abs(int(self.spin_ctrl_9.GetValue()))
        except:
            GlobalConfig['RemindInterval']=60
        try:
            GlobalConfig['MaxOpenedFiles']=abs(int(self.spin_ctrl_10.GetValue()))
        except:
            GlobalConfig['MaxOpenedFiles']=5

        GlobalConfig['DAUDF']=self.combo_box_6.GetSelection()
        GlobalConfig['useproxy']=self.checkbox_6.GetValue()
        GlobalConfig['proxyserver']=self.text_ctrl_4.GetValue()
        try:
            GlobalConfig['proxyport']=int(self.spin_ctrl_12.GetValue())
        except:
            GlobalConfig['proxyport']=0
        GlobalConfig['proxyuser']=self.text_ctrl_5.GetValue()
        GlobalConfig['proxypass']=self.text_ctrl_6.GetValue()
        try:
            GlobalConfig['numberofthreads']=int(self.spin_ctrl_11.GetValue())
        except:
            GlobalConfig['numberofthreads']=1
        if GlobalConfig['numberofthreads']<=0 or GlobalConfig['numberofthreads']>50:
            GlobalConfig['numberofthreads']=1
        if not os.path.exists(self.text_ctrl_1.GetValue()):
            GlobalConfig['defaultsavedir']=''
        else:
            GlobalConfig['defaultsavedir']=self.text_ctrl_1.GetValue()
        if GlobalConfig['defaultsavedir']=='' and GlobalConfig['DAUDF']==2:
            dlg = wx.MessageDialog(self, u'请指定正确的缺省保存目录!',
                               u'出错了！',
                               wx.OK | wx.ICON_ERROR
                               )
            dlg.ShowModal()
            dlg.Destroy()
            return

        #save key config
        for x in KeyConfigList:
            if x[0]=='last':
                KeyConfigList.remove(x)
                break
        kconfig=[]
        kconfig.append(('last'))
        rs=self.grid_1.GetNumberRows()
        if rs>0:
            i=0
            while i<rs:
                kconfig.append((self.grid_1.GetCellValue(i,0),self.grid_1.GetCellValue(i,1)))
                i+=1
            KeyConfigList.insert(0,kconfig)
        self.Destroy()


    def OnDelKey(self,evt):
        global KeyConfigList
        name=self.combo_box_7.GetValue()
        if name==u'当前设置':
            dlg = wx.MessageDialog(self, u'你不能删除这个方案！',u"错误",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return
        for x in KeyConfigList:
            if x[0]==name:
                KeyConfigList.remove(x)
                break
        self.combo_box_7.Clear()
        for t in KeyConfigList:
            if t[0]=='last':self.combo_box_7.Append(u'当前设置')
            else:
                self.combo_box_7.Append(t[0])
        self.combo_box_7.SetSelection(0)



    def OnDelTheme(self,event):
        global ThemeList
        name=self.combo_box_1.GetValue()
        if self.combo_box_1.GetSelection()==0:
            dlg = wx.MessageDialog(self, u'你不能删除这个方案！',u"错误",wx.OK|wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return
        i=0
        n=len(ThemeList)
        while i<n:
            if ThemeList[i]['name']==name:
                ThemeList.__delitem__(i)
                break
            i+=1
        self.combo_box_1.Clear()
        self.combo_box_1.Append(u'当前设置')
        for t in ThemeList:
            self.combo_box_1.Append(t['name'])
        self.combo_box_1.SetSelection(0)
        self.OnThemeSelect(None)

    def OnSaveKey(self,evt):
        global KeyConfigList
        kconfig=[]
        kconfig.append((''))
        while kconfig[0]=='':
            dlg = wx.TextEntryDialog(
                    self, u'请输入新显示方案的名称(不能为空)：',
                    u'另存为新方案')
            if dlg.ShowModal() == wx.ID_OK:
                kconfig[0]=dlg.GetValue().strip()
                dlg.Destroy()
            else:
                dlg.Destroy()
                return
        for t in KeyConfigList:
            if t[0]==kconfig[0]:
                dlg = wx.MessageDialog(self, u'已经有叫这个名字的显示方案了，你确定要覆盖原有方案吗？',u"提示！",wx.YES_NO|wx.ICON_QUESTION)
                if dlg.ShowModal()==wx.ID_NO:
                    dlg.Destroy()
                    return
                else:
                    KeyConfigList.remove(t)
        rs=self.grid_1.GetNumberRows()
        if rs>0:
            i=0
            while i<rs:
                kconfig.append((self.grid_1.GetCellValue(i,0),self.grid_1.GetCellValue(i,1)))
                i+=1
            if kconfig[0]=='last':
                KeyConfigList.insert(0,kconfig)
            else:
                KeyConfigList.append(kconfig)
            self.combo_box_7.Clear()
            for t in KeyConfigList:
                if t[0]=='last':self.combo_box_7.Append(u'当前设置')
                else:
                    self.combo_box_7.Append(t[0])
            self.combo_box_7.SetSelection(self.combo_box_7.GetCount()-1)






    def OnSaveTheme(self,event):
        global ThemeList
        l={}
        l['name']=''
        while l['name']=='':
            dlg = wx.TextEntryDialog(
                    self, u'请输入新显示方案的名称(不能为空)：',
                    u'另存为新方案')
            if dlg.ShowModal() == wx.ID_OK:
                l['name']=dlg.GetValue().strip()
                dlg.Destroy()
            else:
                dlg.Destroy()
                return
        for t in ThemeList:
            if t['name']==l['name']:
                dlg = wx.MessageDialog(self, u'已经有叫这个名字的显示方案了，你确定要覆盖原有方案吗？',u"提示！",wx.YES_NO|wx.ICON_QUESTION)
                if dlg.ShowModal()==wx.ID_NO:
                    dlg.Destroy()
                    return
                else:
                    ThemeList.remove(t)
        l['font']=self.text_ctrl_3.GetFont()
        l['fcolor']=self.text_ctrl_3.GetFColor()
        l['bcolor']=self.text_ctrl_3.GetBackgroundColour()
        l['config']=unicode(l['font'].GetPointSize())+u':'+unicode(l['font'].GetFamily())+u':'+unicode(l['font'].GetStyle())+u':'+unicode(l['font'].GetWeight())+u':'+unicode(l['font'].GetUnderlined())+u':'+l['font'].GetFaceName()+u':'+unicode(l['font'].GetDefaultEncoding())+u':'+unicode(l['fcolor'])+u':'+unicode(l['bcolor'])
        r=self.text_ctrl_3.GetConfig()
        l['backgroundimg']=r['backgroundimg']
        l['showmode']=r['showmode']
        l['backgroundimglayout']=r['backgroundimglayout']
        l['underline']=r['underline']
        l['underlinestyle']=r['underlinestyle']
        l['underlinecolor']=r['underlinecolor']
        l['pagemargin']=r['pagemargin']
        l['bookmargin']=r['bookmargin']
        l['vbookmargin']=r['vbookmargin']
        l['centralmargin']=r['centralmargin']
        l['linespace']=r['linespace']
        l['vlinespace']=r['vlinespace']
        l['config']+=u'|'+unicode(l['backgroundimg'])
        l['config']+=u'|'+unicode(l['showmode'])
        l['config']+=u'|'+unicode(l['backgroundimglayout'])
        l['config']+=u'|'+unicode(l['underline'])
        l['config']+=u'|'+unicode(l['underlinestyle'])
        l['config']+=u'|'+unicode(l['underlinecolor'])
        l['config']+=u'|'+unicode(l['pagemargin'])
        l['config']+=u'|'+unicode(l['bookmargin'])
        l['config']+=u'|'+unicode(l['vbookmargin'])
        l['config']+=u'|'+unicode(l['centralmargin'])
        l['config']+=u'|'+unicode(l['linespace'])
        l['config']+=u'|'+unicode(l['vlinespace'])



        ThemeList.append(l)
        self.combo_box_1.Clear()
        self.combo_box_1.Append(u'当前设置')
        for t in ThemeList:
            self.combo_box_1.Append(t['name'])
        self.combo_box_1.SetSelection(self.combo_box_1.GetCount()-1)

    def OnShowmodeSelect(self,evt):
        id=evt.GetInt()
        modes=['paper','book','vbook']
        self.text_ctrl_3.SetShowMode(modes[id])
        self.text_ctrl_3.ReDraw()
    def OnBGlayoutSelect(self,evt):
        id=evt.GetInt()
        layouts=['tile','center']
        self.text_ctrl_3.SetImgBackground(self.text_ctrl_2.GetValue(),layouts[id])
        self.text_ctrl_3.ReDraw()

    def OnBGSet(self,evt):
        id=evt.GetInt()
        layouts=['tile','center']
        if id==0:
            self.text_ctrl_2.Enable()
            self.button_3.Enable()
            self.combo_box_3.Enable()
            if self.text_ctrl_2.GetValue()<>'':
                self.text_ctrl_3.SetImgBackground(self.text_ctrl_2.GetValue(),layouts[self.combo_box_3.GetSelection()])
                self.text_ctrl_3.ReDraw()

        else:
            self.text_ctrl_2.Disable()
            self.button_3.Disable()
            self.combo_box_3.Disable()

    def OnSelectBGColor(self,evt):
        dlg = wx.ColourDialog(self)
        dlg.GetColourData().SetChooseFull(True)
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            if self.combo_box_4.GetSelection()==1:
                self.text_ctrl_3.SetImgBackground('')
            self.text_ctrl_3.SetBackgroundColour(data.GetColour())

            self.text_ctrl_3.ReDraw()
        dlg.Destroy()

    def OnSelectULColor(self,evt):
        dlg = wx.ColourDialog(self)
        dlg.GetColourData().SetChooseFull(True)
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            self.text_ctrl_3.SetUnderline(color=data.GetColour())

            self.text_ctrl_3.ReDraw()
        dlg.Destroy()

    def OnSelFont(self,event):
        global GlobalConfig
        data=wx.FontData()
#        data.SetInitialFont(GlobalConfig['CurFont'])
#        data.SetColour(GlobalConfig['CurFColor'])
        data.SetInitialFont(self.text_ctrl_3.GetFont())
        data.SetColour(self.text_ctrl_3.GetForegroundColour())
        data.EnableEffects(False)
        dlg = wx.FontDialog(self, data)
        if dlg.ShowModal() == wx.ID_OK:
            ft=dlg.GetFontData().GetChosenFont()
            self.text_ctrl_3.SetFont(ft)
            self.text_ctrl_3.ReDraw()
        dlg.Destroy()

    def OnSelFColor(self,event):
        global GlobalConfig
        dlg = wx.ColourDialog(self)
        dlg.GetColourData().SetChooseFull(True)
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            self.text_ctrl_3.SetFColor(data.GetColour())
            self.text_ctrl_3.ReDraw()
        dlg.Destroy()




    def OnSelectBG(self,evt):
        wildcard = u"所有图片文件|*.gif;*.bmp;*.png;*.tif;*.tiff;*.jpg;*.jpeg;*.tif;*.tiff|"        \
            "JPG (*.jpg,*.jpeg)|*.jpg;*.jpeg|"     \
           "GIF (*.gif)|*.gif|" \
           "BMP (*.bmp)|*.bmp|"    \
           "PNG (*.png)|*.png|"        \
           "TIF (*.tif,*.tiff)|*.tif;*.tiff|"        \
           "All files (*.*)|*.*"

        dlg = wx.FileDialog(
            self, message=u"选择背景图片",
            defaultDir=os.getcwd(),
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.FD_FILE_MUST_EXIST
            )
        dlg.ShowModal()
        rpath=dlg.GetPath()
        if rpath<>None and rpath<>'':
            self.text_ctrl_2.SetValue(rpath)
            self.text_ctrl_3.SetImgBackground(rpath)
            self.text_ctrl_3.ReDraw()
        dlg.Destroy()

    def OnSelULS(self,evt):
        id=evt.GetInt()
        uls=[None,wx.SOLID,wx.DOT,wx.LONG_DASH,wx.DOT_DASH]
        if id==0:
            self.text_ctrl_3.SetUnderline(False)
        else:
            self.text_ctrl_3.SetUnderline(True,uls[id])
        self.text_ctrl_3.ReDraw()


    def AlignSetting(self):
        sms={'paper':0,'book':1,'vbook':2}
        self.combo_box_2.SetSelection(sms[self.text_ctrl_3.show_mode])
        if self.text_ctrl_3.bg_img==None:
            self.text_ctrl_2.SetValue('')
        else:
            self.text_ctrl_2.SetValue(self.text_ctrl_3.bg_img_path)
        layouts={'tile':0,'center':1}
        self.combo_box_3.SetSelection(layouts[self.text_ctrl_3.bg_style])
        if self.text_ctrl_3.bg_img_path<>None and self.text_ctrl_3.bg_img_path<>'':
            self.combo_box_4.SetSelection(0)
            self.text_ctrl_2.Enable()
            self.button_3.Enable()
            self.combo_box_3.Enable()

        else:
            self.combo_box_4.SetSelection(1)
        uls={wx.SOLID:1,wx.DOT:2,wx.LONG_DASH:3,wx.SHORT_DASH:3,wx.DOT_DASH:4}
        if self.text_ctrl_3.under_line==False: self.combo_box_5.SetSelection(0)
        else:
            self.combo_box_5.SetSelection(uls[self.text_ctrl_3.under_line_style])
        self.spin_ctrl_1.SetValue(self.text_ctrl_3.pagemargin)
        self.spin_ctrl_2.SetValue(self.text_ctrl_3.bookmargin)
        self.spin_ctrl_3.SetValue(self.text_ctrl_3.vbookmargin)
        self.spin_ctrl_4.SetValue(self.text_ctrl_3.centralmargin)
        self.spin_ctrl_5.SetValue(self.text_ctrl_3.linespace)
        self.spin_ctrl_6.SetValue(self.text_ctrl_3.vlinespace)



    def OnKeySelect(self,evt=None):
        global KeyConfigList
        if evt<>None:
            id=evt.GetInt()
        else:
            id=self.combo_box_7.GetSelection()
        self.grid_1.Load(KeyConfigList[id])


    def OnThemeSelect(self,evt=None):
        global ThemeList
        if evt<>None:
            id=evt.GetInt()
        else:
            id=self.combo_box_1.GetSelection()
        if id==0:
            self.text_ctrl_3.SetShowMode(GlobalConfig['showmode'])
            if GlobalConfig['backgroundimg']<>'' and GlobalConfig['backgroundimg']<>None:
                self.text_ctrl_3.SetImgBackground(GlobalConfig['backgroundimg'],GlobalConfig['backgroundimglayout'])
            else:
                self.text_ctrl_3.SetImgBackground(None)
                self.text_ctrl_3.SetBackgroundColour(GlobalConfig['CurBColor'])
            self.text_ctrl_3.SetFColor(GlobalConfig['CurFColor'])
            self.text_ctrl_3.SetFont(GlobalConfig['CurFont'])
            self.text_ctrl_3.SetUnderline(GlobalConfig['underline'],GlobalConfig['underlinestyle'],GlobalConfig['underlinecolor'])
            self.text_ctrl_3.SetSpace(GlobalConfig['pagemargin'],GlobalConfig['bookmargin'],GlobalConfig['vbookmargin'],GlobalConfig['centralmargin'],GlobalConfig['linespace'],GlobalConfig['vlinespace'])
            self.text_ctrl_3.SetValue(u"《老子》八十一章\n\n　1.道可道，非常道。名可名，非常名。无名天地之始。有名万物之母。故常无欲以观其妙。常有欲以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。\n\n　2.天下皆知美之为美，斯恶矣；皆知善之为善，斯不善已。故有无相生，难易相成，长短相形，高下相倾，音声相和，前後相随。是以圣人处无为之事，行不言之教。万物作焉而不辞。生而不有，为而不恃，功成而弗居。夫唯弗居，是以不去。\n\n　3.不尚贤， 使民不争。不贵难得之货，使民不为盗。不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹，弱其志，强其骨；常使民无知、无欲，使夫智者不敢为也。为无为，则无不治。\n\n　4.道冲而用之，或不盈。渊兮似万物之宗。解其纷，和其光，同其尘，湛兮似或存。吾不知谁之子，象帝之先。\n\n　5.天地不仁，以万物为刍狗。圣人不仁，以百姓为刍狗。天地之间，其犹橐迭乎？虚而不屈，动而愈出。多言数穷，不如守中。")
        else:
            id-=1
            self.text_ctrl_3.SetShowMode(ThemeList[id]['showmode'])
            if ThemeList[id]['backgroundimg']<>'' and ThemeList[id]['backgroundimg']<>None:
                self.text_ctrl_3.SetImgBackground(ThemeList[id]['backgroundimg'],ThemeList[id]['backgroundimglayout'])
            else:
                self.text_ctrl_3.SetImgBackground(None)
                self.text_ctrl_3.SetBackgroundColour(ThemeList[id]['bcolor'])
            self.text_ctrl_3.SetFColor(ThemeList[id]['fcolor'])
            self.text_ctrl_3.SetFont(ThemeList[id]['font'])
            self.text_ctrl_3.SetUnderline(ThemeList[id]['underline'],ThemeList[id]['underlinestyle'],GlobalConfig['underlinecolor'])
            self.text_ctrl_3.SetSpace(ThemeList[id]['pagemargin'],ThemeList[id]['bookmargin'],GlobalConfig['vbookmargin'],GlobalConfig['centralmargin'],GlobalConfig['linespace'],GlobalConfig['vlinespace'])
            self.text_ctrl_3.ReDraw()
        self.AlignSetting()

    def SelectDir(self,event):
        dlg = wx.DirDialog(self, u"请选择目录：",defaultPath=GlobalConfig['LastDir'],
                          style=wx.DD_DEFAULT_STYLE
                           )
        if dlg.ShowModal() == wx.ID_OK:
            self.text_ctrl_1.SetValue(dlg.GetPath())

        dlg.Destroy()


    def OnUpdateSpace(self,evt):
        lvalue=evt.GetInt()
        lid=evt.GetEventObject()
##        print lid
##        print self.spin_ctrl_2.GetId()
        if lid==self.spin_ctrl_1:self.text_ctrl_3.SetSpace(lvalue)
        if lid==self.spin_ctrl_2:
            self.text_ctrl_3.SetSpace(bookmargin=lvalue)

        if lid==self.spin_ctrl_3:self.text_ctrl_3.SetSpace(vbookmargin=lvalue)
        if lid==self.spin_ctrl_4:self.text_ctrl_3.SetSpace(centralmargin=lvalue)
        if lid==self.spin_ctrl_5:self.text_ctrl_3.SetSpace(linespace=lvalue)
        if lid==self.spin_ctrl_6:self.text_ctrl_3.SetSpace(vlinespace=lvalue)

        self.text_ctrl_3.ReDraw()


    def OnExportKey(self,evt):
        global KeyConfigList
        clist=[]
        for k in KeyConfigList:
            if k[0]=='last':
                clist.append(u'当前设置')
            else:
                clist.append(k[0])
        edlg=CheckDialog(self,u'导出按键配置方案',clist)
        edlg.ShowModal()
        rlist=edlg.GetChecks()
        if len(rlist)>0:
            wildcard = u"所有文件 (*.*)|*.*|"
            dlg = wx.FileDialog(
                self, message=u"导出为...", defaultDir=GlobalConfig['LastDir'],
                defaultFile="", wildcard=wildcard, style=wx.SAVE | wx.FD_OVERWRITE_PROMPT
                )

            if dlg.ShowModal() == wx.ID_OK:
                config=MyConfig()
                for r in rlist:
                    config.add_section(KeyConfigList[r][0])
                    i=1
                    kl=len(KeyConfigList[r])
                    cstr={}
                    while i<kl:
                        if KeyConfigList[r][i][0] not in cstr:
                            cstr[KeyConfigList[r][i][0]]=KeyConfigList[r][i][1]
                        else:
                            cstr[KeyConfigList[r][i][0]]+="&&"+KeyConfigList[r][i][1]
                        i+=1
                    for key,val in cstr.items():
                        config.set(KeyConfigList[r][0],unicode(key),val)
                try:
                    ConfigFile=codecs.open(dlg.GetPath(),encoding='utf-8',mode='w')
                    config.write(ConfigFile)
                    ConfigFile.close()
                except:
                    dlg = wx.MessageDialog(None, u'导出文件错误！',u"错误！",wx.OK|wx.ICON_ERROR)
                    dlg.ShowModal()
                    dlg.Destroy()
                    return False



            dlg.Destroy()



    def OnImportKey(self,evt):
        global GlobalConfig,KeyConfigList
        wildcard = u"所有文件 (*.*)|*.*"
        dlg = wx.FileDialog(
            self, message=u"选择要导入的文件:",
            defaultDir=GlobalConfig['LastDir'],
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            flist=dlg.GetPath()
            config=MyConfig()
            try:
                ffp=codecs.open(flist,encoding='utf-8',mode='r')
                config.readfp(ffp)
            except:
                dlg = wx.MessageDialog(self, u'这不是一个合法的配置文件！',
                               u'出错了！',
                               wx.OK | wx.ICON_ERROR
                               )
                dlg.ShowModal()
                dlg.Destroy()
                return
            secs=config.sections()
##            if 'last' in secs:
##                secs[secs.index('last')]=u'导入的当前配置'
            kname_list=[]
            for k in KeyConfigList:
                kname_list.append(k[0])
            cdlg=CheckDialog(self,u'选择要导入的配置...',secs)
            cdlg.ShowModal()
            rlist=cdlg.GetChecks()
            if len(rlist)<=0:return
            tname=''
            for r in rlist:
                if secs[r]=='last':
                    tname=u'导入的当前配置'
                else:
                    tname=secs[r]
                if tname in kname_list:
                    dlg=wx.MessageDialog(self,secs[r]+u" 已有同名配置方案，是否继续？",u"导入",wx.YES_NO|wx.NO_DEFAULT)
                    if dlg.ShowModal()==wx.ID_NO:
                        dlg.Destroy()
                        continue
                    else:
                        KeyConfigList.__delitem__(kname_list.index(secs[r]))
                kconfig=[]
                kconfig.append(tname)
                try:
                    cstr=config.get(secs[r],u'向上翻页')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'向上翻页',cs))
                except:
                    kconfig.append((u'向上翻页',"----+WXK_PAGEUP"))

                try:
                    cstr=config.get(secs[r],u'跳到结尾')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'跳到结尾',cs))
                except:
                    kconfig.append((u'跳到结尾',"----+WXK_END"))

                try:
                    cstr=config.get(secs[r],u'切换为繁体字')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'切换为繁体字',cs))
                except:
                    kconfig.append((u'切换为繁体字',"----+WXK_F8"))

                try:
                    cstr=config.get(secs[r],u'另存为')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'另存为',cs))
                except:
                    kconfig.append((u'另存为','C---+"S"'))

                try:
                    cstr=config.get(secs[r],u'向下翻页')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'向下翻页',cs))
                except:
                    kconfig.append((u'向下翻页','----+WXK_PAGEDOWN'))

                try:
                    cstr=config.get(secs[r],u'智能分段')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'智能分段',cs))
                except:
                    kconfig.append((u'智能分段','-A--+"P"'))

                try:
                    cstr=config.get(secs[r],u'查找')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'查找',cs))
                except:
                    kconfig.append((u'查找','C---+"F"'))

                try:
                    cstr=config.get(secs[r],u'关于')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'关于',cs))
                except:
                    kconfig.append((u'关于','----+WXK_F6'))

                try:
                    cstr=config.get(secs[r],u'查找下一个')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'查找下一个',cs))
                except:
                    kconfig.append((u'查找下一个','----+WXK_F3'))

                try:
                    cstr=config.get(secs[r],u'自动翻页')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'自动翻页',cs))
                except:
                    kconfig.append((u'自动翻页','----+WXK_RETURN'))


                try:
                    cstr=config.get(secs[r],u'重新载入插件')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'重新载入插件',cs))
                except:
                    kconfig.append((u'重新载入插件','C---+"R"'))

                try:
                    cstr=config.get(secs[r],u'选项')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'选项',cs))
                except:
                    kconfig.append((u'选项','-A--+"O"'))

                try:
                    cstr=config.get(secs[r],u'简明帮助')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'简明帮助',cs))
                except:
                    kconfig.append((u'简明帮助','----+WXK_F1'))

                try:
                    cstr=config.get(secs[r],u'纸张显示模式')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'纸张显示模式',cs))
                except:
                    kconfig.append((u'纸张显示模式','-A--+"M"'))

                try:
                    cstr=config.get(secs[r],u'下一个文件')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'下一个文件',cs))
                except:
                    kconfig.append((u'下一个文件','C---+"]"'))

                try:
                    cstr=config.get(secs[r],u'添加到收藏夹')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'添加到收藏夹',cs))
                except:
                    kconfig.append((u'添加到收藏夹','C---+"D"'))

                try:
                    cstr=config.get(secs[r],u'搜索小说网站')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'搜索小说网站',cs))
                except:
                    kconfig.append((u'搜索小说网站','-A--+"C"'))

                try:
                    cstr=config.get(secs[r],u'全屏显示')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'全屏显示',cs))
                except:
                    kconfig.append((u'全屏显示','C---+"I"'))

                try:
                    cstr=config.get(secs[r],u'跳到首页')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'跳到首页',cs))
                except:
                    kconfig.append((u'跳到首页','----+WXK_HOME'))

                try:
                    cstr=config.get(secs[r],u'拷贝')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'拷贝',cs))
                except:
                    kconfig.append((u'拷贝','C---+"C"'))

                try:
                    cstr=config.get(secs[r],u'竖排书本显示模式')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'竖排书本显示模式',cs))
                except:
                    kconfig.append((u'竖排书本显示模式','-A--+"N"'))

                try:
                    cstr=config.get(secs[r],u'显示工具栏')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'显示工具栏',cs))
                except:
                    kconfig.append((u'显示工具栏','C---+"T"'))

                try:
                    cstr=config.get(secs[r],u'打开文件')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'打开文件',cs))
                except:
                    kconfig.append((u'打开文件','C---+"P"'))

                try:
                    cstr=config.get(secs[r],u'整理收藏夹')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'整理收藏夹',cs))
                except:
                    kconfig.append((u'整理收藏夹','C---+"M"'))

                try:
                    cstr=config.get(secs[r],u'文件列表')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'文件列表',cs))
                except:
                    kconfig.append((u'文件列表','C---+"O"'))

                try:
                    cstr=config.get(secs[r],u'切换为简体字')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'切换为简体字',cs))
                except:
                    kconfig.append((u'切换为简体字','----+WXK_F7'))


                try:
                    cstr=config.get(secs[r],u'过滤HTML标记')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'过滤HTML标记',cs))
                except:
                    kconfig.append((u'过滤HTML标记','----+WXK_F9'))


                try:
                    cstr=config.get(secs[r],u'书本显示模式')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'书本显示模式',cs))
                except:
                    kconfig.append((u'书本显示模式','-A--+"B"'))

                try:
                    cstr=config.get(secs[r],u'检查更新')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'检查更新',cs))
                except:
                    kconfig.append((u'检查更新','----+WXK_F5'))

                try:
                    cstr=config.get(secs[r],u'版本更新内容')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'版本更新内容',cs))
                except:
                    kconfig.append((u'版本更新内容','----+WXK_F2'))


                try:
                    cstr=config.get(secs[r],u'查找上一个')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'查找上一个',cs))
                except:
                    kconfig.append((u'查找上一个','----+WXK_F4'))

                try:
                    cstr=config.get(secs[r],u'显示文件侧边栏')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'显示文件侧边栏',cs))
                except:
                    kconfig.append((u'显示文件侧边栏','-A--+"D"'))

                try:
                    cstr=config.get(secs[r],u'关闭')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'关闭',cs))
                except:
                    kconfig.append((u'关闭','C---+"Z"'))

                try:
                    cstr=config.get(secs[r],u'退出')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'退出',cs))
                except:
                    kconfig.append((u'退出','-A--+"X"'))

                try:
                    cstr=config.get(secs[r],u'上一个文件')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'上一个文件',cs))
                except:
                    kconfig.append((u'上一个文件','C---+"["'))

                try:
                    cstr=config.get(secs[r],u'显示进度条')
                    cstr_list=cstr.split('&&')
                    for cs in cstr_list:
                        kconfig.append((u'显示进度条',cs))
                except:
                    kconfig.append((u'显示进度条','----+"Z"'))
                KeyConfigList.append(kconfig)
            cur_str=self.combo_box_7.GetStringSelection()
            self.combo_box_7.Clear()
            for t in KeyConfigList:
                if t[0]=='last':self.combo_box_7.Append(u'当前设置')
                else:
                    self.combo_box_7.Append(t[0])
            self.combo_box_7.SetStringSelection(cur_str)






    def OnExportTheme(self,evt):
        global ThemeList,GlobalConfig
        clist=[]
        clist.append(u'当前设置')
        for t in ThemeList:
            clist.append(t['name'])
        edlg=CheckDialog(self,u'导出显示方案',clist)
        edlg.ShowModal()
        rlist=edlg.GetChecks()
        if len(rlist)>0:
            wildcard = u"所有文件 (*.*)|*.*|"
            dlg = wx.FileDialog(
                self, message=u"导出为...", defaultDir=GlobalConfig['LastDir'],
                defaultFile="", wildcard=wildcard, style=wx.SAVE | wx.FD_OVERWRITE_PROMPT
                )

            if dlg.ShowModal() == wx.ID_OK:
                config=MyConfig()
                config.add_section('Appearance')
                if 0 in rlist:
                    ft=GlobalConfig['CurFont']
                    save_str=unicode(ft.GetPointSize())+u'|'+unicode(ft.GetFamily())+u'|'+unicode(ft.GetStyle())+u'|'+unicode(ft.GetWeight())+u'|'+unicode(ft.GetUnderlined())+u'|'+ft.GetFaceName()+u'|'+unicode(ft.GetDefaultEncoding())+u'|'+unicode(GlobalConfig['CurFColor'])+u'|'+unicode(GlobalConfig['CurBColor'])
                    save_str+=u'|'+unicode(GlobalConfig['backgroundimg'])
                    save_str+=u'|'+unicode(GlobalConfig['showmode'])
                    save_str+=u'|'+unicode(GlobalConfig['backgroundimglayout'])
                    save_str+=u'|'+unicode(GlobalConfig['underline'])
                    save_str+=u'|'+unicode(GlobalConfig['underlinestyle'])
                    save_str+=u'|'+unicode(GlobalConfig['underlinecolor'])
                    save_str+=u'|'+unicode(GlobalConfig['pagemargin'])
                    save_str+=u'|'+unicode(GlobalConfig['bookmargin'])
                    save_str+=u'|'+unicode(GlobalConfig['vbookmargin'])
                    save_str+=u'|'+unicode(GlobalConfig['centralmargin'])
                    save_str+=u'|'+unicode(GlobalConfig['linespace'])
                    save_str+=u'|'+unicode(GlobalConfig['vlinespace'])

                    config.set('Appearance','last',save_str)
                    rlist.remove(0)
                for r in rlist:
                    config.set('Appearance',ThemeList[r]['name'],ThemeList[r]['config'])
                try:
                    ConfigFile=codecs.open(dlg.GetPath(),encoding='utf-8',mode='w')
                    config.write(ConfigFile)
                    ConfigFile.close()
                except:
                    dlg = wx.MessageDialog(None, u'导出失败！',u"错误！",wx.OK|wx.ICON_ERROR)
                    dlg.ShowModal()
                    dlg.Destroy()



    def OnImportTheme(self,evt):
        global GlobalConfig,ThemeList
        wildcard = u"所有文件 (*.*)|*.*"
        dlg = wx.FileDialog(
            self, message=u"选择要导入的文件:",
            defaultDir=GlobalConfig['LastDir'],
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            flist=dlg.GetPath()
            config=MyConfig()
            try:
                ffp=codecs.open(flist,encoding='utf-8',mode='r')
                config.readfp(ffp)
                if not config.has_section('Appearance'):raise
            except:
                dlg = wx.MessageDialog(self, u'这不是一个合法的配置文件！',
                               u'出错了！',
                               wx.OK | wx.ICON_ERROR
                               )
                dlg.ShowModal()
                dlg.Destroy()
                return
            ft_list=config.items('Appearance')
            clist=[]
            for f in ft_list:
                clist.append(f[0])
            cdlg=CheckDialog(self,u'选择要导入的显示配置',clist)
            cdlg.ShowModal()
            cdlg.Destroy()
            rlist=cdlg.GetChecks()
            cur_nlist=[]
            for t in ThemeList:
                cur_nlist.append(t['name'])
            for r in rlist:
                if clist[r]=='last':
                    tname=u'导入的当前配置'
                else:
                    tname=clist[r]
                f=ft_list[r][1].split('|')
                if len(f)<>21: raise
                try:
                    l={}
                    l['font']=wx.Font(int(f[0]),int(f[1]),int(f[2]),int(f[3]),eval(f[4]),f[5],int(f[6]))
                    l['fcolor']=eval(f[7])
                    l['bcolor']=eval(f[8])
                    if f[9]<>'None':
                        l['backgroundimg']=f[9]
                    else:
                        l['backgroundimg']=None
                    l['showmode']=f[10]
                    l['backgroundimglayout']=f[11]
                    l['underline']=eval(f[12])
                    l['underlinestyle']=int(f[13])
                    l['underlinecolor']=f[14]
                    l['pagemargin']=int(f[15])
                    l['bookmargin']=int(f[16])
                    l['vbookmargin']=int(f[17])
                    l['centralmargin']=int(f[18])
                    l['linespace']=int(f[19])
                    l['vlinespace']=int(f[20])
                    l['name']=tname
                    l['config']=ft_list[r][1]
                except:
                    dlg = wx.MessageDialog(self, tname+u'不是一个合法的配置方案！',
                    u'出错了！',
                    wx.OK | wx.ICON_ERROR
                    )
                    dlg.ShowModal()
                    dlg.Destroy()
                    continue
                if tname in cur_nlist:
                    dlg=wx.MessageDialog(self,tname+u" 已有同名配置方案，是否继续？",u"导入",wx.YES_NO|wx.NO_DEFAULT)
                    if dlg.ShowModal()==wx.ID_NO:
                        dlg.Destroy()
                        continue
                    else:
                        ThemeList.__delitem__(cur_nlist.index(tname))
                ThemeList.append(l)
            cur_str=self.combo_box_1.GetStringSelection()
            self.combo_box_1.Clear()
            self.combo_box_1.Append(u'当前设置')
            for t in ThemeList:
                self.combo_box_1.Append(t['name'])
            self.combo_box_1.SetStringSelection(cur_str)





# end of class NewOptionDialog





if __name__ == "__main__":



##    try:
    fpath=os.environ['APPDATA'].decode('gbk')+u"\\litebook.bookdb"
##    fpath=fpath.decode('gbk')
    SqlCon = sqlite3.connect(fpath)
##    except:
##        print "Can not open "+os.environ['APPDATA']+u"\\litebook.bookdb as a sqlite file!"
    sqlstr="select * from book_history"
    try:
        SqlCon.execute(sqlstr)
        SqlCur=SqlCon.cursor()
    except:
        sqlstr = """CREATE TABLE `book_history` (
          `name` varchar(512) NOT NULL,
          `type` varchar(20) NOT NULL,
          `zfile` varchar(512) default NULL,
          `date` float unsigned NOT NULL
        ) ;
        """
        SqlCon.execute(sqlstr)
        SqlCur=SqlCon.cursor()

##    sqlstr="select * from book_website"
##    try:
##        SqlCon.execute(sqlstr)
##    except:
##        sqlstr = """
##        CREATE TABLE `book_website` (
##        `name` varchar(128) NOT NULL,
##        `base_url` varchar(256) NOT NULL,
##        `search_url` varchar(256) NOT NULL
##        );
##        """
##        SqlCon.execute(sqlstr)


    app = wx.PySimpleApp(0)
    fname=None
    if len(sys.argv)>1:
        if sys.argv[1].lower()=='-reset':
            dlg=wx.MessageDialog(None,u"此操作将把当前配置恢复为缺省配置，可以解决某些启动问题，但是会覆盖当前设置，是否继续？",u"恢复到LiteBook的缺省设置",wx.YES_NO|wx.NO_DEFAULT)
            if dlg.ShowModal()==wx.ID_YES:
                try:
                    os.remove(os.environ['APPDATA'].decode('gbk')+u"\\litebook.ini")
                    os.remove(os.environ['APPDATA'].decode('gbk')+u"\\litebook_key.ini")
                except:
                    pass
        else:
            fname=sys.argv[1]
    readConfigFile()
    readKeyConfig()
    readPlugin()
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, fname)
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
